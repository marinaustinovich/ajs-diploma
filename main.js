(()=>{"use strict";function e(e,t){if(e<t-1&&e>0)return"top";if(e<t**2-1&&e>t**2-t)return"bottom";for(let a=1;a<t-1;a+=1){if(e===t*a)return"left";if(e===t*a+(t-1))return"right"}switch(e){case 0:return"top-left";case t-1:return"top-right";case t*(t-1):return"bottom-left";case t**2-1:return"bottom-right";default:return"center"}}function t(e,t){const a=function(e){let t,a,s,i=!1,l=!1;const n=200;function o(){i=!0,t.classList.remove("modal__show"),t.classList.add("modal__hiding"),setTimeout((function(){t.classList.remove("modal__hiding"),i=!1}),n),document.dispatchEvent(s)}function r(e){"modalFunc"===e.target.dataset.dismiss&&o()}return t=function(e){t=document.createElement("div");let a,s="";if(t.classList.add("modalFunc"),a='<div class="modal__backdrop" data-dismiss="modalFunc"><div class="modal__content"><div class="modal__header"><div class="modal__title" data-modalFunc="title">{{title}}</div><span class="modal__btn-close" data-dismiss="modalFunc" title="–ó–∞–∫—Ä—ã—Ç—å">√ó</span></div><div class="modal__body" data-modalFunc="content">{{content}}</div>{{footer}}</div></div>'.replace("{{title}}",e.title||"–ù–æ–≤–æ–µ –æ–∫–Ω–æ"),a=a.replace("{{content}}",e.content||""),e.footerButtons){for(let t=0,a=e.footerButtons.length;t<a;t++){let a='<button type="button" class="{{button_class}}" data-handler={{button_handler}}>{{button_text}}</button>'.replace("{{button_class}}",e.footerButtons[t].class);a=a.replace("{{button_handler}}",e.footerButtons[t].handler),a=a.replace("{{button_text}}",e.footerButtons[t].text),s+=a}s='<div class="modal__footer">{{buttons}}</div>'.replace("{{buttons}}",s)}return a=a.replace("{{footer}}",s),t.innerHTML=a,document.body.appendChild(t),t}(e||{}),t.addEventListener("click",r),a=new CustomEvent("show.modalFunc",{detail:t}),s=new CustomEvent("hide.modalFunc",{detail:t}),{show:function(){l||i||(t.classList.add("modal__show"),document.dispatchEvent(a))},hide:o,destroy:function(){t.parentElement.removeChild(t),t.removeEventListener("click",r),l=!0},setContent:function(e){t.querySelector('[data-modalFunc="content"]').innerHTML=e},setTitle:function(e){t.querySelector('[data-modalFunc="title"]').innerHTML=e}}}({title:e,content:"&#"+t,footerButtons:[{class:"btn btn__cancel",text:"Close",handler:"modalHandlerCancel"}]});document.addEventListener("click",(e=>{"modalHandlerCancel"===e.target.dataset.handler&&a.hide()})),a.show()}class a{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const a=document.createElement("div");a.classList.add("cell","map-tile",`map-tile-${e(t,this.boardSize)}`),a.addEventListener("mouseenter",(e=>this.onCellEnter(e))),a.addEventListener("mouseleave",(e=>this.onCellLeave(e))),a.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(a)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const a of e){const e=this.boardEl.children[a.position],s=document.createElement("div");s.classList.add("character",a.character.type);const i=document.createElement("div");i.classList.add("health-level");const l=document.createElement("div");l.classList.add("health-level-indicator","health-level-indicator-"+((t=a.character.health)<15?"critical":t<50?"normal":"high")),l.style.width=`${a.character.health}%`,i.appendChild(l),s.appendChild(i),e.appendChild(s)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}static showError(e,a){t(e,a)}static showMessage(e,a){t(e,a)}static showPoints(e,a){t(e,a)}selectCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((a=>{const s=this.cells[e],i=document.createElement("span");i.textContent=t,i.classList.add("damage"),s.appendChild(i),i.addEventListener("animationend",(()=>{s.removeChild(i),a("show")}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}}const s={prairie:"prairie",desert:"desert",arctic:"arctic",mountain:"mountain"};class i{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if("Character"===new.target.name)throw new Error("Invalid class");this.type=t,this.level=e,this.attack=0,this.defence=0,this.health=50}}class l extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"bowman"),this.attack=25,this.defence=25}}class n extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"swordsman"),this.attack=40,this.defence=10}}class o extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"magician"),this.attack=10,this.defence=40}}class r extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"vampire"),this.attack=25,this.defence=25}}class c extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"daemon"),this.attack=10,this.defence=10}}class h extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"undead"),this.attack=40,this.defence=10}}class m{constructor(e){this.characters=e}}class d{constructor(e,t){if(!(e instanceof i))throw new Error("character must be instance of Character or its children");if("number"!=typeof t)throw new Error("position must be a number");this.character=e,this.position=t}}function u(e){const t=[];if(arguments.length>1&&void 0!==arguments[1]&&arguments[1])for(let a=e-2;a<e**2;a+=e)t.push(a),t.push(a+1);else for(let a=0;a<e**2;a+=8)t.push(a),t.push(a+1);return t}function g(e){const t=u(e,arguments.length>1&&void 0!==arguments[1]&&arguments[1]);return t[Math.floor(Math.random()*t.length)]}function v(e,t,a,s){let[i,l]=s;const n=[];i>=4&&(i=4),l>=10&&(l=10);const o=function(e,t,a){const s=[],i=function*(e,t){for(;;){const a=Math.floor(Math.random()*t+1),s=e[Math.floor(Math.random()*e.length)];yield new s(a)}}(e,t);for(let e=0;e<a;e+=1)s.push(i.next().value);return new m(s)}(e,i,l),r=[];return o.characters.forEach((e=>{let s,i=!1;do{s=g(t,a),r.find((e=>e===s))?s=g(t,a):(r.push(s),i=!0)}while(!i);n.push(new d(e,s))})),n}function p(e){let t;switch(e.character.type){case"bowman":t=l;break;case"swordsman":t=n;break;case"magician":t=o;break;case"daemon":t=c;break;case"undead":t=h;break;case"vampire":t=r}const a=new t(e.character.level),s=new d(a,e.position);return s.character.attack=e.character.attack,s.character.health=e.character.health,s.character.defence=e.character.defence,s}class S{constructor(e){this.levelGame=1,this.gamePlay=e,this.userTeam=[],this.compTeam=[],this.allPlayer=[],this.isMove="user",this.countClick=0,this.survivos=[],this.history=[],this.points=0,this.block=!1,this.initNewTeams()}getUserTeam(e){let[t,a]=e;const s=v([l,n,o],this.gamePlay.boardSize,!1,[t,a]);return this.userTeam=s,s}getCompTeam(e){let[t,a]=e;const s=v([r,c,h],this.gamePlay.boardSize,!0,[t,a]);return this.compTeam=s,s}getAllPositions(e,t){return e&&0!==e.length?t&&0!==t.length?e.concat(t):e:t}initNewTeams(){this.userTeam=this.getUserTeam([this.levelGame,this.levelGame]),this.compTeam=this.getCompTeam([this.levelGame,this.levelGame]),this.allPlayer=this.getAllPositions(this.userTeam,this.compTeam)}getInfo(e){return`üéñ${e.level} ‚öî${e.attack} üõ°${e.defence} ‚ù§${e.health}`}levelUp(){for(const e of this.allPlayer){const t=e.character;t.attack=this.upAttackDefence(t.attack,t.health),t.defence=this.upAttackDefence(t.defence,t.health),t.level=t.level+1<=4?t.level+1:t.level=4,t.health=t.health+80<100?t.health+80:100}this.gamePlay.drawUi(Object.values(s)[this.levelGame-1]);const e=this.getUserTeam([this.levelGame-1,this.levelGame]),t=u(this.gamePlay.boardSize);e.forEach((e=>t.splice(t.indexOf(e.position),1))),this.survivos.forEach((e=>{if(!t.includes(e.position)){const a=Math.floor(Math.random()*t.length);e.position=t[a]}})),this.userTeam=this.survivos.concat(e),this.compTeam=this.getCompTeam([this.levelGame,this.levelGame+this.allPlayer.length]),this.allPlayer=this.getAllPositions(this.userTeam,this.compTeam),this.countClick=0}upAttackDefence(e,t){return Math.floor(Math.max(e,e*(80+t)/100))}calculateSumPoints(){return this.userTeam.reduce(((e,t)=>e+t.character.health),0)}}const f="auto",C="pointer",y="crosshair",w="not-allowed";function b(e,t,a){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const i=[];for(let e=0;e<t**2;e+=1)i.push(e);const l=function(e,t){const a=[];for(let s=0,i=t;s<e.length;s+=t,i+=t)a.push(e.slice(s,i));return a}(i,t);return s?function(e,t,a){const s=[];let i,l;for(let a=0;a<e.length&&(l=a,i=e[a].findIndex((e=>e===t)),-1===i);a+=1);for(let n=-a;n<=a;n+=1)for(let o=-a;o<=a;o+=1)l+n>=0&&i+o>=0&&l+n<e.length&&i+o<e.length&&e[l+n][i+o]!==t&&s.push(e[l+n][i+o]);return s}(l,e,a):function(e,t,a){const s=[];let i,l;for(let a=0;a<e.length&&(l=a,i=e[a].findIndex((e=>e===t)),-1===i);a+=1);for(let t=1;t<=a;t+=1)i-t>=0&&s.push(e[l][i-t]),i+t<e.length&&s.push(e[l][i+t]),l+t<e.length&&i-t>=0&&s.push(e[l+t][i-t]),l+t<e.length&&i+t<e.length&&s.push(e[l+t][i+t]),l-t>=0&&i-t>=0&&s.push(e[l-t][i-t]),l-t>=0&&i+t<e.length&&s.push(e[l-t][i+t]),l-t>=0&&s.push(e[l-t][i]),l+t<e.length&&s.push(e[l+t][i]);return s}(l,e,a)}const P=new a;P.bindToDOM(document.querySelector("#game-container"));const k=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),L=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.gameState=new S(this.gamePlay),this.onCellClick=this.onCellClick.bind(this),this.onCellEnter=this.onCellEnter.bind(this),this.onCellLeave=this.onCellLeave.bind(this),this.newGame=this.newGame.bind(this),this.saveGame=this.saveGame.bind(this),this.loadGame=this.loadGame.bind(this)}init(){this.events(),this.updatePicture()}events(){this.gamePlay.addCellEnterListener(this.onCellEnter),this.gamePlay.addCellLeaveListener(this.onCellLeave),this.gamePlay.addCellClickListener(this.onCellClick),this.gamePlay.addNewGameListener(this.newGame),this.gamePlay.addSaveGameListener(this.saveGame),this.gamePlay.addLoadGameListener(this.loadGame)}newGame(){this.gameState.history.push({levelGame:this.gameState.levelGame,points:this.gameState.points}),this.gameState.block=!1,this.gameState.levelGame=1,this.gameState.points=0,this.gameState.countClick=0,this.reset(),this.gameState.initNewTeams(),this.updatePicture()}saveGame(){this.stateService.save(this.gameState),a.showMessage("Your game has saved!","9997")}loadGame(){try{const e=this.stateService.load();if(e){!0===e.block?this.gameState.levelGame=e.levelGame-1:this.gameState.levelGame=e.levelGame,this.gameState.countClick=e.countClick,this.gameState.history=e.history,this.gameState.isMove=e.isMove,this.gameState.block=e.block,this.gameState.points=e.points,this.gameState.userTeam=[],this.gameState.compTeam=[],this.reset();const t=p(e.activeChar);e.userTeam.forEach((e=>this.gameState.userTeam.push(p(e)))),e.compTeam.forEach((e=>this.gameState.compTeam.push(p(e)))),this.gameState.allPlayer=this.gameState.getAllPositions(this.gameState.userTeam,this.gameState.compTeam),this.updatePicture(),this.reactOnClick(t,t.position,["bowman","swordsman","magician"]),this.gameState.points?a.showPoints(`Your points ${this.gameState.points}`,"128076"):a.showPoints("There's no points. \n It's the first round","128083")}}catch(e){console.error(e),a.showError("There`s no game in memory","128075"),this.newGame()}}async onCellClick(e){if(!this.gameState.block){this.gameState.activeChar&&(this.gameState.indexSelect.green===e&&(this.gameState.activeChar.position=e,this.gameState.countClick+=1,this.gamePlay.redrawPositions(this.gameState.allPlayer)),this.gameState.indexSelect.red===e)&&(this.gameState.isMove="user",await this.doDamage(e)&&(this.gameState.countClick+=1,this.gamePlay.redrawPositions(this.gameState.allPlayer),0===this.gameState.compTeam.length&&(this.gameState.levelGame+=1,this.gameState.points+=this.gameState.calculateSumPoints(),this.reset(),this.gameState.survivos=this.gameState.userTeam,a.showMessage(`Level up! Your total points are ${this.gameState.points}`,"9996"),this.gameState.levelUp(),this.gamePlay.redrawPositions(this.gameState.allPlayer))));const t=this.gameState.allPlayer.find((t=>t.position===e));this.reactOnClick(t,e,["bowman","swordsman","magician"]),this.gameState.countClick>=1&&(this.gameState.activeCharUser=this.gameState.activeChar,this.gameState.isMove="comp",await async function(e){const t=e.gameState.compTeam.reduce(((e,t)=>e.character.attack>t.character.attack?e:t));e.gameState.activeChar=t,e.reactOnClick(t,t.position,["daemon","undead","vampire"]);let s,i=!1;for(const t of e.gameState.userTeam)e.gameState.attackCells.includes(t.position)&&(i=!0,s=t.position);if(i)await e.doDamage(s)&&(0===e.gameState.userTeam.length&&(e.gameState.block=!0,a.showMessage("You lose!","129335")),e.gamePlay.redrawPositions(e.gameState.allPlayer));else{let a,s;do{a=Math.floor(Math.random()*e.gameState.transitionCells.length),s=e.gameState.allPlayer.find((e=>e.position===a))}while(s);t.position=e.gameState.transitionCells[a],e.gamePlay.redrawPositions(e.gameState.allPlayer)}return e.gameState.activeChar=void 0,e.reset(),!0}(this)&&(this.gameState.countClick=0,this.gameState.isMove="user",this.isDead()&&(this.gameState.activeChar=this.gameState.activeCharUser,this.reactOnClick(this.gameState.activeChar,this.gameState.activeChar.position,["bowman","swordsman","magician"]),this.gamePlay.redrawPositions(this.gameState.allPlayer))))}}onCellEnter(e){if(!this.gameState.block){const t=this.gameState.allPlayer.find((t=>t.position===e));t&&this.gamePlay.showCellTooltip(this.gameState.getInfo(t.character),e),this.gameState.activeChar&&(this.gamePlay.setCursor(C),!this.gameState.transitionCells.find((t=>t===e))||this.gameState.userTeam.find((t=>t.position===e))||this.gameState.compTeam.find((t=>t.position===e))||(this.gameState.indexSelect.green=e,this.gamePlay.selectCell(e,"green")),this.gameState.attackCells.find((t=>t===e))&&this.gameState.compTeam.find((t=>t.position===e))&&(this.gameState.indexSelect.red=e,this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(y)))}}onCellLeave(e){this.gamePlay.hideCellTooltip(e),this.gameState.block||document.querySelector(".selected-green")&&(this.gamePlay.deselectCell(this.gameState.indexSelect.green),!this.gameState.attackCells.find((t=>t===e))&&this.gameState.compTeam.find((t=>t.position===e))&&(this.gamePlay.deselectCell(this.gameState.indexSelect.green),this.gamePlay.setCursor(w)),document.querySelector(".selected-red")&&this.gamePlay.deselectCell(this.gameState.indexSelect.red))}reactOnClick(e,t,s){if(e)if(e.character.type===s[0]||e.character.type===s[1]||e.character.type===s[2]){let a,s;switch(document.querySelector(".selected-yellow")?(this.gamePlay.deselectCell(this.gameState.indexSelect.yellow),this.gameState.indexSelect.yellow=t):this.gameState.indexSelect={yellow:t},this.gamePlay.selectCell(t),this.gamePlay.boardEl.classList.add("mountain"),this.gameState.activeChar=e,e.character.type){case"vampire":case"bowman":a=2,s=2;break;case"undead":case"swordsman":a=4,s=1;break;case"daemon":case"magician":a=1,s=4;break;default:a=1,s=1}this.gameState.transitionCells=b(t,this.gamePlay.boardSize,a),this.gameState.attackCells=b(t,this.gamePlay.boardSize,s,!0)}else this.gameState.indexSelect&&!this.gameState.attackCells.find((e=>e===t))&&this.gameState.compTeam.find((e=>e.position===t))?a.showError("It can't be done","9940"):this.gameState.activeChar||a.showError("This isn`t your character","9995")}async doDamage(e){const t=this.gameState.activeChar.character.attack,a=this.gameState.allPlayer.find((t=>t.position===e)),s=Math.round(Math.max(t-a.character.defence,.3*t));if(await this.gamePlay.showDamage(e,s))return a.character.health=a.character.health-s,this.checkHealthRemoveDead(a),!0}checkHealthRemoveDead(e){if(e.character.health<=0){if("comp"===this.gameState.isMove){const t=this.gameState.userTeam.findIndex((t=>e.position===t.position));this.gameState.userTeam.splice(t,1)}if("user"===this.gameState.isMove){const t=this.gameState.compTeam.findIndex((t=>e.position===t.position));this.gameState.compTeam.splice(t,1)}this.gameState.allPlayer=this.gameState.getAllPositions(this.gameState.userTeam,this.gameState.compTeam)}}reset(){this.gameState.indexSelect&&(this.gameState.indexSelect.yellow&&this.gamePlay.deselectCell(this.gameState.indexSelect.yellow),this.gameState.indexSelect.red&&this.gamePlay.deselectCell(this.gameState.indexSelect.red),this.gameState.indexSelect.green&&this.gamePlay.deselectCell(this.gameState.indexSelect.green)),this.gamePlay.setCursor(f)}isDead(){return this.gameState.allPlayer.find((e=>e.position===this.gameState.activeCharUser.position))}updatePicture(){this.gamePlay.drawUi(Object.values(s)[this.gameState.levelGame-1]),this.gamePlay.redrawPositions(this.gameState.allPlayer)}}(P,k);L.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBd0JPLFNBQVNBLEVBQWFDLEVBQU9DLEdBRWxDLEdBQUlELEVBQVNDLEVBQVksR0FBTUQsRUFBUSxFQUNyQyxNQUFPLE1BRVQsR0FBSUEsRUFBU0MsR0FBYSxFQUFJLEdBQU1ELEVBQVNDLEdBQWEsRUFBSUEsRUFDNUQsTUFBTyxTQUVULElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRCxFQUFZLEVBQUdDLEdBQUssRUFBRyxDQUN6QyxHQUFJRixJQUFVQyxFQUFZQyxFQUN4QixNQUFPLE9BRVQsR0FBSUYsSUFBV0MsRUFBWUMsR0FBS0QsRUFBWSxHQUMxQyxNQUFPLE9BRVgsQ0FFQSxPQUFRRCxHQUNOLEtBQUssRUFDSCxNQUFPLFdBQ1QsS0FBTUMsRUFBWSxFQUNoQixNQUFPLFlBQ1QsS0FBTUEsR0FBYUEsRUFBWSxHQUM3QixNQUFPLGNBQ1QsS0FBTUEsR0FBYSxFQUFJLEVBQ3JCLE1BQU8sZUFDVCxRQUNFLE1BQU8sU0FFYixDQ21DZSxTQUFTRSxFQUFVQyxFQUFTQyxHQUN6QyxNQUFNQyxFQXpGUixTQUFtQkMsR0FDakIsSUFBSUMsRUFDQUMsRUFDQUMsRUFDQUMsR0FBUyxFQUNUQyxHQUFZLEVBQ2hCLE1BQU1DLEVBQWlCLElBd0NyQixTQUFTQyxJQUNMSCxHQUFTLEVBQ1RILEVBQVVPLFVBQVVDLE9BQU8sZUFDM0JSLEVBQVVPLFVBQVVFLElBQUksaUJBQ3hCQyxZQUFXLFdBQ1BWLEVBQVVPLFVBQVVDLE9BQU8saUJBQzNCTCxHQUFTLENBQ2IsR0FBR0UsR0FDSE0sU0FBU0MsY0FBY1YsRUFDM0IsQ0FFQSxTQUFTVyxFQUFrQkMsR0FDVSxjQUE3QkEsRUFBRUMsT0FBT0MsUUFBUUMsU0FDakJYLEdBRVIsQ0FTQSxPQVBBTixFQXZERixTQUFxQmtCLEdBQ25CbEIsRUFBWVcsU0FBU1EsY0FBYyxPQUUzQixJQUlJQyxFQUNBQyxFQUFrQixHQUsxQixHQUhBckIsRUFBVU8sVUFBVUUsSUFBSSxhQUN4QlcsRUFSd0IsK1ZBUUVFLFFBQVEsWUFBYUosRUFBT0ssT0FBUyxjQUMvREgsRUFBWUEsRUFBVUUsUUFBUSxjQUFlSixFQUFPTSxTQUFXLElBQzNETixFQUFPTyxjQUFlLENBQ3RCLElBQUssSUFBSS9CLEVBQUksRUFBR2dDLEVBQVNSLEVBQU9PLGNBQWNDLE9BQVFoQyxFQUFJZ0MsRUFBUWhDLElBQUssQ0FFbkUsSUFBSWlDLEVBVmtCLDBHQVVzQkwsUUFBUSxtQkFBb0JKLEVBQU9PLGNBQWMvQixHQUFHa0MsT0FFaEdELEVBQW9CQSxFQUFrQkwsUUFBUSxxQkFBc0JKLEVBQU9PLGNBQWMvQixHQUFHbUMsU0FFNUZGLEVBQW9CQSxFQUFrQkwsUUFBUSxrQkFBbUJKLEVBQU9PLGNBQWMvQixHQUFHb0MsTUFDekZULEdBQW1CTSxDQUN2QixDQUNBTixFQW5CMEIsK0NBbUJZQyxRQUFRLGNBQWVELEVBQ2pFLENBSUEsT0FIQUQsRUFBWUEsRUFBVUUsUUFBUSxhQUFjRCxHQUM1Q3JCLEVBQVUrQixVQUFZWCxFQUN0QlQsU0FBU3FCLEtBQUtDLFlBQVlqQyxHQUNuQkEsQ0FDWCxDQTBCWWtDLENBQVluQyxHQUFXLENBQUMsR0FHcENDLEVBQVVtQyxpQkFBaUIsUUFBU3RCLEdBQ3BDWixFQUFpQixJQUFJbUMsWUFBWSxpQkFBa0IsQ0FBRUMsT0FBUXJDLElBQzdERSxFQUFpQixJQUFJa0MsWUFBWSxpQkFBa0IsQ0FBRUMsT0FBUXJDLElBRXRELENBQ0hzQyxLQWhDSixXQUNTbEMsR0FBY0QsSUFDZkgsRUFBVU8sVUFBVUUsSUFBSSxlQUN4QkUsU0FBU0MsY0FBY1gsR0FFL0IsRUE0QklzQyxLQUFNakMsRUFDTmtDLFFBQVMsV0FDTHhDLEVBQVV5QyxjQUFjQyxZQUFZMUMsR0FDcENBLEVBQVUyQyxvQkFBb0IsUUFBUzlCLEdBQ3ZDVCxHQUFZLENBQ2hCLEVBQ0F3QyxXQUFZLFNBQVVDLEdBQ2xCN0MsRUFBVThDLGNBQWMsOEJBQThCZixVQUFZYyxDQUN0RSxFQUNBRSxTQUFVLFNBQVVqQixHQUNoQjlCLEVBQVU4QyxjQUFjLDRCQUE0QmYsVUFBWUQsQ0FDcEUsRUFHUixDQUdnQmtCLENBQVUsQ0FDdEJ6QixNQUFPM0IsRUFDUDRCLFFBQVMsS0FBTzNCLEVBQ2hCNEIsY0FBZSxDQUNiLENBQUVHLE1BQU8sa0JBQW1CRSxLQUFNLFFBQVNELFFBQVMseUJBR3hEbEIsU0FBU3dCLGlCQUFpQixTQUFXckIsSUFDRix1QkFBN0JBLEVBQUVDLE9BQU9DLFFBQVFhLFNBQW1DL0IsRUFBTXlDLE1BQU0sSUFFdEV6QyxFQUFNd0MsTUFDUixDQ2pHZSxNQUFNVyxFQUNuQkMsY0FDRUMsS0FBSzFELFVBQVksRUFDakIwRCxLQUFLQyxVQUFZLEtBQ2pCRCxLQUFLRSxRQUFVLEtBQ2ZGLEtBQUtHLE1BQVEsR0FDYkgsS0FBS0ksbUJBQXFCLEdBQzFCSixLQUFLSyxtQkFBcUIsR0FDMUJMLEtBQUtNLG1CQUFxQixHQUMxQk4sS0FBS08saUJBQW1CLEdBQ3hCUCxLQUFLUSxrQkFBb0IsR0FDekJSLEtBQUtTLGtCQUFvQixFQUMzQixDQUVBQyxVQUFVVCxHQUNSLEtBQU1BLGFBQXFCVSxhQUN6QixNQUFNLElBQUlDLE1BQU0sZ0NBRWxCWixLQUFLQyxVQUFZQSxDQUNuQixDQU9BWSxPQUFPQyxHQUNMZCxLQUFLZSxlQUVMZixLQUFLQyxVQUFVckIsVUFBYSwrV0FXNUJvQixLQUFLZ0IsVUFBWWhCLEtBQUtDLFVBQVVOLGNBQWMsNEJBQzlDSyxLQUFLaUIsV0FBYWpCLEtBQUtDLFVBQVVOLGNBQWMseUJBQy9DSyxLQUFLa0IsV0FBYWxCLEtBQUtDLFVBQVVOLGNBQWMseUJBRS9DSyxLQUFLZ0IsVUFBVWhDLGlCQUFpQixTQUFVbUMsR0FBVW5CLEtBQUtvQixlQUFlRCxLQUN4RW5CLEtBQUtpQixXQUFXakMsaUJBQWlCLFNBQVVtQyxHQUFVbkIsS0FBS3FCLGdCQUFnQkYsS0FDMUVuQixLQUFLa0IsV0FBV2xDLGlCQUFpQixTQUFVbUMsR0FBVW5CLEtBQUtzQixnQkFBZ0JILEtBRTFFbkIsS0FBS0UsUUFBVUYsS0FBS0MsVUFBVU4sY0FBYyxtQkFFNUNLLEtBQUtFLFFBQVE5QyxVQUFVRSxJQUFJd0QsR0FDM0IsSUFBSyxJQUFJdkUsRUFBSSxFQUFHQSxFQUFJeUQsS0FBSzFELFdBQWEsRUFBR0MsR0FBSyxFQUFHLENBQy9DLE1BQU1nRixFQUFTL0QsU0FBU1EsY0FBYyxPQUN0Q3VELEVBQU9uRSxVQUFVRSxJQUFJLE9BQVEsV0FBYSxZQUFXbEIsRUFBYUcsRUFBR3lELEtBQUsxRCxjQUMxRWlGLEVBQU92QyxpQkFBaUIsY0FBZW1DLEdBQVVuQixLQUFLd0IsWUFBWUwsS0FDbEVJLEVBQU92QyxpQkFBaUIsY0FBZW1DLEdBQVVuQixLQUFLeUIsWUFBWU4sS0FDbEVJLEVBQU92QyxpQkFBaUIsU0FBVW1DLEdBQVVuQixLQUFLMEIsWUFBWVAsS0FDN0RuQixLQUFLRSxRQUFRcEIsWUFBWXlDLEVBQzNCLENBRUF2QixLQUFLRyxNQUFRd0IsTUFBTUMsS0FBSzVCLEtBQUtFLFFBQVEyQixTQUN2QyxDQU9BQyxnQkFBZ0JDLEdBQ2QsSUFBSyxNQUFNQyxLQUFRaEMsS0FBS0csTUFDdEI2QixFQUFLcEQsVUFBWSxHQUduQixJQUFLLE1BQU1xRCxLQUFZRixFQUFXLENBQ2hDLE1BQU1SLEVBQVN2QixLQUFLRSxRQUFRMkIsU0FBU0ksRUFBU0EsVUFDeENDLEVBQVMxRSxTQUFTUSxjQUFjLE9BQ3RDa0UsRUFBTzlFLFVBQVVFLElBQUksWUFBYTJFLEVBQVNFLFVBQVVDLE1BRXJELE1BQU1DLEVBQVc3RSxTQUFTUSxjQUFjLE9BQ3hDcUUsRUFBU2pGLFVBQVVFLElBQUksZ0JBRXZCLE1BQU1nRixFQUFvQjlFLFNBQVNRLGNBQWMsT0FDakRzRSxFQUFrQmxGLFVBQVVFLElBQUkseUJBQTJCLDRCRjlCakNpRixFRThCMEVOLEVBQVNFLFVBQVVJLFFGN0I5RyxHQUNKLFdBR0xBLEVBQVMsR0FDSixTQUdGLFNFc0JIRCxFQUFrQkUsTUFBTUMsTUFBUyxHQUFFUixFQUFTRSxVQUFVSSxVQUN0REYsRUFBU3ZELFlBQVl3RCxHQUVyQkosRUFBT3BELFlBQVl1RCxHQUNuQmQsRUFBT3pDLFlBQVlvRCxFQUNyQixDRnBDRyxJQUF5QkssQ0VxQzlCLENBT0FHLHFCQUFxQkMsR0FDbkIzQyxLQUFLSyxtQkFBbUJ1QyxLQUFLRCxFQUMvQixDQU9BRSxxQkFBcUJGLEdBQ25CM0MsS0FBS00sbUJBQW1Cc0MsS0FBS0QsRUFDL0IsQ0FPQUcscUJBQXFCSCxHQUNuQjNDLEtBQUtJLG1CQUFtQndDLEtBQUtELEVBQy9CLENBT0FJLG1CQUFtQkosR0FDakIzQyxLQUFLTyxpQkFBaUJxQyxLQUFLRCxFQUM3QixDQU9BSyxvQkFBb0JMLEdBQ2xCM0MsS0FBS1Esa0JBQWtCb0MsS0FBS0QsRUFDOUIsQ0FPQU0sb0JBQW9CTixHQUNsQjNDLEtBQUtTLGtCQUFrQm1DLEtBQUtELEVBQzlCLENBRUFuQixZQUFZTCxHQUNWQSxFQUFNK0IsaUJBQ04sTUFBTTdHLEVBQVEyRCxLQUFLRyxNQUFNZ0QsUUFBUWhDLEVBQU1pQyxlQUN2Q3BELEtBQUtLLG1CQUFtQmdELFNBQVNDLEdBQU1BLEVBQUVDLEtBQUssS0FBTWxILElBQ3RELENBRUFvRixZQUFZTixHQUNWQSxFQUFNK0IsaUJBQ04sTUFBTTdHLEVBQVEyRCxLQUFLRyxNQUFNZ0QsUUFBUWhDLEVBQU1pQyxlQUN2Q3BELEtBQUtNLG1CQUFtQitDLFNBQVNDLEdBQU1BLEVBQUVDLEtBQUssS0FBTWxILElBQ3RELENBRUFxRixZQUFZUCxHQUNWLE1BQU05RSxFQUFRMkQsS0FBS0csTUFBTWdELFFBQVFoQyxFQUFNaUMsZUFDdkNwRCxLQUFLSSxtQkFBbUJpRCxTQUFTQyxHQUFNQSxFQUFFQyxLQUFLLEtBQU1sSCxJQUN0RCxDQUVBK0UsZUFBZUQsR0FDYkEsRUFBTStCLGlCQUNObEQsS0FBS08saUJBQWlCOEMsU0FBU0MsR0FBTUEsRUFBRUMsS0FBSyxPQUM5QyxDQUVBbEMsZ0JBQWdCRixHQUNkQSxFQUFNK0IsaUJBQ05sRCxLQUFLUSxrQkFBa0I2QyxTQUFTQyxHQUFNQSxFQUFFQyxLQUFLLE9BQy9DLENBRUFqQyxnQkFBZ0JILEdBQ2RBLEVBQU0rQixpQkFDTmxELEtBQUtTLGtCQUFrQjRDLFNBQVNDLEdBQU1BLEVBQUVDLEtBQUssT0FDL0MsQ0FFQUMsaUJBQWlCL0csRUFBU0MsR0FDeEJGLEVBQVVDLEVBQVNDLEVBQ3JCLENBRUE4RyxtQkFBbUIvRyxFQUFTQyxHQUMxQkYsRUFBVUMsRUFBU0MsRUFDckIsQ0FFQThHLGtCQUFrQi9HLEVBQVNDLEdBQ3pCRixFQUFVQyxFQUFTQyxFQUNyQixDQUVBK0csV0FBV3BILEdBQXlCLElBQWxCcUgsRUFBS0MsVUFBQXBGLE9BQUEsUUFBQXFGLElBQUFELFVBQUEsR0FBQUEsVUFBQSxHQUFHLFNBQ3hCM0QsS0FBSzZELGFBQWF4SCxHQUNsQjJELEtBQUtHLE1BQU05RCxHQUFPZSxVQUFVRSxJQUFJLFdBQWEsWUFBV29HLElBQzFELENBRUFHLGFBQWF4SCxHQUNYLE1BQU0yRixFQUFPaEMsS0FBS0csTUFBTTlELEdBQ3hCMkYsRUFBSzVFLFVBQVVDLFVBQVVzRSxNQUFNQyxLQUFLSSxFQUFLNUUsV0FDdEMwRyxRQUFRUixHQUFNQSxFQUFFUyxXQUFXLGNBQ2hDLENBRUFDLGdCQUFnQnZILEVBQVNKLEdBQ3ZCMkQsS0FBS0csTUFBTTlELEdBQU8rQixNQUFRM0IsQ0FDNUIsQ0FFQXdILGdCQUFnQjVILEdBQ2QyRCxLQUFLRyxNQUFNOUQsR0FBTytCLE1BQVEsRUFDNUIsQ0FFQThGLFdBQVc3SCxFQUFPOEgsR0FDaEIsT0FBTyxJQUFJQyxTQUFTQyxJQUNsQixNQUFNckMsRUFBT2hDLEtBQUtHLE1BQU05RCxHQUNsQmlJLEVBQVc5RyxTQUFTUSxjQUFjLFFBQ3hDc0csRUFBU0MsWUFBY0osRUFDdkJHLEVBQVNsSCxVQUFVRSxJQUFJLFVBQ3ZCMEUsRUFBS2xELFlBQVl3RixHQUVqQkEsRUFBU3RGLGlCQUFpQixnQkFBZ0IsS0FDeENnRCxFQUFLekMsWUFBWStFLEdBQ2pCRCxFQUFRLE9BQU8sR0FDZixHQUVOLENBRUFHLFVBQVVDLEdBQ1J6RSxLQUFLRSxRQUFRc0MsTUFBTWlDLE9BQVNBLENBQzlCLENBRUExRCxlQUNFLEdBQXVCLE9BQW5CZixLQUFLQyxVQUNQLE1BQU0sSUFBSVcsTUFBTSwyQkFFcEIsRUMxT0YsTUFPQSxFQVBlLENBQ2I4RCxRQUFTLFVBQ1RDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLFlDVUcsTUFBTUMsRUFDbkIvRSxZQUFZZ0YsR0FBeUIsSUFBbEIzQyxFQUFJdUIsVUFBQXBGLE9BQUEsUUFBQXFGLElBQUFELFVBQUEsR0FBQUEsVUFBQSxHQUFHLFVBQ3hCLEdBQXdCLHlCQUFUcUIsS0FDYixNQUFNLElBQUlwRSxNQUFNLGlCQUVsQlosS0FBS29DLEtBQU9BLEVBQ1pwQyxLQUFLK0UsTUFBUUEsRUFDYi9FLEtBQUtpRixPQUFTLEVBQ2RqRixLQUFLa0YsUUFBVSxFQUNmbEYsS0FBS3VDLE9BQVMsRUFFaEIsRUN2QmEsTUFBTTRDLFVBQWVMLEVBQ2xDL0UsY0FDRXFGLE1BRGV6QixVQUFBcEYsT0FBQSxRQUFBcUYsSUFBQUQsVUFBQSxHQUFBQSxVQUFBLEdBQUcsRUFDTCxVQUNiM0QsS0FBS2lGLE9BQVMsR0FDZGpGLEtBQUtrRixRQUFVLEVBQ2pCLEVDTGEsTUFBTUcsVUFBa0JQLEVBQ3JDL0UsY0FDRXFGLE1BRGV6QixVQUFBcEYsT0FBQSxRQUFBcUYsSUFBQUQsVUFBQSxHQUFBQSxVQUFBLEdBQUcsRUFDTCxhQUNiM0QsS0FBS2lGLE9BQVMsR0FDZGpGLEtBQUtrRixRQUFVLEVBQ2pCLEVDTGEsTUFBTUksVUFBaUJSLEVBQ3BDL0UsY0FDRXFGLE1BRGV6QixVQUFBcEYsT0FBQSxRQUFBcUYsSUFBQUQsVUFBQSxHQUFBQSxVQUFBLEdBQUcsRUFDTCxZQUNiM0QsS0FBS2lGLE9BQVMsR0FDZGpGLEtBQUtrRixRQUFVLEVBQ2pCLEVDTGEsTUFBTUssVUFBZ0JULEVBQ25DL0UsY0FDRXFGLE1BRGV6QixVQUFBcEYsT0FBQSxRQUFBcUYsSUFBQUQsVUFBQSxHQUFBQSxVQUFBLEdBQUcsRUFDTCxXQUNiM0QsS0FBS2lGLE9BQVMsR0FDZGpGLEtBQUtrRixRQUFVLEVBQ2pCLEVDTGEsTUFBTU0sVUFBZVYsRUFDbEMvRSxjQUNFcUYsTUFEZXpCLFVBQUFwRixPQUFBLFFBQUFxRixJQUFBRCxVQUFBLEdBQUFBLFVBQUEsR0FBRyxFQUNMLFVBQ2IzRCxLQUFLaUYsT0FBUyxHQUNkakYsS0FBS2tGLFFBQVUsRUFDakIsRUNMYSxNQUFNTyxVQUFlWCxFQUNsQy9FLGNBQ0VxRixNQURlekIsVUFBQXBGLE9BQUEsUUFBQXFGLElBQUFELFVBQUEsR0FBQUEsVUFBQSxHQUFHLEVBQ0wsVUFDYjNELEtBQUtpRixPQUFTLEdBQ2RqRixLQUFLa0YsUUFBVSxFQUNqQixFQ01hLE1BQU1RLEVBRW5CM0YsWUFBWTRGLEdBQ1YzRixLQUFLMkYsV0FBYUEsQ0FDcEIsRUNmYSxNQUFNQyxFQUNuQjdGLFlBQVlvQyxFQUFXRixHQUNyQixLQUFNRSxhQUFxQjJDLEdBQ3pCLE1BQU0sSUFBSWxFLE1BQU0sMkRBR2xCLEdBQXdCLGlCQUFicUIsRUFDVCxNQUFNLElBQUlyQixNQUFNLDZCQUdsQlosS0FBS21DLFVBQVlBLEVBQ2pCbkMsS0FBS2lDLFNBQVdBLENBQ2xCLEVDTEssU0FBUzRELEVBQW9CdkosR0FDbEMsTUFBTTZELEVBQVEsR0FDZCxHQUZxRHdELFVBQUFwRixPQUFBLFFBQUFxRixJQUFBRCxVQUFBLElBQUFBLFVBQUEsR0FRbkQsSUFBSyxJQUFJcEgsRUFBSUQsRUFBWSxFQUFHQyxFQUFJRCxHQUFhLEVBQUdDLEdBQUtELEVBQ25ENkQsRUFBTXlDLEtBQUtyRyxHQUNYNEQsRUFBTXlDLEtBQUtyRyxFQUFJLFFBUGpCLElBQUssSUFBSUEsRUFBSSxFQUFHQSxFQUFJRCxHQUFhLEVBQUdDLEdBQUssRUFDdkM0RCxFQUFNeUMsS0FBS3JHLEdBQ1g0RCxFQUFNeUMsS0FBS3JHLEVBQUksR0FRbkIsT0FBTzRELENBQ1QsQ0FFQSxTQUFTMkYsRUFBbUJ4SixHQUMxQixNQUFNNkQsRUFBUTBGLEVBQW9CdkosRUFEV3FILFVBQUFwRixPQUFBLFFBQUFxRixJQUFBRCxVQUFBLElBQUFBLFVBQUEsSUFHN0MsT0FBT3hELEVBRE00RixLQUFLQyxNQUFNRCxLQUFLRSxTQUFXOUYsRUFBTTVCLFFBRWhELENBR2UsU0FBUzJILEVBQW9CQyxFQUFhN0osRUFBVzhKLEVBQVFDLEdBQXlCLElBQXRCQyxFQUFVQyxHQUFVRixFQUNqRyxNQUFNdEUsRUFBWSxHQUNkdUUsR0FBWSxJQUFHQSxFQUFXLEdBQzFCQyxHQUFhLEtBQUlBLEVBQVksSUFDakMsTUFBTUMsRUNQRCxTQUFzQkMsRUFBY0gsRUFBVUksR0FFbkQsTUFBTWYsRUFBYSxHQUNiZ0IsRUFwQkQsVUFBNkJGLEVBQWNILEdBRWhELE9BQWEsQ0FDWCxNQUFNTSxFQUFjYixLQUFLQyxNQUFNRCxLQUFLRSxTQUFXSyxFQUFXLEdBQ3BETyxFQUFjSixFQUFhVixLQUFLQyxNQUFNRCxLQUFLRSxTQUFXUSxFQUFhbEksZUFDbkUsSUFBSXNJLEVBQVlELEVBQ3hCLENBQ0YsQ0FhMEJFLENBQW1CTCxFQUFjSCxHQUN6RCxJQUFLLElBQUkvSixFQUFJLEVBQUdBLEVBQUltSyxFQUFnQm5LLEdBQUssRUFDdkNvSixFQUFXL0MsS0FBSytELEVBQWdCSSxPQUFPQyxPQUV6QyxPQUFPLElBQUl0QixFQUFLQyxFQUNsQixDRERlc0IsQ0FBYWQsRUFBYUcsRUFBVUMsR0FFM0NXLEVBQWdCLEdBZXRCLE9BZEFWLEVBQUtiLFdBQVd0QyxTQUFTOEQsSUFDdkIsSUFBSUMsRUFDQUMsR0FBbUIsRUFDdkIsR0FDRUQsRUFBZXRCLEVBQW1CeEosRUFBVzhKLEdBQ3pDYyxFQUFjSSxNQUFNQyxHQUFPQSxJQUFPSCxJQUNwQ0EsRUFBZXRCLEVBQW1CeEosRUFBVzhKLElBRTdDYyxFQUFjdEUsS0FBS3dFLEdBQ25CQyxHQUFtQixVQUViQSxHQUNWdEYsRUFBVWEsS0FBSyxJQUFJZ0QsRUFBb0J1QixFQUFNQyxHQUFjLElBRXREckYsQ0FDVCxDQUVPLFNBQVN5RixFQUFZQyxHQUMxQixJQUFJQyxFQUNKLE9BQVFELEVBQUl0RixVQUFVQyxNQUNwQixJQUFLLFNBQ0hzRixFQUFZdkMsRUFDWixNQUNGLElBQUssWUFDSHVDLEVBQVlyQyxFQUNaLE1BQ0YsSUFBSyxXQUNIcUMsRUFBWXBDLEVBQ1osTUFDRixJQUFLLFNBQ0hvQyxFQUFZbEMsRUFDWixNQUNGLElBQUssU0FDSGtDLEVBQVlqQyxFQUNaLE1BQ0YsSUFBSyxVQUNIaUMsRUFBWW5DLEVBSWhCLE1BQU00QixFQUFPLElBQUlPLEVBQVVELEVBQUl0RixVQUFVNEMsT0FDbkM0QyxFQUF3QixJQUFJL0IsRUFBb0J1QixFQUFNTSxFQUFJeEYsVUFLaEUsT0FKQTBGLEVBQXNCeEYsVUFBVThDLE9BQVN3QyxFQUFJdEYsVUFBVThDLE9BQ3ZEMEMsRUFBc0J4RixVQUFVSSxPQUFTa0YsRUFBSXRGLFVBQVVJLE9BQ3ZEb0YsRUFBc0J4RixVQUFVK0MsUUFBVXVDLEVBQUl0RixVQUFVK0MsUUFFakR5QyxDQUNULENFN0VlLE1BQU1DLEVBQ25CN0gsWUFBWThILEdBQ1Y3SCxLQUFLOEgsVUFBWSxFQUNqQjlILEtBQUs2SCxTQUFXQSxFQUNoQjdILEtBQUsrSCxTQUFXLEdBQ2hCL0gsS0FBS2dJLFNBQVcsR0FDaEJoSSxLQUFLaUksVUFBWSxHQUNqQmpJLEtBQUtrSSxPQUFTLE9BQ2RsSSxLQUFLbUksV0FBYSxFQUNsQm5JLEtBQUtvSSxTQUFXLEdBQ2hCcEksS0FBS3FJLFFBQVUsR0FDZnJJLEtBQUtzSSxPQUFTLEVBQ2R0SSxLQUFLdUksT0FBUSxFQUVidkksS0FBS3dJLGNBQ1AsQ0FFQUMsWUFBV3BDLEdBQXdCLElBQXRCQyxFQUFVQyxHQUFVRixFQUMvQixNQUVNMEIsRUFBVzdCLEVBRkMsQ0FBQ2YsRUFBUUUsRUFBV0MsR0FFVXRGLEtBQUs2SCxTQUFTdkwsV0FBVyxFQUFPLENBQUNnSyxFQUFVQyxJQUUzRixPQURBdkcsS0FBSytILFNBQVdBLEVBQ1RBLENBQ1QsQ0FFQVcsWUFBV0MsR0FBd0IsSUFBdEJyQyxFQUFVQyxHQUFVb0MsRUFDL0IsTUFFTVgsRUFBVzlCLEVBRkMsQ0FBQ1gsRUFBU0MsRUFBUUMsR0FFWXpGLEtBQUs2SCxTQUFTdkwsV0FBVyxFQUFNLENBQUNnSyxFQUFVQyxJQUUxRixPQURBdkcsS0FBS2dJLFNBQVdBLEVBQ1RBLENBQ1QsQ0FFQVksZ0JBQWdCQyxFQUFRQyxHQUN0QixPQUFLRCxHQUE0QixJQUFsQkEsRUFBT3RLLE9BQ2pCdUssR0FBNEIsSUFBbEJBLEVBQU92SyxPQUNmc0ssRUFBT0UsT0FBT0QsR0FEc0JELEVBREFDLENBRzdDLENBRUFOLGVBQ0V4SSxLQUFLK0gsU0FBVy9ILEtBQUt5SSxZQUFZLENBQUN6SSxLQUFLOEgsVUFBVzlILEtBQUs4SCxZQUN2RDlILEtBQUtnSSxTQUFXaEksS0FBSzBJLFlBQVksQ0FBQzFJLEtBQUs4SCxVQUFXOUgsS0FBSzhILFlBQ3ZEOUgsS0FBS2lJLFVBQVlqSSxLQUFLNEksZ0JBQWdCNUksS0FBSytILFNBQVUvSCxLQUFLZ0ksU0FDNUQsQ0FFQWdCLFFBQVFDLEdBQ04sTUFBUSxLQUFXQSxFQUFPbEUsVUFBZWtFLEVBQU9oRSxZQUFtQmdFLEVBQU8vRCxZQUFpQitELEVBQU8xRyxRQUNwRyxDQUVBMkcsVUFDRSxJQUFLLE1BQU1ELEtBQVVqSixLQUFLaUksVUFBVyxDQUNuQyxNQUFNZCxFQUFPOEIsRUFBTzlHLFVBQ3BCZ0YsRUFBS2xDLE9BQVNqRixLQUFLbUosZ0JBQWdCaEMsRUFBS2xDLE9BQVFrQyxFQUFLNUUsUUFDckQ0RSxFQUFLakMsUUFBVWxGLEtBQUttSixnQkFBZ0JoQyxFQUFLakMsUUFBU2lDLEVBQUs1RSxRQUN2RDRFLEVBQUtwQyxNQUFTb0MsRUFBS3BDLE1BQVEsR0FBTSxFQUFJb0MsRUFBS3BDLE1BQVEsRUFBSW9DLEVBQUtwQyxNQUFRLEVBQ25Fb0MsRUFBSzVFLE9BQVU0RSxFQUFLNUUsT0FBUyxHQUFNLElBQU00RSxFQUFLNUUsT0FBUyxHQUFLLEdBQzlELENBRUF2QyxLQUFLNkgsU0FBU2hILE9BQU91SSxPQUFPQyxPQUFPQyxHQUFRdEosS0FBSzhILFVBQVksSUFDNUQsTUFBTXlCLEVBQWN2SixLQUFLeUksWUFBWSxDQUFDekksS0FBSzhILFVBQVksRUFBRzlILEtBQUs4SCxZQUN6RDBCLEVBQW9CM0QsRUFBb0I3RixLQUFLNkgsU0FBU3ZMLFdBQzVEaU4sRUFBWWxHLFNBQVNvRyxHQUFTRCxFQUFrQkUsT0FBT0YsRUFBa0JyRyxRQUFRc0csRUFBS3hILFVBQVcsS0FDakdqQyxLQUFLb0ksU0FBUy9FLFNBQVNvRyxJQUNyQixJQUFLRCxFQUFrQkcsU0FBU0YsRUFBS3hILFVBQVcsQ0FDOUMsTUFBTTJILEVBQU83RCxLQUFLQyxNQUFNRCxLQUFLRSxTQUFXdUQsRUFBa0JqTCxRQUMxRGtMLEVBQUt4SCxTQUFXdUgsRUFBa0JJLEVBQ3BDLEtBR0Y1SixLQUFLK0gsU0FBVy9ILEtBQUtvSSxTQUFTVyxPQUFPUSxHQUNyQ3ZKLEtBQUtnSSxTQUFXaEksS0FBSzBJLFlBQVksQ0FBQzFJLEtBQUs4SCxVQUFXOUgsS0FBSzhILFVBQVk5SCxLQUFLaUksVUFBVTFKLFNBQ2xGeUIsS0FBS2lJLFVBQVlqSSxLQUFLNEksZ0JBQWdCNUksS0FBSytILFNBQVUvSCxLQUFLZ0ksVUFDMURoSSxLQUFLbUksV0FBYSxDQUNwQixDQUVBZ0IsZ0JBQWdCVSxFQUFRQyxHQUN0QixPQUFPL0QsS0FBS0MsTUFBTUQsS0FBS2dFLElBQUlGLEVBQVNBLEdBQVUsR0FBS0MsR0FBUSxLQUM3RCxDQUVBRSxxQkFDRSxPQUFPaEssS0FBSytILFNBQVNrQyxRQUFPLENBQUNDLEVBQUdDLElBQU1ELEVBQUlDLEVBQUVoSSxVQUFVSSxRQUFRLEVBQ2hFLEVDMUZGLE1BT0EsRUFOUSxPQU1SLEVBTFcsVUFLWCxFQUphLFlBSWIsRUFIYyxjQ3dFQyxTQUFTNkgsRUFBeUIvTixFQUFPQyxFQUFXK04sR0FBMEIsSUFBaEJwRixFQUFNdEIsVUFBQXBGLE9BQUEsUUFBQXFGLElBQUFELFVBQUEsSUFBQUEsVUFBQSxHQUNqRixNQUFNMkcsRUFBYSxHQUNuQixJQUFLLElBQUkvTixFQUFJLEVBQUdBLEVBQUlELEdBQWEsRUFBR0MsR0FBSyxFQUN2QytOLEVBQVcxSCxLQUFLckcsR0FHbEIsTUFBTWdPLEVBakZSLFNBQWtCcEssRUFBTzdELEdBQ3ZCLE1BQU1rTyxFQUFTLEdBQ2YsSUFBSyxJQUFJQyxFQUFJLEVBQUc5TSxFQUFJckIsRUFBV21PLEVBQUl0SyxFQUFNNUIsT0FBUWtNLEdBQUtuTyxFQUFXcUIsR0FBS3JCLEVBQ3BFa08sRUFBTzVILEtBQUt6QyxFQUFNdUssTUFBTUQsRUFBRzlNLElBRTdCLE9BQU82TSxDQUNULENBMkVxQkcsQ0FBU0wsRUFBWWhPLEdBQ3hDLE9BQUkySSxFQTFFTixTQUF3QjlFLEVBQU85RCxFQUFPZ08sR0FDcEMsTUFBTU8sRUFBZSxHQUNyQixJQUFJQyxFQUNBQyxFQUNKLElBQUssSUFBSXZPLEVBQUksRUFBR0EsRUFBSTRELEVBQU01QixTQUN4QnVNLEVBQU12TyxFQUNOc08sRUFBWTFLLEVBQU01RCxHQUFHc08sV0FBV3RELEdBQU9BLElBQU9sTCxLQUMzQixJQUFmd08sR0FINEJ0TyxHQUFLLEdBS3ZDLElBQUssSUFBSUEsR0FBSzhOLEVBQVU5TixHQUFLOE4sRUFBVTlOLEdBQUssRUFDMUMsSUFBSyxJQUFJd08sR0FBS1YsRUFBVVUsR0FBS1YsRUFBVVUsR0FBSyxFQUNyQ0QsRUFBTXZPLEdBQU0sR0FBTXNPLEVBQVlFLEdBQU0sR0FDbkNELEVBQU12TyxFQUFJNEQsRUFBTTVCLFFBQVlzTSxFQUFZRSxFQUFJNUssRUFBTTVCLFFBQ2xENEIsRUFBTTJLLEVBQU12TyxHQUFHc08sRUFBWUUsS0FBUTFPLEdBQ3ZDdU8sRUFBYWhJLEtBQUt6QyxFQUFNMkssRUFBTXZPLEdBQUdzTyxFQUFZRSxJQUluRCxPQUFPSCxDQUNULENBd0RXSSxDQUFlVCxFQUFZbE8sRUFBT2dPLEdBdEQ3QyxTQUE0QmxLLEVBQU85RCxFQUFPZ08sR0FDeEMsTUFBTVksRUFBZSxHQUNyQixJQUFJSixFQUNBQyxFQUNKLElBQUssSUFBSXZPLEVBQUksRUFBR0EsRUFBSTRELEVBQU01QixTQUN4QnVNLEVBQU12TyxFQUNOc08sRUFBWTFLLEVBQU01RCxHQUFHc08sV0FBV3RELEdBQU9BLElBQU9sTCxLQUMzQixJQUFmd08sR0FINEJ0TyxHQUFLLEdBTXZDLElBQUssSUFBSUEsRUFBSSxFQUFHQSxHQUFLOE4sRUFBVTlOLEdBQUssRUFDOUJzTyxFQUFZdE8sR0FBSyxHQUNuQjBPLEVBQWFySSxLQUFLekMsRUFBTTJLLEdBQUtELEVBQVl0TyxJQUd2Q3NPLEVBQVl0TyxFQUFJNEQsRUFBTTVCLFFBQ3hCME0sRUFBYXJJLEtBQUt6QyxFQUFNMkssR0FBS0QsRUFBWXRPLElBRXZDdU8sRUFBTXZPLEVBQUk0RCxFQUFNNUIsUUFBVXNNLEVBQVl0TyxHQUFLLEdBQzdDME8sRUFBYXJJLEtBQUt6QyxFQUFNMkssRUFBTXZPLEdBQUdzTyxFQUFZdE8sSUFHM0N1TyxFQUFNdk8sRUFBSTRELEVBQU01QixRQUFVc00sRUFBWXRPLEVBQUk0RCxFQUFNNUIsUUFDbEQwTSxFQUFhckksS0FBS3pDLEVBQU0ySyxFQUFNdk8sR0FBR3NPLEVBQVl0TyxJQUczQ3VPLEVBQU12TyxHQUFLLEdBQUtzTyxFQUFZdE8sR0FBSyxHQUNuQzBPLEVBQWFySSxLQUFLekMsRUFBTTJLLEVBQU12TyxHQUFHc08sRUFBWXRPLElBRzNDdU8sRUFBTXZPLEdBQUssR0FBS3NPLEVBQVl0TyxFQUFJNEQsRUFBTTVCLFFBQ3hDME0sRUFBYXJJLEtBQUt6QyxFQUFNMkssRUFBTXZPLEdBQUdzTyxFQUFZdE8sSUFHM0N1TyxFQUFNdk8sR0FBSyxHQUNiME8sRUFBYXJJLEtBQUt6QyxFQUFNMkssRUFBTXZPLEdBQUdzTyxJQUcvQkMsRUFBTXZPLEVBQUk0RCxFQUFNNUIsUUFDbEIwTSxFQUFhckksS0FBS3pDLEVBQU0ySyxFQUFNdk8sR0FBR3NPLElBR3JDLE9BQU9JLENBQ1QsQ0FhU0MsQ0FBbUJYLEVBQVlsTyxFQUFPZ08sRUFDL0MsQ0NoRkEsTUFBTXhDLEVBQVcsSUFBSS9ILEVBQ3JCK0gsRUFBU25ILFVBQVVsRCxTQUFTbUMsY0FBYyxvQkFFMUMsTUFBTXdMLEVBQWUsSUNWTixNQUNicEwsWUFBWXFMLEdBQ1ZwTCxLQUFLb0wsUUFBVUEsQ0FDakIsQ0FFQUMsS0FBS0MsR0FDSHRMLEtBQUtvTCxRQUFRRyxRQUFRLFFBQVNDLEtBQUtDLFVBQVVILEdBQy9DLENBRUFJLE9BQ0UsSUFDRSxPQUFPRixLQUFLRyxNQUFNM0wsS0FBS29MLFFBQVFRLFFBQVEsU0FDekMsQ0FBRSxNQUFPak8sR0FDUCxNQUFNLElBQUlpRCxNQUFNLGdCQUNsQixDQUNGLEdETHdDaUwsY0FDcENDLEVBQVcsSUVIRixNQUNiL0wsWUFBWThILEVBQVVzRCxHQUNwQm5MLEtBQUs2SCxTQUFXQSxFQUNoQjdILEtBQUttTCxhQUFlQSxFQUNwQm5MLEtBQUsrTCxVQUFZLElBQUluRSxFQUFVNUgsS0FBSzZILFVBRXBDN0gsS0FBSzBCLFlBQWMxQixLQUFLMEIsWUFBWXNLLEtBQUtoTSxNQUN6Q0EsS0FBS3dCLFlBQWN4QixLQUFLd0IsWUFBWXdLLEtBQUtoTSxNQUN6Q0EsS0FBS3lCLFlBQWN6QixLQUFLeUIsWUFBWXVLLEtBQUtoTSxNQUN6Q0EsS0FBS2lNLFFBQVVqTSxLQUFLaU0sUUFBUUQsS0FBS2hNLE1BQ2pDQSxLQUFLa00sU0FBV2xNLEtBQUtrTSxTQUFTRixLQUFLaE0sTUFDbkNBLEtBQUttTSxTQUFXbk0sS0FBS21NLFNBQVNILEtBQUtoTSxLQUNyQyxDQUVBb00sT0FHRXBNLEtBQUtxTSxTQUNMck0sS0FBS3NNLGVBQ1AsQ0FFQUQsU0FDRXJNLEtBQUs2SCxTQUFTbkYscUJBQXFCMUMsS0FBS3dCLGFBQ3hDeEIsS0FBSzZILFNBQVNoRixxQkFBcUI3QyxLQUFLeUIsYUFDeEN6QixLQUFLNkgsU0FBUy9FLHFCQUFxQjlDLEtBQUswQixhQUN4QzFCLEtBQUs2SCxTQUFTOUUsbUJBQW1CL0MsS0FBS2lNLFNBQ3RDak0sS0FBSzZILFNBQVM3RSxvQkFBb0JoRCxLQUFLa00sVUFDdkNsTSxLQUFLNkgsU0FBUzVFLG9CQUFvQmpELEtBQUttTSxTQUN6QyxDQUVBRixVQUNFak0sS0FBSytMLFVBQVUxRCxRQUFRekYsS0FBSyxDQUMxQmtGLFVBQVc5SCxLQUFLK0wsVUFBVWpFLFVBQzFCUSxPQUFRdEksS0FBSytMLFVBQVV6RCxTQUV6QnRJLEtBQUsrTCxVQUFVeEQsT0FBUSxFQUN2QnZJLEtBQUsrTCxVQUFVakUsVUFBWSxFQUMzQjlILEtBQUsrTCxVQUFVekQsT0FBUyxFQUN4QnRJLEtBQUsrTCxVQUFVNUQsV0FBYSxFQUU1Qm5JLEtBQUt1TSxRQUNMdk0sS0FBSytMLFVBQVV2RCxlQUNmeEksS0FBS3NNLGVBQ1AsQ0FFQUosV0FDRWxNLEtBQUttTCxhQUFhRSxLQUFLckwsS0FBSytMLFdBQzVCak0sRUFBUzBNLFlBQVksdUJBQXdCLE9BQy9DLENBRUFMLFdBQ0UsSUFDRSxNQUFNTSxFQUFnQnpNLEtBQUttTCxhQUFhTyxPQUV4QyxHQUFJZSxFQUFlLEVBRU8sSUFBeEJBLEVBQWNsRSxNQUFpQnZJLEtBQUsrTCxVQUFVakUsVUFBYTJFLEVBQWMzRSxVQUFZLEVBQUs5SCxLQUFLK0wsVUFBVWpFLFVBQVkyRSxFQUFjM0UsVUFDbkk5SCxLQUFLK0wsVUFBVTVELFdBQWFzRSxFQUFjdEUsV0FDMUNuSSxLQUFLK0wsVUFBVTFELFFBQVVvRSxFQUFjcEUsUUFDdkNySSxLQUFLK0wsVUFBVTdELE9BQVN1RSxFQUFjdkUsT0FDdENsSSxLQUFLK0wsVUFBVXhELE1BQVFrRSxFQUFjbEUsTUFDckN2SSxLQUFLK0wsVUFBVXpELE9BQVNtRSxFQUFjbkUsT0FDdEN0SSxLQUFLK0wsVUFBVWhFLFNBQVcsR0FDMUIvSCxLQUFLK0wsVUFBVS9ELFNBQVcsR0FDMUJoSSxLQUFLdU0sUUFFTCxNQUFNRyxFQUFpQmxGLEVBQVlpRixFQUFjRSxZQUNqREYsRUFBYzFFLFNBQVMxRSxTQUFTQyxHQUFNdEQsS0FBSytMLFVBQVVoRSxTQUFTbkYsS0FBSzRFLEVBQVlsRSxNQUMvRW1KLEVBQWN6RSxTQUFTM0UsU0FBU0MsR0FBTXRELEtBQUsrTCxVQUFVL0QsU0FBU3BGLEtBQUs0RSxFQUFZbEUsTUFFL0V0RCxLQUFLK0wsVUFBVTlELFVBQVlqSSxLQUFLK0wsVUFBVW5ELGdCQUFnQjVJLEtBQUsrTCxVQUFVaEUsU0FBVS9ILEtBQUsrTCxVQUFVL0QsVUFDbEdoSSxLQUFLc00sZ0JBQ0x0TSxLQUFLNE0sYUFBYUYsRUFBZ0JBLEVBQWV6SyxTQUFVLENBQUMsU0FBVSxZQUFhLGFBRS9FakMsS0FBSytMLFVBQVV6RCxPQUNqQnhJLEVBQVMrTSxXQUFZLGVBQWM3TSxLQUFLK0wsVUFBVXpELFNBQVUsVUFFNUR4SSxFQUFTK00sV0FBVyw2Q0FBZ0QsU0FFeEUsQ0FDRixDQUFFLE1BQU9sUCxHQUVQbVAsUUFBUUMsTUFBTXBQLEdBQ2RtQyxFQUFTa04sVUFBVSw0QkFBNkIsVUFDaERoTixLQUFLaU0sU0FDUCxDQUNGLENBRUFnQixrQkFBa0I1USxHQUVoQixJQUFLMkQsS0FBSytMLFVBQVV4RCxNQUFPLENBQ3JCdkksS0FBSytMLFVBQVVZLGFBQ2IzTSxLQUFLK0wsVUFBVW1CLFlBQVlDLFFBQVU5USxJQUN2QzJELEtBQUsrTCxVQUFVWSxXQUFXMUssU0FBVzVGLEVBQ3JDMkQsS0FBSytMLFVBQVU1RCxZQUFjLEVBQzdCbkksS0FBSzZILFNBQVMvRixnQkFBZ0I5QixLQUFLK0wsVUFBVTlELFlBRzNDakksS0FBSytMLFVBQVVtQixZQUFZRSxNQUFRL1EsS0FFckMyRCxLQUFLK0wsVUFBVTdELE9BQVMsYUFDT2xJLEtBQUtxTixTQUFTaFIsS0FFM0MyRCxLQUFLK0wsVUFBVTVELFlBQWMsRUFDN0JuSSxLQUFLNkgsU0FBUy9GLGdCQUFnQjlCLEtBQUsrTCxVQUFVOUQsV0FFTixJQUFuQ2pJLEtBQUsrTCxVQUFVL0QsU0FBU3pKLFNBQzFCeUIsS0FBSytMLFVBQVVqRSxXQUFhLEVBQzVCOUgsS0FBSytMLFVBQVV6RCxRQUFVdEksS0FBSytMLFVBQVUvQixxQkFDeENoSyxLQUFLdU0sUUFhTHZNLEtBQUsrTCxVQUFVM0QsU0FBV3BJLEtBQUsrTCxVQUFVaEUsU0FFekNqSSxFQUFTME0sWUFBYSxtQ0FBa0N4TSxLQUFLK0wsVUFBVXpELFNBQVUsUUFDakZ0SSxLQUFLK0wsVUFBVTdDLFVBQ2ZsSixLQUFLNkgsU0FBUy9GLGdCQUFnQjlCLEtBQUsrTCxVQUFVOUQsY0FNckQsTUFBTWdCLEVBQVNqSixLQUFLK0wsVUFBVTlELFVBQVVYLE1BQU1DLEdBQU9BLEVBQUd0RixXQUFhNUYsSUFDckUyRCxLQUFLNE0sYUFBYTNELEVBQVE1TSxFQUFPLENBQUMsU0FBVSxZQUFhLGFBRXJEMkQsS0FBSytMLFVBQVU1RCxZQUFjLElBQy9CbkksS0FBSytMLFVBQVV1QixlQUFpQnROLEtBQUsrTCxVQUFVWSxXQUMvQzNNLEtBQUsrTCxVQUFVN0QsT0FBUyxhQy9JakIrRSxlQUE0QnhGLEdBRXpDLE1BQU04RixFQUFhOUYsRUFBSXNFLFVBQVUvRCxTQUFTaUMsUUFBTyxDQUFDdUQsRUFBS0MsSUFBVUQsRUFBSXJMLFVBQVU4QyxPQUFTd0ksRUFBS3RMLFVBQVU4QyxPQUFTdUksRUFBTUMsSUFDdEhoRyxFQUFJc0UsVUFBVVksV0FBYVksRUFDM0I5RixFQUFJbUYsYUFBYVcsRUFBWUEsRUFBV3RMLFNBQVUsQ0FBQyxTQUFVLFNBQVUsWUFFdkUsSUFDSXlMLEVBREFDLEdBQVMsRUFFYixJQUFLLE1BQU1sRSxLQUFRaEMsRUFBSXNFLFVBQVVoRSxTQUMzQk4sRUFBSXNFLFVBQVU2QixZQUFZakUsU0FBU0YsRUFBS3hILFlBQzFDMEwsR0FBUyxFQUNURCxFQUFlakUsRUFBS3hILFVBSXhCLEdBQUkwTCxRQUM2QmxHLEVBQUk0RixTQUFTSyxLQUVKLElBQWxDakcsRUFBSXNFLFVBQVVoRSxTQUFTeEosU0FFekJrSixFQUFJc0UsVUFBVXhELE9BQVEsRUFDdEJ6SSxFQUFTME0sWUFBWSxZQUFhLFdBRXBDL0UsRUFBSUksU0FBUy9GLGdCQUFnQjJGLEVBQUlzRSxVQUFVOUQsZ0JBRXhDLENBQ0wsSUFBSTJCLEVBQ0FpRSxFQUNKLEdBQ0VqRSxFQUFPN0QsS0FBS0MsTUFBTUQsS0FBS0UsU0FBV3dCLEVBQUlzRSxVQUFVK0IsZ0JBQWdCdlAsUUFDaEVzUCxFQUFXcEcsRUFBSXNFLFVBQVU5RCxVQUFVWCxNQUFLaEUsR0FBS0EsRUFBRXJCLFdBQWEySCxVQUNyRGlFLEdBRVROLEVBQVd0TCxTQUFXd0YsRUFBSXNFLFVBQVUrQixnQkFBZ0JsRSxHQUNwRG5DLEVBQUlJLFNBQVMvRixnQkFBZ0IyRixFQUFJc0UsVUFBVTlELFVBQzdDLENBSUEsT0FIQVIsRUFBSXNFLFVBQVVZLGdCQUFhL0ksRUFDM0I2RCxFQUFJOEUsU0FFRyxDQUNULENEd0cyQ3dCLENBQWEvTixRQUU5Q0EsS0FBSytMLFVBQVU1RCxXQUFhLEVBQzVCbkksS0FBSytMLFVBQVU3RCxPQUFTLE9BRXBCbEksS0FBS2dPLFdBQ1BoTyxLQUFLK0wsVUFBVVksV0FBYTNNLEtBQUsrTCxVQUFVdUIsZUFDM0N0TixLQUFLNE0sYUFBYTVNLEtBQUsrTCxVQUFVWSxXQUFZM00sS0FBSytMLFVBQVVZLFdBQVcxSyxTQUFVLENBQUMsU0FBVSxZQUFhLGFBQ3pHakMsS0FBSzZILFNBQVMvRixnQkFBZ0I5QixLQUFLK0wsVUFBVTlELGFBSXJELENBQ0YsQ0FFQXpHLFlBQVluRixHQUlWLElBQUsyRCxLQUFLK0wsVUFBVXhELE1BQU8sQ0FDekIsTUFBTVUsRUFBU2pKLEtBQUsrTCxVQUFVOUQsVUFBVVgsTUFBTUMsR0FBT0EsRUFBR3RGLFdBQWE1RixJQUNqRTRNLEdBQ0ZqSixLQUFLNkgsU0FBUzdELGdCQUFnQmhFLEtBQUsrTCxVQUFVL0MsUUFBUUMsRUFBTzlHLFdBQVk5RixHQUl0RTJELEtBQUsrTCxVQUFVWSxhQUNqQjNNLEtBQUs2SCxTQUFTckQsVUFBVXlKLElBRXBCak8sS0FBSytMLFVBQVUrQixnQkFBZ0J4RyxNQUFNbUMsR0FBU0EsSUFBU3BOLEtBQ3JEMkQsS0FBSytMLFVBQVVoRSxTQUFTVCxNQUFNbUMsR0FBU0EsRUFBS3hILFdBQWE1RixLQUN6RDJELEtBQUsrTCxVQUFVL0QsU0FBU1YsTUFBTW1DLEdBQVNBLEVBQUt4SCxXQUFhNUYsTUFDN0QyRCxLQUFLK0wsVUFBVW1CLFlBQVlDLE1BQVE5USxFQUNuQzJELEtBQUs2SCxTQUFTcEUsV0FBV3BILEVBQU8sVUFHOUIyRCxLQUFLK0wsVUFBVTZCLFlBQVl0RyxNQUFNbUMsR0FBU0EsSUFBU3BOLEtBQ2xEMkQsS0FBSytMLFVBQVUvRCxTQUFTVixNQUFNbUMsR0FBU0EsRUFBS3hILFdBQWE1RixNQUM1RDJELEtBQUsrTCxVQUFVbUIsWUFBWUUsSUFBTS9RLEVBQ2pDMkQsS0FBSzZILFNBQVNwRSxXQUFXcEgsRUFBTyxPQUNoQzJELEtBQUs2SCxTQUFTckQsVUFBVXlKLElBRzlCLENBQ0YsQ0FFQXhNLFlBQVlwRixHQUNWMkQsS0FBSzZILFNBQVM1RCxnQkFBZ0I1SCxHQUV6QjJELEtBQUsrTCxVQUFVeEQsT0FDZC9LLFNBQVNtQyxjQUFjLHFCQUN6QkssS0FBSzZILFNBQVNoRSxhQUFhN0QsS0FBSytMLFVBQVVtQixZQUFZQyxRQUdqRG5OLEtBQUsrTCxVQUFVNkIsWUFBWXRHLE1BQU1tQyxHQUFTQSxJQUFTcE4sS0FDbkQyRCxLQUFLK0wsVUFBVS9ELFNBQVNWLE1BQU1tQyxHQUFTQSxFQUFLeEgsV0FBYTVGLE1BQzVEMkQsS0FBSzZILFNBQVNoRSxhQUFhN0QsS0FBSytMLFVBQVVtQixZQUFZQyxPQUN0RG5OLEtBQUs2SCxTQUFTckQsVUFBVXlKLElBSXRCelEsU0FBU21DLGNBQWMsa0JBQ3pCSyxLQUFLNkgsU0FBU2hFLGFBQWE3RCxLQUFLK0wsVUFBVW1CLFlBQVlFLEtBSTlELENBRUFSLGFBQWFuRixFQUFLeUcsRUFBS0MsR0FDckIsR0FBSTFHLEVBQ0YsR0FBSUEsRUFBSXRGLFVBQVVDLE9BQVMrTCxFQUFXLElBQU0xRyxFQUFJdEYsVUFBVUMsT0FBUytMLEVBQVcsSUFBTTFHLEVBQUl0RixVQUFVQyxPQUFTK0wsRUFBVyxHQUFJLENBV3hILElBQUk5RCxFQUNBK0QsRUFDSixPQVpJNVEsU0FBU21DLGNBQWMscUJBQ3pCSyxLQUFLNkgsU0FBU2hFLGFBQWE3RCxLQUFLK0wsVUFBVW1CLFlBQVltQixRQUN0RHJPLEtBQUsrTCxVQUFVbUIsWUFBWW1CLE9BQVNILEdBRXBDbE8sS0FBSytMLFVBQVVtQixZQUFjLENBQUVtQixPQUFRSCxHQUd6Q2xPLEtBQUs2SCxTQUFTcEUsV0FBV3lLLEdBQ3pCbE8sS0FBSzZILFNBQVMzSCxRQUFROUMsVUFBVUUsSUFBSSxZQUNwQzBDLEtBQUsrTCxVQUFVWSxXQUFhbEYsRUFHcEJBLEVBQUl0RixVQUFVQyxNQUNwQixJQUFLLFVBQ0wsSUFBSyxTQUNIaUksRUFBVyxFQUNYK0QsRUFBWSxFQUNaLE1BQ0YsSUFBSyxTQUNMLElBQUssWUFDSC9ELEVBQVcsRUFDWCtELEVBQVksRUFDWixNQUNGLElBQUssU0FDTCxJQUFLLFdBQ0gvRCxFQUFXLEVBQ1grRCxFQUFZLEVBQ1osTUFDRixRQUNFL0QsRUFBVyxFQUNYK0QsRUFBWSxFQUloQnBPLEtBQUsrTCxVQUFVK0IsZ0JBQWtCMUQsRUFBeUI4RCxFQUFLbE8sS0FBSzZILFNBQVN2TCxVQUFXK04sR0FDeEZySyxLQUFLK0wsVUFBVTZCLFlBQWN4RCxFQUF5QjhELEVBQUtsTyxLQUFLNkgsU0FBU3ZMLFVBQVc4UixHQUFXLEVBQ2pHLE1BQVdwTyxLQUFLK0wsVUFBVW1CLGNBQ3BCbE4sS0FBSytMLFVBQVU2QixZQUFZdEcsTUFBTW1DLEdBQVNBLElBQVN5RSxLQUNwRGxPLEtBQUsrTCxVQUFVL0QsU0FBU1YsTUFBTW1DLEdBQVNBLEVBQUt4SCxXQUFhaU0sSUFDNURwTyxFQUFTa04sVUFBVSxtQkFBb0IsUUFDN0JoTixLQUFLK0wsVUFBVVksWUFDekI3TSxFQUFTa04sVUFBVSw0QkFBNkIsT0FHdEQsQ0FFQUMsZUFBZTVRLEdBQ2IsTUFBTWlTLEVBQVl0TyxLQUFLK0wsVUFBVVksV0FBV3hLLFVBQVU4QyxPQUNoRG1CLEVBQVdwRyxLQUFLK0wsVUFBVTlELFVBQVVYLE1BQU1DLEdBQU9BLEVBQUd0RixXQUFhNUYsSUFDakU4SCxFQUFTNEIsS0FBS3dJLE1BQU14SSxLQUFLZ0UsSUFBSXVFLEVBQVlsSSxFQUFTakUsVUFBVStDLFFBQXFCLEdBQVpvSixJQUczRSxTQUZpQ3RPLEtBQUs2SCxTQUFTM0QsV0FBVzdILEVBQU84SCxHQUsvRCxPQUZBaUMsRUFBU2pFLFVBQVVJLE9BQVM2RCxFQUFTakUsVUFBVUksT0FBUzRCLEVBQ3hEbkUsS0FBS3dPLHNCQUFzQnBJLElBQ3BCLENBRVgsQ0FFQW9JLHNCQUFzQnZGLEdBQ3BCLEdBQUlBLEVBQU85RyxVQUFVSSxRQUFVLEVBQUcsQ0FDaEMsR0FBOEIsU0FBMUJ2QyxLQUFLK0wsVUFBVTdELE9BQW1CLENBQ3BDLE1BQU0yQyxFQUFZN0ssS0FBSytMLFVBQVVoRSxTQUFTOEMsV0FBV3BCLEdBQVNSLEVBQU9oSCxXQUFhd0gsRUFBS3hILFdBQ3ZGakMsS0FBSytMLFVBQVVoRSxTQUFTMkIsT0FBT21CLEVBQVcsRUFDNUMsQ0FFQSxHQUE4QixTQUExQjdLLEtBQUsrTCxVQUFVN0QsT0FBbUIsQ0FDcEMsTUFBTTJDLEVBQVk3SyxLQUFLK0wsVUFBVS9ELFNBQVM2QyxXQUFXcEIsR0FBU1IsRUFBT2hILFdBQWF3SCxFQUFLeEgsV0FDdkZqQyxLQUFLK0wsVUFBVS9ELFNBQVMwQixPQUFPbUIsRUFBVyxFQUM1QyxDQUVBN0ssS0FBSytMLFVBQVU5RCxVQUFZakksS0FBSytMLFVBQVVuRCxnQkFBZ0I1SSxLQUFLK0wsVUFBVWhFLFNBQVUvSCxLQUFLK0wsVUFBVS9ELFNBQ3BHLENBQ0YsQ0FFQXVFLFFBQ012TSxLQUFLK0wsVUFBVW1CLGNBQ2JsTixLQUFLK0wsVUFBVW1CLFlBQVltQixRQUFRck8sS0FBSzZILFNBQVNoRSxhQUFhN0QsS0FBSytMLFVBQVVtQixZQUFZbUIsUUFDekZyTyxLQUFLK0wsVUFBVW1CLFlBQVlFLEtBQUtwTixLQUFLNkgsU0FBU2hFLGFBQWE3RCxLQUFLK0wsVUFBVW1CLFlBQVlFLEtBQ3RGcE4sS0FBSytMLFVBQVVtQixZQUFZQyxPQUFPbk4sS0FBSzZILFNBQVNoRSxhQUFhN0QsS0FBSytMLFVBQVVtQixZQUFZQyxRQUc5Rm5OLEtBQUs2SCxTQUFTckQsVUFBVXlKLEVBQzFCLENBRUFELFNBQ0UsT0FBT2hPLEtBQUsrTCxVQUFVOUQsVUFBVVgsTUFBSzNKLEdBQUtBLEVBQUVzRSxXQUFhakMsS0FBSytMLFVBQVV1QixlQUFlckwsVUFDekYsQ0FFQXFLLGdCQUNFdE0sS0FBSzZILFNBQVNoSCxPQUFPdUksT0FBT0MsT0FBT0MsR0FBUXRKLEtBQUsrTCxVQUFVakUsVUFBWSxJQUN0RTlILEtBQUs2SCxTQUFTL0YsZ0JBQWdCOUIsS0FBSytMLFVBQVU5RCxVQUMvQyxHRjFTa0NKLEVBQVVzRCxHQUM5Q1csRUFBU00sTSIsInNvdXJjZXMiOlsid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL3V0aWxzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL21vZGFsLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL0dhbWVQbGF5LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL3RoZW1lcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9DaGFyYWN0ZXIuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9Cb3dtYW4uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9Td29yZHNtYW4uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9NYWdpY2lhbi5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9jaGFyYWN0ZXJzL1ZhbXBpcmUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9EYWVtb24uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9VbmRlYWQuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvVGVhbS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9Qb3NpdGlvbmVkQ2hhcmFjdGVyLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL2NyZWF0ZVBvc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9nZW5lcmF0b3JzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL0dhbWVTdGF0ZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9jdXJzb3JzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL3RyYW5zaXRpb25BdHRhY2tDZWxscy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9hcHAuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvR2FtZVN0YXRlU2VydmljZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9HYW1lQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9kb0F0dGFja0NvbXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdG9kb1xuICogQHBhcmFtIGluZGV4IC0g0LjQvdC00LXQutGBINC/0L7Qu9GPXG4gKiBAcGFyYW0gYm9hcmRTaXplIC0g0YDQsNC30LzQtdGAINC60LLQsNC00YDQsNGC0L3QvtCz0L4g0L/QvtC70Y8gKNCyINC00LvQuNC90YMg0LjQu9C4INGI0LjRgNC40L3RgylcbiAqIEByZXR1cm5zINGB0YLRgNC+0LrQsCAtINGC0LjQvyDRj9GH0LXQudC60Lgg0L3QsCDQv9C+0LvQtTpcbiAqXG4gKiB0b3AtbGVmdFxuICogdG9wLXJpZ2h0XG4gKiB0b3BcbiAqIGJvdHRvbS1sZWZ0XG4gKiBib3R0b20tcmlnaHRcbiAqIGJvdHRvbVxuICogcmlnaHRcbiAqIGxlZnRcbiAqIGNlbnRlclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY2FsY1RpbGVUeXBlKDAsIDgpOyAvLyAndG9wLWxlZnQnXG4gKiBjYWxjVGlsZVR5cGUoMSwgOCk7IC8vICd0b3AnXG4gKiBjYWxjVGlsZVR5cGUoNjMsIDgpOyAvLyAnYm90dG9tLXJpZ2h0J1xuICogY2FsY1RpbGVUeXBlKDcsIDcpOyAvLyAnbGVmdCdcbiAqIGBgYFxuICogKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjVGlsZVR5cGUoaW5kZXgsIGJvYXJkU2l6ZSkge1xuICAvLyBUT0RPOiDQstCw0Ygg0LrQvtC0INCx0YPQtNC10YIg0YLRg9GCXG4gIGlmIChpbmRleCA8IChib2FyZFNpemUgLSAxKSAmJiBpbmRleCA+IDApIHtcbiAgICByZXR1cm4gJ3RvcCc7XG4gIH1cbiAgaWYgKGluZGV4IDwgKGJvYXJkU2l6ZSAqKiAyIC0gMSkgJiYgaW5kZXggPiAoYm9hcmRTaXplICoqIDIgLSBib2FyZFNpemUpKSB7XG4gICAgcmV0dXJuICdib3R0b20nO1xuICB9XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYm9hcmRTaXplIC0gMTsgaSArPSAxKSB7XG4gICAgaWYgKGluZGV4ID09PSBib2FyZFNpemUgKiBpKSB7XG4gICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPT09IChib2FyZFNpemUgKiBpICsgKGJvYXJkU2l6ZSAtIDEpKSkge1xuICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgfVxuICB9XG5cbiAgc3dpdGNoIChpbmRleCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiAndG9wLWxlZnQnO1xuICAgIGNhc2UgKGJvYXJkU2l6ZSAtIDEpOlxuICAgICAgcmV0dXJuICd0b3AtcmlnaHQnO1xuICAgIGNhc2UgKGJvYXJkU2l6ZSAqIChib2FyZFNpemUgLSAxKSk6XG4gICAgICByZXR1cm4gJ2JvdHRvbS1sZWZ0JztcbiAgICBjYXNlIChib2FyZFNpemUgKiogMiAtIDEpOlxuICAgICAgcmV0dXJuICdib3R0b20tcmlnaHQnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ2NlbnRlcic7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNIZWFsdGhMZXZlbChoZWFsdGgpIHtcbiAgaWYgKGhlYWx0aCA8IDE1KSB7XG4gICAgcmV0dXJuICdjcml0aWNhbCc7XG4gIH1cblxuICBpZiAoaGVhbHRoIDwgNTApIHtcbiAgICByZXR1cm4gJ25vcm1hbCc7XG4gIH1cblxuICByZXR1cm4gJ2hpZ2gnO1xufVxuIiwiZnVuY3Rpb24gbW9kYWxGdW5jKG9wdGlvbnMpIHtcbiAgbGV0IGVsZW1Nb2RhbDtcbiAgbGV0IGV2ZW50U2hvd01vZGFsO1xuICBsZXQgZXZlbnRIaWRlTW9kYWw7XG4gIGxldCBoaWRpbmcgPSBmYWxzZTtcbiAgbGV0IGRlc3Ryb3llZCA9IGZhbHNlO1xuICBjb25zdCBhbmltYXRpb25TcGVlZCA9IDIwMDtcblxuICBmdW5jdGlvbiBjcmVhdGVNb2RhbChvcHRpb24pIHtcbiAgICBlbGVtTW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbi8qIGVzbGludC1kaXNhYmxlICovXHJcbiAgICAgICAgICAgIGxldCBtb2RhbFRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJtb2RhbF9fYmFja2Ryb3BcIiBkYXRhLWRpc21pc3M9XCJtb2RhbEZ1bmNcIj48ZGl2IGNsYXNzPVwibW9kYWxfX2NvbnRlbnRcIj48ZGl2IGNsYXNzPVwibW9kYWxfX2hlYWRlclwiPjxkaXYgY2xhc3M9XCJtb2RhbF9fdGl0bGVcIiBkYXRhLW1vZGFsRnVuYz1cInRpdGxlXCI+e3t0aXRsZX19PC9kaXY+PHNwYW4gY2xhc3M9XCJtb2RhbF9fYnRuLWNsb3NlXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxGdW5jXCIgdGl0bGU9XCLQl9Cw0LrRgNGL0YLRjFwiPsOXPC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9XCJtb2RhbF9fYm9keVwiIGRhdGEtbW9kYWxGdW5jPVwiY29udGVudFwiPnt7Y29udGVudH19PC9kaXY+e3tmb290ZXJ9fTwvZGl2PjwvZGl2Pic7XHJcbiAgICAgICAgICAgIGxldCBtb2RhbEZvb3RlclRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJtb2RhbF9fZm9vdGVyXCI+e3tidXR0b25zfX08L2Rpdj4nO1xyXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG4gICAgICAgICAgICBsZXQgbW9kYWxCdXR0b25UZW1wbGF0ZSA9ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInt7YnV0dG9uX2NsYXNzfX1cIiBkYXRhLWhhbmRsZXI9e3tidXR0b25faGFuZGxlcn19Pnt7YnV0dG9uX3RleHR9fTwvYnV0dG9uPic7XHJcbiAgICAgICAgICAgIGxldCBtb2RhbEhUTUw7XHJcbiAgICAgICAgICAgIGxldCBtb2RhbEZvb3RlckhUTUwgPSAnJztcclxuXHJcbiAgICAgICAgZWxlbU1vZGFsLmNsYXNzTGlzdC5hZGQoJ21vZGFsRnVuYycpO1xyXG4gICAgICAgIG1vZGFsSFRNTCA9IG1vZGFsVGVtcGxhdGUucmVwbGFjZSgne3t0aXRsZX19Jywgb3B0aW9uLnRpdGxlIHx8ICfQndC+0LLQvtC1INC+0LrQvdC+Jyk7XHJcbiAgICAgICAgbW9kYWxIVE1MID0gbW9kYWxIVE1MLnJlcGxhY2UoJ3t7Y29udGVudH19Jywgb3B0aW9uLmNvbnRlbnQgfHwgJycpO1xyXG4gICAgICAgIGlmIChvcHRpb24uZm9vdGVyQnV0dG9ucykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gb3B0aW9uLmZvb3RlckJ1dHRvbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuLyogZXNsaW50LWRpc2FibGUgKi9cclxuICAgICAgICAgICAgICAgIGxldCBtb2RhbEZvb3RlckJ1dHRvbiA9IG1vZGFsQnV0dG9uVGVtcGxhdGUucmVwbGFjZSgne3tidXR0b25fY2xhc3N9fScsIG9wdGlvbi5mb290ZXJCdXR0b25zW2ldLmNsYXNzKTtcclxuLyogZXNsaW50LWRpc2FibGUgKi9cclxuICAgICAgICAgICAgICAgIG1vZGFsRm9vdGVyQnV0dG9uID0gbW9kYWxGb290ZXJCdXR0b24ucmVwbGFjZSgne3tidXR0b25faGFuZGxlcn19Jywgb3B0aW9uLmZvb3RlckJ1dHRvbnNbaV0uaGFuZGxlcik7XHJcbi8qIGVzbGludC1kaXNhYmxlICovXHJcbiAgICAgICAgICAgICAgICBtb2RhbEZvb3RlckJ1dHRvbiA9IG1vZGFsRm9vdGVyQnV0dG9uLnJlcGxhY2UoJ3t7YnV0dG9uX3RleHR9fScsIG9wdGlvbi5mb290ZXJCdXR0b25zW2ldLnRleHQpO1xyXG4gICAgICAgICAgICAgICAgbW9kYWxGb290ZXJIVE1MICs9IG1vZGFsRm9vdGVyQnV0dG9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1vZGFsRm9vdGVySFRNTCA9IG1vZGFsRm9vdGVyVGVtcGxhdGUucmVwbGFjZSgne3tidXR0b25zfX0nLCBtb2RhbEZvb3RlckhUTUwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtb2RhbEhUTUwgPSBtb2RhbEhUTUwucmVwbGFjZSgne3tmb290ZXJ9fScsIG1vZGFsRm9vdGVySFRNTCk7XHJcbiAgICAgICAgZWxlbU1vZGFsLmlubmVySFRNTCA9IG1vZGFsSFRNTDtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1Nb2RhbCk7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1Nb2RhbDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaG93TW9kYWwoKSB7XHJcbiAgICAgICAgaWYgKCFkZXN0cm95ZWQgJiYgIWhpZGluZykge1xyXG4gICAgICAgICAgICBlbGVtTW9kYWwuY2xhc3NMaXN0LmFkZCgnbW9kYWxfX3Nob3cnKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChldmVudFNob3dNb2RhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGhpZGVNb2RhbCgpIHtcclxuICAgICAgICBoaWRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGVsZW1Nb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbF9fc2hvdycpO1xyXG4gICAgICAgIGVsZW1Nb2RhbC5jbGFzc0xpc3QuYWRkKCdtb2RhbF9faGlkaW5nJyk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGVsZW1Nb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbF9faGlkaW5nJyk7XHJcbiAgICAgICAgICAgIGhpZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH0sIGFuaW1hdGlvblNwZWVkKTtcclxuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50SGlkZU1vZGFsKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBoYW5kbGVyQ2xvc2VNb2RhbChlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmRhdGFzZXQuZGlzbWlzcyA9PT0gJ21vZGFsRnVuYycpIHtcclxuICAgICAgICAgICAgaGlkZU1vZGFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGVsZW1Nb2RhbCA9IGNyZWF0ZU1vZGFsKG9wdGlvbnMgfHwge30pO1xyXG5cclxuXHJcbiAgICBlbGVtTW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyQ2xvc2VNb2RhbCk7XHJcbiAgICBldmVudFNob3dNb2RhbCA9IG5ldyBDdXN0b21FdmVudCgnc2hvdy5tb2RhbEZ1bmMnLCB7IGRldGFpbDogZWxlbU1vZGFsIH0pO1xyXG4gICAgZXZlbnRIaWRlTW9kYWwgPSBuZXcgQ3VzdG9tRXZlbnQoJ2hpZGUubW9kYWxGdW5jJywgeyBkZXRhaWw6IGVsZW1Nb2RhbCB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNob3c6IHNob3dNb2RhbCxcclxuICAgICAgICBoaWRlOiBoaWRlTW9kYWwsXHJcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlbGVtTW9kYWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtTW9kYWwpO1xyXG4gICAgICAgICAgICBlbGVtTW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyQ2xvc2VNb2RhbCk7XHJcbiAgICAgICAgICAgIGRlc3Ryb3llZCA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgICAgICBlbGVtTW9kYWwucXVlcnlTZWxlY3RvcignW2RhdGEtbW9kYWxGdW5jPVwiY29udGVudFwiXScpLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRUaXRsZTogZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICAgICAgZWxlbU1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1vZGFsRnVuYz1cInRpdGxlXCJdJykuaW5uZXJIVE1MID0gdGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaG93TW9kYWwobWVzc2FnZSwgdW5pY29kZSkge1xyXG4gIGNvbnN0IG1vZGFsID0gbW9kYWxGdW5jKHtcclxuICAgIHRpdGxlOiBtZXNzYWdlLFxyXG4gICAgY29udGVudDogJyYjJyArIHVuaWNvZGUsXHJcbiAgICBmb290ZXJCdXR0b25zOiBbXHJcbiAgICAgIHsgY2xhc3M6ICdidG4gYnRuX19jYW5jZWwnLCB0ZXh0OiAnQ2xvc2UnLCBoYW5kbGVyOiAnbW9kYWxIYW5kbGVyQ2FuY2VsJyB9LFxyXG4gICAgXVxyXG4gIH0pO1xyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgIChlKSA9PiB7XHJcbiAgICBpZiAoZS50YXJnZXQuZGF0YXNldC5oYW5kbGVyID09PSAnbW9kYWxIYW5kbGVyQ2FuY2VsJykgIG1vZGFsLmhpZGUoKVxyXG4gIH0pO1xyXG4gIG1vZGFsLnNob3coKTtcclxufVxyXG4iLCJpbXBvcnQgeyBjYWxjSGVhbHRoTGV2ZWwsIGNhbGNUaWxlVHlwZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHNob3dNb2RhbCBmcm9tICcuL21vZGFsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVBsYXkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJvYXJkU2l6ZSA9IDg7XG4gICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xuICAgIHRoaXMuYm9hcmRFbCA9IG51bGw7XG4gICAgdGhpcy5jZWxscyA9IFtdO1xuICAgIHRoaXMuY2VsbENsaWNrTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5jZWxsRW50ZXJMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmNlbGxMZWF2ZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMubmV3R2FtZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuc2F2ZUdhbWVMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmxvYWRHYW1lTGlzdGVuZXJzID0gW107XG4gIH1cblxuICBiaW5kVG9ET00oY29udGFpbmVyKSB7XG4gICAgaWYgKCEoY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnRhaW5lciBpcyBub3QgSFRNTEVsZW1lbnQnKTtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgYm9hcmRFbCB3aXRoIHNwZWNpZmljIHRoZW1lXG4gICAqXG4gICAqIEBwYXJhbSB0aGVtZVxuICAgKi9cbiAgZHJhd1VpKHRoZW1lKSB7XG4gICAgdGhpcy5jaGVja0JpbmRpbmcoKTtcblxuICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiPlxuICAgICAgICA8YnV0dG9uIGRhdGEtaWQ9XCJhY3Rpb24tcmVzdGFydFwiIGNsYXNzPVwiYnRuXCI+TmV3IEdhbWU8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBkYXRhLWlkPVwiYWN0aW9uLXNhdmVcIiBjbGFzcz1cImJ0blwiPlNhdmUgR2FtZTwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGRhdGEtaWQ9XCJhY3Rpb24tbG9hZFwiIGNsYXNzPVwiYnRuXCI+TG9hZCBHYW1lPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJib2FyZC1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBkYXRhLWlkPVwiYm9hcmRcIiBjbGFzcz1cImJvYXJkXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuXG4gICAgdGhpcy5uZXdHYW1lRWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1hY3Rpb24tcmVzdGFydF0nKTtcbiAgICB0aGlzLnNhdmVHYW1lRWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1hY3Rpb24tc2F2ZV0nKTtcbiAgICB0aGlzLmxvYWRHYW1lRWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1hY3Rpb24tbG9hZF0nKTtcblxuICAgIHRoaXMubmV3R2FtZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB0aGlzLm9uTmV3R2FtZUNsaWNrKGV2ZW50KSk7XG4gICAgdGhpcy5zYXZlR2FtZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB0aGlzLm9uU2F2ZUdhbWVDbGljayhldmVudCkpO1xuICAgIHRoaXMubG9hZEdhbWVFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5vbkxvYWRHYW1lQ2xpY2soZXZlbnQpKTtcblxuICAgIHRoaXMuYm9hcmRFbCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPWJvYXJkXScpO1xuXG4gICAgdGhpcy5ib2FyZEVsLmNsYXNzTGlzdC5hZGQodGhlbWUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ib2FyZFNpemUgKiogMjsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjZWxsRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNlbGxFbC5jbGFzc0xpc3QuYWRkKCdjZWxsJywgJ21hcC10aWxlJywgYG1hcC10aWxlLSR7Y2FsY1RpbGVUeXBlKGksIHRoaXMuYm9hcmRTaXplKX1gKTtcbiAgICAgIGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKGV2ZW50KSA9PiB0aGlzLm9uQ2VsbEVudGVyKGV2ZW50KSk7XG4gICAgICBjZWxsRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIChldmVudCkgPT4gdGhpcy5vbkNlbGxMZWF2ZShldmVudCkpO1xuICAgICAgY2VsbEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB0aGlzLm9uQ2VsbENsaWNrKGV2ZW50KSk7XG4gICAgICB0aGlzLmJvYXJkRWwuYXBwZW5kQ2hpbGQoY2VsbEVsKTtcbiAgICB9XG5cbiAgICB0aGlzLmNlbGxzID0gQXJyYXkuZnJvbSh0aGlzLmJvYXJkRWwuY2hpbGRyZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHBvc2l0aW9ucyAod2l0aCBjaGFycykgb24gYm9hcmRFbFxuICAgKlxuICAgKiBAcGFyYW0gcG9zaXRpb25zIGFycmF5IG9mIFBvc2l0aW9uZWRDaGFyYWN0ZXIgb2JqZWN0c1xuICAgKi9cbiAgcmVkcmF3UG9zaXRpb25zKHBvc2l0aW9ucykge1xuICAgIGZvciAoY29uc3QgY2VsbCBvZiB0aGlzLmNlbGxzKSB7XG4gICAgICBjZWxsLmlubmVySFRNTCA9ICcnO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcG9zaXRpb24gb2YgcG9zaXRpb25zKSB7XG4gICAgICBjb25zdCBjZWxsRWwgPSB0aGlzLmJvYXJkRWwuY2hpbGRyZW5bcG9zaXRpb24ucG9zaXRpb25dO1xuICAgICAgY29uc3QgY2hhckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjaGFyRWwuY2xhc3NMaXN0LmFkZCgnY2hhcmFjdGVyJywgcG9zaXRpb24uY2hhcmFjdGVyLnR5cGUpO1xuXG4gICAgICBjb25zdCBoZWFsdGhFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgaGVhbHRoRWwuY2xhc3NMaXN0LmFkZCgnaGVhbHRoLWxldmVsJyk7XG5cbiAgICAgIGNvbnN0IGhlYWx0aEluZGljYXRvckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBoZWFsdGhJbmRpY2F0b3JFbC5jbGFzc0xpc3QuYWRkKCdoZWFsdGgtbGV2ZWwtaW5kaWNhdG9yJywgYGhlYWx0aC1sZXZlbC1pbmRpY2F0b3ItJHtjYWxjSGVhbHRoTGV2ZWwocG9zaXRpb24uY2hhcmFjdGVyLmhlYWx0aCl9YCk7XG4gICAgICBoZWFsdGhJbmRpY2F0b3JFbC5zdHlsZS53aWR0aCA9IGAke3Bvc2l0aW9uLmNoYXJhY3Rlci5oZWFsdGh9JWA7XG4gICAgICBoZWFsdGhFbC5hcHBlbmRDaGlsZChoZWFsdGhJbmRpY2F0b3JFbCk7XG5cbiAgICAgIGNoYXJFbC5hcHBlbmRDaGlsZChoZWFsdGhFbCk7XG4gICAgICBjZWxsRWwuYXBwZW5kQ2hpbGQoY2hhckVsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIG1vdXNlIGVudGVyIGZvciBjZWxsXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkQ2VsbEVudGVyTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNlbGxFbnRlckxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgbGlzdGVuZXIgdG8gbW91c2UgbGVhdmUgZm9yIGNlbGxcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBhZGRDZWxsTGVhdmVMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHRoaXMuY2VsbExlYXZlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBsaXN0ZW5lciB0byBtb3VzZSBjbGljayBmb3IgY2VsbFxuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGFkZENlbGxDbGlja0xpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jZWxsQ2xpY2tMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIFwiTmV3IEdhbWVcIiBidXR0b24gY2xpY2tcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBhZGROZXdHYW1lTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLm5ld0dhbWVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIFwiU2F2ZSBHYW1lXCIgYnV0dG9uIGNsaWNrXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkU2F2ZUdhbWVMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHRoaXMuc2F2ZUdhbWVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIFwiTG9hZCBHYW1lXCIgYnV0dG9uIGNsaWNrXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkTG9hZEdhbWVMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHRoaXMubG9hZEdhbWVMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICBvbkNlbGxFbnRlcihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgdGhpcy5jZWxsRW50ZXJMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwsIGluZGV4KSk7XG4gIH1cblxuICBvbkNlbGxMZWF2ZShldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgdGhpcy5jZWxsTGVhdmVMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwsIGluZGV4KSk7XG4gIH1cblxuICBvbkNlbGxDbGljayhldmVudCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIHRoaXMuY2VsbENsaWNrTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsLCBpbmRleCkpO1xuICB9XG5cbiAgb25OZXdHYW1lQ2xpY2soZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMubmV3R2FtZUxpc3RlbmVycy5mb3JFYWNoKChvKSA9PiBvLmNhbGwobnVsbCkpO1xuICB9XG5cbiAgb25TYXZlR2FtZUNsaWNrKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNhdmVHYW1lTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsKSk7XG4gIH1cblxuICBvbkxvYWRHYW1lQ2xpY2soZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMubG9hZEdhbWVMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwpKTtcbiAgfVxuXG4gIHN0YXRpYyBzaG93RXJyb3IobWVzc2FnZSwgdW5pY29kZSkge1xuICAgIHNob3dNb2RhbChtZXNzYWdlLCB1bmljb2RlKTtcbiAgfVxuXG4gIHN0YXRpYyBzaG93TWVzc2FnZShtZXNzYWdlLCB1bmljb2RlKSB7XG4gICAgc2hvd01vZGFsKG1lc3NhZ2UsIHVuaWNvZGUpO1xuICB9XG5cbiAgc3RhdGljIHNob3dQb2ludHMobWVzc2FnZSwgdW5pY29kZSkge1xuICAgIHNob3dNb2RhbChtZXNzYWdlLCB1bmljb2RlKTtcbiAgfVxuXG4gIHNlbGVjdENlbGwoaW5kZXgsIGNvbG9yID0gJ3llbGxvdycpIHtcbiAgICB0aGlzLmRlc2VsZWN0Q2VsbChpbmRleCk7XG4gICAgdGhpcy5jZWxsc1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnLCBgc2VsZWN0ZWQtJHtjb2xvcn1gKTtcbiAgfVxuXG4gIGRlc2VsZWN0Q2VsbChpbmRleCkge1xuICAgIGNvbnN0IGNlbGwgPSB0aGlzLmNlbGxzW2luZGV4XTtcbiAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoLi4uQXJyYXkuZnJvbShjZWxsLmNsYXNzTGlzdClcbiAgICAgIC5maWx0ZXIoKG8pID0+IG8uc3RhcnRzV2l0aCgnc2VsZWN0ZWQnKSkpO1xuICB9XG5cbiAgc2hvd0NlbGxUb29sdGlwKG1lc3NhZ2UsIGluZGV4KSB7XG4gICAgdGhpcy5jZWxsc1tpbmRleF0udGl0bGUgPSBtZXNzYWdlO1xuICB9XG5cbiAgaGlkZUNlbGxUb29sdGlwKGluZGV4KSB7XG4gICAgdGhpcy5jZWxsc1tpbmRleF0udGl0bGUgPSAnJztcbiAgfVxuXG4gIHNob3dEYW1hZ2UoaW5kZXgsIGRhbWFnZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3QgY2VsbCA9IHRoaXMuY2VsbHNbaW5kZXhdO1xuICAgICAgY29uc3QgZGFtYWdlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBkYW1hZ2VFbC50ZXh0Q29udGVudCA9IGRhbWFnZTtcbiAgICAgIGRhbWFnZUVsLmNsYXNzTGlzdC5hZGQoJ2RhbWFnZScpO1xuICAgICAgY2VsbC5hcHBlbmRDaGlsZChkYW1hZ2VFbCk7XG5cbiAgICAgIGRhbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsICgpID0+IHtcbiAgICAgICAgY2VsbC5yZW1vdmVDaGlsZChkYW1hZ2VFbCk7XG4gICAgICAgIHJlc29sdmUoJ3Nob3cnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0Q3Vyc29yKGN1cnNvcikge1xuICAgIHRoaXMuYm9hcmRFbC5zdHlsZS5jdXJzb3IgPSBjdXJzb3I7XG4gIH1cblxuICBjaGVja0JpbmRpbmcoKSB7XG4gICAgaWYgKHRoaXMuY29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dhbWVQbGF5IG5vdCBiaW5kIHRvIERPTScpO1xuICAgIH1cbiAgfVxufVxuIiwiY29uc3QgdGhlbWVzID0ge1xuICBwcmFpcmllOiAncHJhaXJpZScsXG4gIGRlc2VydDogJ2Rlc2VydCcsXG4gIGFyY3RpYzogJ2FyY3RpYycsXG4gIG1vdW50YWluOiAnbW91bnRhaW4nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGhlbWVzO1xuIiwiLyoqXG4gKiDQkdCw0LfQvtCy0YvQuSDQutC70LDRgdGBLCDQvtGCINC60L7RgtC+0YDQvtCz0L4g0L3QsNGB0LvQtdC00YPRjtGC0YHRjyDQutC70LDRgdGB0Ysg0L/QtdGA0YHQvtC90LDQttC10LlcbiAqIEBwcm9wZXJ0eSBsZXZlbCAtINGD0YDQvtCy0LXQvdGMINC/0LXRgNGB0L7QvdCw0LbQsCwg0L7RgiAxINC00L4gNFxuICogQHByb3BlcnR5IGF0dGFjayAtINC/0L7QutCw0LfQsNGC0LXQu9GMINCw0YLQsNC60LhcbiAqIEBwcm9wZXJ0eSBkZWZlbmNlIC0g0L/QvtC60LDQt9Cw0YLQtdC70Ywg0LfQsNGJ0LjRgtGLXG4gKiBAcHJvcGVydHkgaGVhbHRoIC0g0LfQtNC+0YDQvtCy0YzQtSDQv9C10YDRgdC+0L3QsNC20LBcbiAqIEBwcm9wZXJ0eSB0eXBlIC0g0YHRgtGA0L7QutCwINGBINC+0LTQvdC40Lwg0LjQtyDQtNC+0L/Rg9GB0YLQuNC80YvRhSDQt9C90LDRh9C10L3QuNC5OlxuICogc3dvcmRzbWFuXG4gKiBib3dtYW5cbiAqIG1hZ2ljaWFuXG4gKiBkYWVtb25cbiAqIHVuZGVhZFxuICogdmFtcGlyZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihsZXZlbCwgdHlwZSA9ICdnZW5lcmljJykge1xuICAgIGlmIChuZXcudGFyZ2V0Lm5hbWUgPT09ICdDaGFyYWN0ZXInKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2xhc3MnKTtcbiAgICB9XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgdGhpcy5hdHRhY2sgPSAwO1xuICAgIHRoaXMuZGVmZW5jZSA9IDA7XG4gICAgdGhpcy5oZWFsdGggPSA1MDtcbiAgICAvLyBUT0RPOiDQstGL0LHRgNC+0YHQuNGC0LUg0LjRgdC60LvRjtGH0LXQvdC40LUsINC10YHQu9C4INC60YLQvi3RgtC+INC40YHQv9C+0LvRjNC30YPQtdGCIFwibmV3IENoYXJhY3RlcigpXCJcbiAgfVxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tICcuLi9DaGFyYWN0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3dtYW4gZXh0ZW5kcyBDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihsZXZlbCA9IDEpIHtcbiAgICBzdXBlcihsZXZlbCwgJ2Jvd21hbicpO1xuICAgIHRoaXMuYXR0YWNrID0gMjU7XG4gICAgdGhpcy5kZWZlbmNlID0gMjU7XG4gIH1cbn1cbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSAnLi4vQ2hhcmFjdGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3dvcmRzbWFuIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IobGV2ZWwgPSAxKSB7XG4gICAgc3VwZXIobGV2ZWwsICdzd29yZHNtYW4nKTtcbiAgICB0aGlzLmF0dGFjayA9IDQwO1xuICAgIHRoaXMuZGVmZW5jZSA9IDEwO1xuICB9XG59XG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4uL0NoYXJhY3Rlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hZ2ljaWFuIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IobGV2ZWwgPSAxKSB7XG4gICAgc3VwZXIobGV2ZWwsICdtYWdpY2lhbicpO1xuICAgIHRoaXMuYXR0YWNrID0gMTA7XG4gICAgdGhpcy5kZWZlbmNlID0gNDA7XG4gIH1cbn1cbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSAnLi4vQ2hhcmFjdGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmFtcGlyZSBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsID0gMSkge1xuICAgIHN1cGVyKGxldmVsLCAndmFtcGlyZScpO1xuICAgIHRoaXMuYXR0YWNrID0gMjU7XG4gICAgdGhpcy5kZWZlbmNlID0gMjU7XG4gIH1cbn1cbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSAnLi4vQ2hhcmFjdGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGFlbW9uIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IobGV2ZWwgPSAxKSB7XG4gICAgc3VwZXIobGV2ZWwsICdkYWVtb24nKTtcbiAgICB0aGlzLmF0dGFjayA9IDEwO1xuICAgIHRoaXMuZGVmZW5jZSA9IDEwO1xuICB9XG59XG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4uL0NoYXJhY3Rlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuZGVhZCBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsID0gMSkge1xuICAgIHN1cGVyKGxldmVsLCAndW5kZWFkJyk7XG4gICAgdGhpcy5hdHRhY2sgPSA0MDtcbiAgICB0aGlzLmRlZmVuY2UgPSAxMDtcbiAgfVxufVxuIiwiLyoqXG4gKiDQmtC70LDRgdGBLCDQv9GA0LXQtNGB0YLQsNCy0LvRj9GO0YnQuNC5INC/0LXRgNGB0L7QvdCw0LbQtdC5INC60L7QvNCw0L3QtNGLXG4gKlxuICogQHRvZG8g0KHQsNC80L7RgdGC0L7Rj9GC0LXQu9GM0L3QviDQv9GA0L7QtNGD0LzQsNC50YLQtSDRhdGA0LDQvdC10L3QuNC1INC/0LXRgNGB0L7QvdCw0LbQtdC5INCyINC60LvQsNGB0YHQtVxuICog0J3QsNC/0YDQuNC80LXRgFxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBjb25zdCBjaGFyYWN0ZXJzID0gW25ldyBTd29yZHNtYW4oMiksIG5ldyBCb3dtYW4oMSldXG4gKiBjb25zdCB0ZWFtID0gbmV3IFRlYW0oY2hhcmFjdGVycyk7XG4gKlxuICogdGVhbS5jaGFyYWN0ZXJzIC8vIFtzd29yZHNtYW4sIGJvd21hbl1cbiAqIGBgYFxuICogKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlYW0ge1xuICAvLyBUT0RPOiB3cml0ZSB5b3VyIGxvZ2ljIGhlcmVcbiAgY29uc3RydWN0b3IoY2hhcmFjdGVycykge1xuICAgIHRoaXMuY2hhcmFjdGVycyA9IGNoYXJhY3RlcnM7XG4gIH1cblxuICAvLyBhZGRDaGFyYWN0ZXJzKGFyckNoYXJhY3RlcnMpIHtcbiAgLy8gICB0aGlzLmNoYXJhY3RlcnMgPSBbLi4udGhpcy5jaGFyYWN0ZXJzXTtcbiAgLy8gfVxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tICcuL0NoYXJhY3Rlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvc2l0aW9uZWRDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihjaGFyYWN0ZXIsIHBvc2l0aW9uKSB7XG4gICAgaWYgKCEoY2hhcmFjdGVyIGluc3RhbmNlb2YgQ2hhcmFjdGVyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjaGFyYWN0ZXIgbXVzdCBiZSBpbnN0YW5jZSBvZiBDaGFyYWN0ZXIgb3IgaXRzIGNoaWxkcmVuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwb3NpdGlvbiAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncG9zaXRpb24gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgIH1cblxuICAgIHRoaXMuY2hhcmFjdGVyID0gY2hhcmFjdGVyO1xuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2VuZXJhdGVUZWFtIH0gZnJvbSAnLi9nZW5lcmF0b3JzJztcbmltcG9ydCBQb3NpdGlvbmVkQ2hhcmFjdGVyIGZyb20gJy4vUG9zaXRpb25lZENoYXJhY3Rlcic7XG5pbXBvcnQgQm93bWFuIGZyb20gJy4vY2hhcmFjdGVycy9Cb3dtYW4nO1xuaW1wb3J0IFN3b3Jkc21hbiBmcm9tICcuL2NoYXJhY3RlcnMvU3dvcmRzbWFuJztcbmltcG9ydCBNYWdpY2lhbiBmcm9tICcuL2NoYXJhY3RlcnMvTWFnaWNpYW4nO1xuaW1wb3J0IERhZW1vbiBmcm9tICcuL2NoYXJhY3RlcnMvRGFlbW9uJztcbmltcG9ydCBVbmRlYWQgZnJvbSAnLi9jaGFyYWN0ZXJzL1VuZGVhZCc7XG5pbXBvcnQgVmFtcGlyZSBmcm9tICcuL2NoYXJhY3RlcnMvVmFtcGlyZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaG9vc2VSYW5kUG9zaXRpb25zKGJvYXJkU2l6ZSwgb3Bwb25lbnQgPSBmYWxzZSkge1xuICBjb25zdCBjZWxscyA9IFtdO1xuICBpZiAoIW9wcG9uZW50KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZFNpemUgKiogMjsgaSArPSA4KSB7XG4gICAgICBjZWxscy5wdXNoKGkpO1xuICAgICAgY2VsbHMucHVzaChpICsgMSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSBib2FyZFNpemUgLSAyOyBpIDwgYm9hcmRTaXplICoqIDI7IGkgKz0gYm9hcmRTaXplKSB7XG4gICAgICBjZWxscy5wdXNoKGkpO1xuICAgICAgY2VsbHMucHVzaChpICsgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjZWxscztcbn1cblxuZnVuY3Rpb24gY2hvb3NlUmFuZFBvc2l0aW9uKGJvYXJkU2l6ZSwgb3Bwb25lbnQgPSBmYWxzZSkge1xuICBjb25zdCBjZWxscyA9IGNob29zZVJhbmRQb3NpdGlvbnMoYm9hcmRTaXplLCBvcHBvbmVudCk7XG4gIGNvbnN0IHJhbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjZWxscy5sZW5ndGgpO1xuICByZXR1cm4gY2VsbHNbcmFuZF07XG59XG5cbi8qIGVzbGludC1kaXNhYmxlICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uc0NoYXIocGxheWVyVHlwZXMsIGJvYXJkU2l6ZSwgb3Bwb25lbnQsIFttYXhMZXZlbCwgY2hhckNvdW50XSkge1xyXG4gIGNvbnN0IHBvc2l0aW9ucyA9IFtdO1xyXG4gIGlmIChtYXhMZXZlbCA+PSA0KSBtYXhMZXZlbCA9IDQ7XHJcbiAgaWYgKGNoYXJDb3VudCA+PSAxMCkgY2hhckNvdW50ID0gMTA7XHJcbiAgY29uc3QgdGVhbSA9IGdlbmVyYXRlVGVhbShwbGF5ZXJUeXBlcywgbWF4TGV2ZWwsIGNoYXJDb3VudCk7XHJcblxyXG4gIGNvbnN0IHJhbmRQb3NpdGlvbnMgPSBbXTtcclxuICB0ZWFtLmNoYXJhY3RlcnMuZm9yRWFjaCgoY2hhcikgPT4ge1xyXG4gICAgbGV0IHJhbmRQb3NpdGlvbjtcclxuICAgIGxldCBpc1Bvc2l0aW9uVW5pcXVlID0gZmFsc2U7XHJcbiAgICBkbyB7XHJcbiAgICAgIHJhbmRQb3NpdGlvbiA9IGNob29zZVJhbmRQb3NpdGlvbihib2FyZFNpemUsIG9wcG9uZW50KTtcclxuICAgICAgaWYgKHJhbmRQb3NpdGlvbnMuZmluZCgoZWwpID0+IGVsID09PSByYW5kUG9zaXRpb24pKSB7XHJcbiAgICAgICAgcmFuZFBvc2l0aW9uID0gY2hvb3NlUmFuZFBvc2l0aW9uKGJvYXJkU2l6ZSwgb3Bwb25lbnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJhbmRQb3NpdGlvbnMucHVzaChyYW5kUG9zaXRpb24pO1xyXG4gICAgICAgIGlzUG9zaXRpb25VbmlxdWUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9IHdoaWxlICghaXNQb3NpdGlvblVuaXF1ZSk7XHJcbiAgICBwb3NpdGlvbnMucHVzaChuZXcgUG9zaXRpb25lZENoYXJhY3RlcihjaGFyLCByYW5kUG9zaXRpb24pKTtcclxuICB9KTtcclxuICByZXR1cm4gcG9zaXRpb25zO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVzdG9yZUNoYXIob2JqKSB7XHJcbiAgbGV0IENoYXJDbGFzcztcclxuICBzd2l0Y2ggKG9iai5jaGFyYWN0ZXIudHlwZSkge1xyXG4gICAgY2FzZSAnYm93bWFuJzpcclxuICAgICAgQ2hhckNsYXNzID0gQm93bWFuO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3N3b3Jkc21hbic6XHJcbiAgICAgIENoYXJDbGFzcyA9IFN3b3Jkc21hbjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdtYWdpY2lhbic6XHJcbiAgICAgIENoYXJDbGFzcyA9IE1hZ2ljaWFuO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ2RhZW1vbic6XHJcbiAgICAgIENoYXJDbGFzcyA9IERhZW1vbjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICd1bmRlYWQnOlxyXG4gICAgICBDaGFyQ2xhc3MgPSBVbmRlYWQ7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAndmFtcGlyZSc6XHJcbiAgICAgIENoYXJDbGFzcyA9IFZhbXBpcmU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDogYnJlYWs7XHJcbiAgfVxyXG4gIGNvbnN0IGNoYXIgPSBuZXcgQ2hhckNsYXNzKG9iai5jaGFyYWN0ZXIubGV2ZWwpO1xyXG4gIGNvbnN0IHJlc3RvcmVQb3NpdGlvbmVkQ2hhciA9IG5ldyBQb3NpdGlvbmVkQ2hhcmFjdGVyKGNoYXIsIG9iai5wb3NpdGlvbik7XHJcbiAgcmVzdG9yZVBvc2l0aW9uZWRDaGFyLmNoYXJhY3Rlci5hdHRhY2sgPSBvYmouY2hhcmFjdGVyLmF0dGFjaztcclxuICByZXN0b3JlUG9zaXRpb25lZENoYXIuY2hhcmFjdGVyLmhlYWx0aCA9IG9iai5jaGFyYWN0ZXIuaGVhbHRoO1xyXG4gIHJlc3RvcmVQb3NpdGlvbmVkQ2hhci5jaGFyYWN0ZXIuZGVmZW5jZSA9IG9iai5jaGFyYWN0ZXIuZGVmZW5jZTtcclxuXHJcbiAgcmV0dXJuIHJlc3RvcmVQb3NpdGlvbmVkQ2hhcjtcclxufVxyXG4iLCJpbXBvcnQgVGVhbSBmcm9tICcuL1RlYW0nO1xuXG4vKipcbiAqINCk0L7RgNC80LjRgNGD0LXRgiDRjdC60LfQtdC80L/Qu9GP0YAg0L/QtdGA0YHQvtC90LDQttCwINC40Lcg0LzQsNGB0YHQuNCy0LAgYWxsb3dlZFR5cGVzINGB0L5cbiAqINGB0LvRg9GH0LDQudC90YvQvCDRg9GA0L7QstC90LXQvCDQvtGCIDEg0LTQviBtYXhMZXZlbFxuICpcbiAqIEBwYXJhbSBhbGxvd2VkVHlwZXMg0LzQsNGB0YHQuNCyINC60LvQsNGB0YHQvtCyXG4gKiBAcGFyYW0gbWF4TGV2ZWwg0LzQsNC60YHQuNC80LDQu9GM0L3Ri9C5INCy0L7Qt9C80L7QttC90YvQuSDRg9GA0L7QstC10L3RjCDQv9C10YDRgdC+0L3QsNC20LBcbiAqIEByZXR1cm5zINCz0LXQvdC10YDQsNGC0L7RgCwg0LrQvtGC0L7RgNGL0Lkg0L/RgNC4INC60LDQttC00L7QvCDQstGL0LfQvtCy0LVcbiAqINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC90L7QstGL0Lkg0Y3QutC30LXQvNC/0LvRj9GAINC60LvQsNGB0YHQsCDQv9C10YDRgdC+0L3QsNC20LBcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiogY2hhcmFjdGVyR2VuZXJhdG9yKGFsbG93ZWRUeXBlcywgbWF4TGV2ZWwpIHtcbiAgLy8gVE9ETzogd3JpdGUgbG9naWMgaGVyZVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IHJhbmRvbUxldmVsID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4TGV2ZWwgKyAxKTtcbiAgICBjb25zdCBSYW5kb21DbGFzcyA9IGFsbG93ZWRUeXBlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbGxvd2VkVHlwZXMubGVuZ3RoKV07XG4gICAgeWllbGQgbmV3IFJhbmRvbUNsYXNzKHJhbmRvbUxldmVsKTtcbiAgfVxufVxuXG4vKipcbiAqINCk0L7RgNC80LjRgNGD0LXRgiDQvNCw0YHRgdC40LIg0L/QtdGA0YHQvtC90LDQttC10Lkg0L3QsCDQvtGB0L3QvtCy0LUgY2hhcmFjdGVyR2VuZXJhdG9yXG4gKiBAcGFyYW0gYWxsb3dlZFR5cGVzINC80LDRgdGB0LjQsiDQutC70LDRgdGB0L7QslxuICogQHBhcmFtIG1heExldmVsINC80LDQutGB0LjQvNCw0LvRjNC90YvQuSDQstC+0LfQvNC+0LbQvdGL0Lkg0YPRgNC+0LLQtdC90Ywg0L/QtdGA0YHQvtC90LDQttCwXG4gKiBAcGFyYW0gY2hhcmFjdGVyQ291bnQg0LrQvtC70LjRh9C10YHRgtCy0L4g0L/QtdGA0YHQvtC90LDQttC10LksINC60L7RgtC+0YDQvtC1INC90YPQttC90L4g0YHRhNC+0YDQvNC40YDQvtCy0LDRgtGMXG4gKiBAcmV0dXJucyDRjdC60LfQtdC80L/Qu9GP0YAgVGVhbSwg0YXRgNCw0L3Rj9GJ0LjQuSDRjdC60LfQtdC80L/Qu9GP0YDRiyDQv9C10YDRgdC+0L3QsNC20LXQuS5cbiAqINCa0L7Qu9C40YfQtdGB0YLQstC+INC/0LXRgNGB0L7QvdCw0LbQtdC5INCyINC60L7QvNCw0L3QtNC1IC0gY2hhcmFjdGVyQ291bnRcbiAqICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVUZWFtKGFsbG93ZWRUeXBlcywgbWF4TGV2ZWwsIGNoYXJhY3RlckNvdW50KSB7XG4gIC8vIFRPRE86IHdyaXRlIGxvZ2ljIGhlcmVcbiAgY29uc3QgY2hhcmFjdGVycyA9IFtdO1xuICBjb25zdCBwbGF5ZXJHZW5lcmF0b3IgPSBjaGFyYWN0ZXJHZW5lcmF0b3IoYWxsb3dlZFR5cGVzLCBtYXhMZXZlbCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcmFjdGVyQ291bnQ7IGkgKz0gMSkge1xuICAgIGNoYXJhY3RlcnMucHVzaChwbGF5ZXJHZW5lcmF0b3IubmV4dCgpLnZhbHVlKTtcbiAgfVxuICByZXR1cm4gbmV3IFRlYW0oY2hhcmFjdGVycyk7XG59XG4iLCJpbXBvcnQgQm93bWFuIGZyb20gJy4vY2hhcmFjdGVycy9Cb3dtYW4nO1xuaW1wb3J0IFN3b3Jkc21hbiBmcm9tICcuL2NoYXJhY3RlcnMvU3dvcmRzbWFuJztcbmltcG9ydCBNYWdpY2lhbiBmcm9tICcuL2NoYXJhY3RlcnMvTWFnaWNpYW4nO1xuaW1wb3J0IFZhbXBpcmUgZnJvbSAnLi9jaGFyYWN0ZXJzL1ZhbXBpcmUnO1xuaW1wb3J0IERhZW1vbiBmcm9tICcuL2NoYXJhY3RlcnMvRGFlbW9uJztcbmltcG9ydCBVbmRlYWQgZnJvbSAnLi9jaGFyYWN0ZXJzL1VuZGVhZCc7XG5pbXBvcnQgY3JlYXRlUG9zaXRpb25zQ2hhciwgeyBjaG9vc2VSYW5kUG9zaXRpb25zIH0gZnJvbSAnLi9jcmVhdGVQb3NpdGlvbnMnO1xuaW1wb3J0IHRoZW1lcyBmcm9tICcuL3RoZW1lcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKGdhbWVQbGF5KSB7XG4gICAgdGhpcy5sZXZlbEdhbWUgPSAxO1xuICAgIHRoaXMuZ2FtZVBsYXkgPSBnYW1lUGxheTtcbiAgICB0aGlzLnVzZXJUZWFtID0gW107XG4gICAgdGhpcy5jb21wVGVhbSA9IFtdO1xuICAgIHRoaXMuYWxsUGxheWVyID0gW107XG4gICAgdGhpcy5pc01vdmUgPSAndXNlcic7XG4gICAgdGhpcy5jb3VudENsaWNrID0gMDtcbiAgICB0aGlzLnN1cnZpdm9zID0gW107XG4gICAgdGhpcy5oaXN0b3J5ID0gW107XG4gICAgdGhpcy5wb2ludHMgPSAwO1xuICAgIHRoaXMuYmxvY2sgPSBmYWxzZTtcblxuICAgIHRoaXMuaW5pdE5ld1RlYW1zKCk7XG4gIH1cblxuICBnZXRVc2VyVGVhbShbbWF4TGV2ZWwsIGNoYXJDb3VudF0pIHtcbiAgICBjb25zdCB1c2VyVHlwZXMgPSBbQm93bWFuLCBTd29yZHNtYW4sIE1hZ2ljaWFuXTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG4gICAgY29uc3QgdXNlclRlYW0gPSBjcmVhdGVQb3NpdGlvbnNDaGFyKHVzZXJUeXBlcywgdGhpcy5nYW1lUGxheS5ib2FyZFNpemUsIGZhbHNlLCBbbWF4TGV2ZWwsIGNoYXJDb3VudF0pO1xyXG4gICAgdGhpcy51c2VyVGVhbSA9IHVzZXJUZWFtO1xyXG4gICAgcmV0dXJuIHVzZXJUZWFtO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29tcFRlYW0oW21heExldmVsLCBjaGFyQ291bnRdKSB7XHJcbiAgICBjb25zdCBjb21wVHlwZXMgPSBbVmFtcGlyZSwgRGFlbW9uLCBVbmRlYWRdO1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cclxuICAgIGNvbnN0IGNvbXBUZWFtID0gY3JlYXRlUG9zaXRpb25zQ2hhcihjb21wVHlwZXMsIHRoaXMuZ2FtZVBsYXkuYm9hcmRTaXplLCB0cnVlLCBbbWF4TGV2ZWwsIGNoYXJDb3VudF0pO1xyXG4gICAgdGhpcy5jb21wVGVhbSA9IGNvbXBUZWFtO1xyXG4gICAgcmV0dXJuIGNvbXBUZWFtO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWxsUG9zaXRpb25zKGFycmF5MSwgYXJyYXkyKSB7XHJcbiAgICBpZiAoIWFycmF5MSB8fCBhcnJheTEubGVuZ3RoID09PSAwKSByZXR1cm4gYXJyYXkyO1xyXG4gICAgaWYgKCFhcnJheTIgfHwgYXJyYXkyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGFycmF5MTtcclxuICAgIHJldHVybiBhcnJheTEuY29uY2F0KGFycmF5Mik7XHJcbiAgfVxyXG5cclxuICBpbml0TmV3VGVhbXMoKSB7XHJcbiAgICB0aGlzLnVzZXJUZWFtID0gdGhpcy5nZXRVc2VyVGVhbShbdGhpcy5sZXZlbEdhbWUsIHRoaXMubGV2ZWxHYW1lXSk7XHJcbiAgICB0aGlzLmNvbXBUZWFtID0gdGhpcy5nZXRDb21wVGVhbShbdGhpcy5sZXZlbEdhbWUsIHRoaXMubGV2ZWxHYW1lXSk7XHJcbiAgICB0aGlzLmFsbFBsYXllciA9IHRoaXMuZ2V0QWxsUG9zaXRpb25zKHRoaXMudXNlclRlYW0sIHRoaXMuY29tcFRlYW0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5mbyhwbGF5ZXIpIHtcclxuICAgIHJldHVybiBgXFx1ezFGMzk2fSR7cGxheWVyLmxldmVsfSBcXHUyNjk0JHtwbGF5ZXIuYXR0YWNrfSBcXHV7MUY2RTF9JHtwbGF5ZXIuZGVmZW5jZX0gXFx1Mjc2NCR7cGxheWVyLmhlYWx0aH1gO1xyXG4gIH1cclxuXHJcbiAgbGV2ZWxVcCgpIHtcclxuICAgIGZvciAoY29uc3QgcGxheWVyIG9mIHRoaXMuYWxsUGxheWVyKSB7XHJcbiAgICAgIGNvbnN0IGNoYXIgPSBwbGF5ZXIuY2hhcmFjdGVyO1xyXG4gICAgICBjaGFyLmF0dGFjayA9IHRoaXMudXBBdHRhY2tEZWZlbmNlKGNoYXIuYXR0YWNrLCBjaGFyLmhlYWx0aCk7XHJcbiAgICAgIGNoYXIuZGVmZW5jZSA9IHRoaXMudXBBdHRhY2tEZWZlbmNlKGNoYXIuZGVmZW5jZSwgY2hhci5oZWFsdGgpO1xyXG4gICAgICBjaGFyLmxldmVsID0gKGNoYXIubGV2ZWwgKyAxKSA8PSA0ID8gY2hhci5sZXZlbCArIDEgOiBjaGFyLmxldmVsID0gNDtcclxuICAgICAgY2hhci5oZWFsdGggPSAoY2hhci5oZWFsdGggKyA4MCkgPCAxMDAgPyBjaGFyLmhlYWx0aCArIDgwIDogMTAwO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ2FtZVBsYXkuZHJhd1VpKE9iamVjdC52YWx1ZXModGhlbWVzKVt0aGlzLmxldmVsR2FtZSAtIDFdKTtcclxuICAgIGNvbnN0IG5ld1VzZXJUZWFtID0gdGhpcy5nZXRVc2VyVGVhbShbdGhpcy5sZXZlbEdhbWUgLSAxLCB0aGlzLmxldmVsR2FtZV0pO1xyXG4gICAgY29uc3QgYWxsU3RhcnRQb3NpdGlvbnMgPSBjaG9vc2VSYW5kUG9zaXRpb25zKHRoaXMuZ2FtZVBsYXkuYm9hcmRTaXplKTtcclxuICAgIG5ld1VzZXJUZWFtLmZvckVhY2goKGl0ZW0pID0+IGFsbFN0YXJ0UG9zaXRpb25zLnNwbGljZShhbGxTdGFydFBvc2l0aW9ucy5pbmRleE9mKGl0ZW0ucG9zaXRpb24pLCAxKSk7XHJcbiAgICB0aGlzLnN1cnZpdm9zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgaWYgKCFhbGxTdGFydFBvc2l0aW9ucy5pbmNsdWRlcyhpdGVtLnBvc2l0aW9uKSkge1xyXG4gICAgICAgIGNvbnN0IHJhbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbGxTdGFydFBvc2l0aW9ucy5sZW5ndGgpO1xyXG4gICAgICAgIGl0ZW0ucG9zaXRpb24gPSBhbGxTdGFydFBvc2l0aW9uc1tyYW5kXTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy51c2VyVGVhbSA9IHRoaXMuc3Vydml2b3MuY29uY2F0KG5ld1VzZXJUZWFtKTtcclxuICAgIHRoaXMuY29tcFRlYW0gPSB0aGlzLmdldENvbXBUZWFtKFt0aGlzLmxldmVsR2FtZSwgdGhpcy5sZXZlbEdhbWUgKyB0aGlzLmFsbFBsYXllci5sZW5ndGhdKTtcclxuICAgIHRoaXMuYWxsUGxheWVyID0gdGhpcy5nZXRBbGxQb3NpdGlvbnModGhpcy51c2VyVGVhbSwgdGhpcy5jb21wVGVhbSk7XHJcbiAgICB0aGlzLmNvdW50Q2xpY2sgPSAwO1xyXG4gIH1cclxuXHJcbiAgdXBBdHRhY2tEZWZlbmNlKGJlZm9yZSwgbGlmZSkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5tYXgoYmVmb3JlLCAoYmVmb3JlICogKDgwICsgbGlmZSkgLyAxMDApKSk7XHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVTdW1Qb2ludHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VyVGVhbS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLmNoYXJhY3Rlci5oZWFsdGgsIDApO1xyXG4gIH1cclxufVxyXG4iLCJjb25zdCBjdXJzb3JzID0ge1xuICBhdXRvOiAnYXV0bycsXG4gIHBvaW50ZXI6ICdwb2ludGVyJyxcbiAgY3Jvc3NoYWlyOiAnY3Jvc3NoYWlyJyxcbiAgbm90YWxsb3dlZDogJ25vdC1hbGxvd2VkJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGN1cnNvcnM7XG4iLCIvLyBjcmVhdGUgdHdvLWRpbWVuc2lvbmFsIGZpZWxkXG5mdW5jdGlvbiBnZXRUYWJsZShjZWxscywgYm9hcmRTaXplKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBzID0gMCwgZSA9IGJvYXJkU2l6ZTsgcyA8IGNlbGxzLmxlbmd0aDsgcyArPSBib2FyZFNpemUsIGUgKz0gYm9hcmRTaXplKSB7XG4gICAgcmVzdWx0LnB1c2goY2VsbHMuc2xpY2UocywgZSkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdldEF0dGFja0NlbGxzKGNlbGxzLCBpbmRleCwgbWF4UmFuZ2UpIHtcbiAgY29uc3QgYWxsb3dlZENlbGxzID0gW107XG4gIGxldCBmaW5kSW5kZXg7XG4gIGxldCByb3c7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICByb3cgPSBpO1xuICAgIGZpbmRJbmRleCA9IGNlbGxzW2ldLmZpbmRJbmRleCgoZWwpID0+IGVsID09PSBpbmRleCk7XG4gICAgaWYgKGZpbmRJbmRleCAhPT0gLTEpIGJyZWFrO1xuICB9XG4gIGZvciAobGV0IGkgPSAtbWF4UmFuZ2U7IGkgPD0gbWF4UmFuZ2U7IGkgKz0gMSkge1xuICAgIGZvciAobGV0IGogPSAtbWF4UmFuZ2U7IGogPD0gbWF4UmFuZ2U7IGogKz0gMSkge1xuICAgICAgaWYgKChyb3cgKyBpKSA+PSAwICYmIChmaW5kSW5kZXggKyBqKSA+PSAwXG4gICAgICAgICYmIChyb3cgKyBpIDwgY2VsbHMubGVuZ3RoKSAmJiAoZmluZEluZGV4ICsgaiA8IGNlbGxzLmxlbmd0aClcbiAgICAgICAgJiYgKGNlbGxzW3JvdyArIGldW2ZpbmRJbmRleCArIGpdKSAhPT0gaW5kZXgpIHtcbiAgICAgICAgYWxsb3dlZENlbGxzLnB1c2goY2VsbHNbcm93ICsgaV1bZmluZEluZGV4ICsgal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYWxsb3dlZENlbGxzO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uQ2VsbHMoY2VsbHMsIGluZGV4LCBtYXhSYW5nZSkge1xuICBjb25zdCB0cmFuc2l0Q2VsbHMgPSBbXTtcbiAgbGV0IGZpbmRJbmRleDtcbiAgbGV0IHJvdztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHJvdyA9IGk7XG4gICAgZmluZEluZGV4ID0gY2VsbHNbaV0uZmluZEluZGV4KChlbCkgPT4gZWwgPT09IGluZGV4KTtcbiAgICBpZiAoZmluZEluZGV4ICE9PSAtMSkgYnJlYWs7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMTsgaSA8PSBtYXhSYW5nZTsgaSArPSAxKSB7XG4gICAgaWYgKGZpbmRJbmRleCAtIGkgPj0gMCkge1xuICAgICAgdHJhbnNpdENlbGxzLnB1c2goY2VsbHNbcm93XVtmaW5kSW5kZXggLSBpXSk7XG4gICAgfVxuXG4gICAgaWYgKGZpbmRJbmRleCArIGkgPCBjZWxscy5sZW5ndGgpIHtcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3Jvd11bZmluZEluZGV4ICsgaV0pO1xuICAgIH1cbiAgICBpZiAocm93ICsgaSA8IGNlbGxzLmxlbmd0aCAmJiBmaW5kSW5kZXggLSBpID49IDApIHtcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyArIGldW2ZpbmRJbmRleCAtIGldKTtcbiAgICB9XG5cbiAgICBpZiAocm93ICsgaSA8IGNlbGxzLmxlbmd0aCAmJiBmaW5kSW5kZXggKyBpIDwgY2VsbHMubGVuZ3RoKSB7XG4gICAgICB0cmFuc2l0Q2VsbHMucHVzaChjZWxsc1tyb3cgKyBpXVtmaW5kSW5kZXggKyBpXSk7XG4gICAgfVxuXG4gICAgaWYgKHJvdyAtIGkgPj0gMCAmJiBmaW5kSW5kZXggLSBpID49IDApIHtcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyAtIGldW2ZpbmRJbmRleCAtIGldKTtcbiAgICB9XG5cbiAgICBpZiAocm93IC0gaSA+PSAwICYmIGZpbmRJbmRleCArIGkgPCBjZWxscy5sZW5ndGgpIHtcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyAtIGldW2ZpbmRJbmRleCArIGldKTtcbiAgICB9XG5cbiAgICBpZiAocm93IC0gaSA+PSAwKSB7XG4gICAgICB0cmFuc2l0Q2VsbHMucHVzaChjZWxsc1tyb3cgLSBpXVtmaW5kSW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAocm93ICsgaSA8IGNlbGxzLmxlbmd0aCkge1xuICAgICAgdHJhbnNpdENlbGxzLnB1c2goY2VsbHNbcm93ICsgaV1bZmluZEluZGV4XSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmFuc2l0Q2VsbHM7XG59XG5cbi8vIHJldHVybnMgY2VsbHMgYWxsb3dlZCBmb3IgYWN0aW9uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uQXR0YWNrQ2VsbHMoaW5kZXgsIGJvYXJkU2l6ZSwgbWF4UmFuZ2UsIGF0dGFjayA9IGZhbHNlKSB7XG4gIGNvbnN0IGFycmF5Q2VsbHMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZFNpemUgKiogMjsgaSArPSAxKSB7XG4gICAgYXJyYXlDZWxscy5wdXNoKGkpO1xuICB9XG5cbiAgY29uc3QgdGFibGVDZWxscyA9IGdldFRhYmxlKGFycmF5Q2VsbHMsIGJvYXJkU2l6ZSk7XG4gIGlmIChhdHRhY2spIHtcbiAgICByZXR1cm4gZ2V0QXR0YWNrQ2VsbHModGFibGVDZWxscywgaW5kZXgsIG1heFJhbmdlKTtcbiAgfVxuICByZXR1cm4gZ2V0VHJhbnNpdGlvbkNlbGxzKHRhYmxlQ2VsbHMsIGluZGV4LCBtYXhSYW5nZSk7XG59XG4iLCIvKipcbiAqIEVudHJ5IHBvaW50IG9mIGFwcDogZG9uJ3QgY2hhbmdlIHRoaXNcbiAqL1xuaW1wb3J0IEdhbWVQbGF5IGZyb20gJy4vR2FtZVBsYXknO1xuaW1wb3J0IEdhbWVDb250cm9sbGVyIGZyb20gJy4vR2FtZUNvbnRyb2xsZXInO1xuaW1wb3J0IEdhbWVTdGF0ZVNlcnZpY2UgZnJvbSAnLi9HYW1lU3RhdGVTZXJ2aWNlJztcblxuY29uc3QgZ2FtZVBsYXkgPSBuZXcgR2FtZVBsYXkoKTtcbmdhbWVQbGF5LmJpbmRUb0RPTShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZ2FtZS1jb250YWluZXInKSk7XG5cbmNvbnN0IHN0YXRlU2VydmljZSA9IG5ldyBHYW1lU3RhdGVTZXJ2aWNlKGxvY2FsU3RvcmFnZSk7XG5jb25zdCBnYW1lQ3RybCA9IG5ldyBHYW1lQ29udHJvbGxlcihnYW1lUGxheSwgc3RhdGVTZXJ2aWNlKTtcbmdhbWVDdHJsLmluaXQoKTtcbi8vIGRvbid0IHdyaXRlIHlvdXIgY29kZSBoZXJlXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lU3RhdGVTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3Ioc3RvcmFnZSkge1xuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gIH1cblxuICBzYXZlKHN0YXRlKSB7XG4gICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oJ3N0YXRlJywgSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXRJdGVtKCdzdGF0ZScpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RhdGUnKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB0aGVtZXMgZnJvbSAnLi90aGVtZXMnO1xuaW1wb3J0IEdhbWVTdGF0ZSBmcm9tICcuL0dhbWVTdGF0ZSc7XG5pbXBvcnQgR2FtZVBsYXkgZnJvbSAnLi9HYW1lUGxheSc7XG5pbXBvcnQgY3Vyc29ycyBmcm9tICcuL2N1cnNvcnMnO1xuaW1wb3J0IGdldFRyYW5zaXRpb25BdHRhY2tDZWxscyBmcm9tICcuL3RyYW5zaXRpb25BdHRhY2tDZWxscyc7XG5pbXBvcnQgZG9BdHRhY2tDb21wIGZyb20gJy4vZG9BdHRhY2tDb21wJztcbmltcG9ydCB7IHJlc3RvcmVDaGFyIH0gZnJvbSAnLi9jcmVhdGVQb3NpdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGdhbWVQbGF5LCBzdGF0ZVNlcnZpY2UpIHtcbiAgICB0aGlzLmdhbWVQbGF5ID0gZ2FtZVBsYXk7XG4gICAgdGhpcy5zdGF0ZVNlcnZpY2UgPSBzdGF0ZVNlcnZpY2U7XG4gICAgdGhpcy5nYW1lU3RhdGUgPSBuZXcgR2FtZVN0YXRlKHRoaXMuZ2FtZVBsYXkpO1xuXG4gICAgdGhpcy5vbkNlbGxDbGljayA9IHRoaXMub25DZWxsQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2VsbEVudGVyID0gdGhpcy5vbkNlbGxFbnRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DZWxsTGVhdmUgPSB0aGlzLm9uQ2VsbExlYXZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5uZXdHYW1lID0gdGhpcy5uZXdHYW1lLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zYXZlR2FtZSA9IHRoaXMuc2F2ZUdhbWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmxvYWRHYW1lID0gdGhpcy5sb2FkR2FtZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICAvLyBUT0RPOiBhZGQgZXZlbnQgbGlzdGVuZXJzIHRvIGdhbWVQbGF5IGV2ZW50c1xuICAgIC8vIFRPRE86IGxvYWQgc2F2ZWQgc3RhdGVkIGZyb20gc3RhdGVTZXJ2aWNlXG4gICAgdGhpcy5ldmVudHMoKTtcbiAgICB0aGlzLnVwZGF0ZVBpY3R1cmUoKTtcbiAgfVxuXG4gIGV2ZW50cygpIHtcbiAgICB0aGlzLmdhbWVQbGF5LmFkZENlbGxFbnRlckxpc3RlbmVyKHRoaXMub25DZWxsRW50ZXIpO1xuICAgIHRoaXMuZ2FtZVBsYXkuYWRkQ2VsbExlYXZlTGlzdGVuZXIodGhpcy5vbkNlbGxMZWF2ZSk7XG4gICAgdGhpcy5nYW1lUGxheS5hZGRDZWxsQ2xpY2tMaXN0ZW5lcih0aGlzLm9uQ2VsbENsaWNrKTtcbiAgICB0aGlzLmdhbWVQbGF5LmFkZE5ld0dhbWVMaXN0ZW5lcih0aGlzLm5ld0dhbWUpO1xuICAgIHRoaXMuZ2FtZVBsYXkuYWRkU2F2ZUdhbWVMaXN0ZW5lcih0aGlzLnNhdmVHYW1lKTtcbiAgICB0aGlzLmdhbWVQbGF5LmFkZExvYWRHYW1lTGlzdGVuZXIodGhpcy5sb2FkR2FtZSk7XG4gIH1cblxuICBuZXdHYW1lKCkge1xuICAgIHRoaXMuZ2FtZVN0YXRlLmhpc3RvcnkucHVzaCh7XG4gICAgICBsZXZlbEdhbWU6IHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSxcbiAgICAgIHBvaW50czogdGhpcy5nYW1lU3RhdGUucG9pbnRzLFxuICAgIH0pO1xuICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2NrID0gZmFsc2U7XG4gICAgdGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lID0gMTtcbiAgICB0aGlzLmdhbWVTdGF0ZS5wb2ludHMgPSAwO1xuICAgIHRoaXMuZ2FtZVN0YXRlLmNvdW50Q2xpY2sgPSAwO1xuXG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuZ2FtZVN0YXRlLmluaXROZXdUZWFtcygpO1xuICAgIHRoaXMudXBkYXRlUGljdHVyZSgpO1xuICB9XG5cbiAgc2F2ZUdhbWUoKSB7XG4gICAgdGhpcy5zdGF0ZVNlcnZpY2Uuc2F2ZSh0aGlzLmdhbWVTdGF0ZSk7XG4gICAgR2FtZVBsYXkuc2hvd01lc3NhZ2UoJ1lvdXIgZ2FtZSBoYXMgc2F2ZWQhJywgJzk5OTcnKTtcbiAgfVxuXG4gIGxvYWRHYW1lKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBsb2FkR2FtZVN0YXRlID0gdGhpcy5zdGF0ZVNlcnZpY2UubG9hZCgpO1xuXG4gICAgICBpZiAobG9hZEdhbWVTdGF0ZSkge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG4gICAgICAgIGxvYWRHYW1lU3RhdGUuYmxvY2sgPT09IHRydWUgPyB0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWUgPSAobG9hZEdhbWVTdGF0ZS5sZXZlbEdhbWUgLSAxKSA6IHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSA9IGxvYWRHYW1lU3RhdGUubGV2ZWxHYW1lO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmNvdW50Q2xpY2sgPSBsb2FkR2FtZVN0YXRlLmNvdW50Q2xpY2s7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuaGlzdG9yeSA9IGxvYWRHYW1lU3RhdGUuaGlzdG9yeTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pc01vdmUgPSBsb2FkR2FtZVN0YXRlLmlzTW92ZTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9jayA9IGxvYWRHYW1lU3RhdGUuYmxvY2s7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUucG9pbnRzID0gbG9hZEdhbWVTdGF0ZS5wb2ludHM7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUudXNlclRlYW0gPSBbXTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbSA9IFtdO1xyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzdGFydEFjdENoYXIgPSByZXN0b3JlQ2hhcihsb2FkR2FtZVN0YXRlLmFjdGl2ZUNoYXIpO1xyXG4gICAgICAgIGxvYWRHYW1lU3RhdGUudXNlclRlYW0uZm9yRWFjaCgobykgPT4gdGhpcy5nYW1lU3RhdGUudXNlclRlYW0ucHVzaChyZXN0b3JlQ2hhcihvKSkpO1xyXG4gICAgICAgIGxvYWRHYW1lU3RhdGUuY29tcFRlYW0uZm9yRWFjaCgobykgPT4gdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0ucHVzaChyZXN0b3JlQ2hhcihvKSkpO1xyXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYWxsUGxheWVyID0gdGhpcy5nYW1lU3RhdGUuZ2V0QWxsUG9zaXRpb25zKHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtLCB0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQaWN0dXJlKCk7XHJcbiAgICAgICAgdGhpcy5yZWFjdE9uQ2xpY2socmVzdGFydEFjdENoYXIsIHJlc3RhcnRBY3RDaGFyLnBvc2l0aW9uLCBbJ2Jvd21hbicsICdzd29yZHNtYW4nLCAnbWFnaWNpYW4nXSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5wb2ludHMpIHtcclxuICAgICAgICAgIEdhbWVQbGF5LnNob3dQb2ludHMoYFlvdXIgcG9pbnRzICR7dGhpcy5nYW1lU3RhdGUucG9pbnRzfWAsICcxMjgwNzYnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgR2FtZVBsYXkuc2hvd1BvaW50cygnVGhlcmVcXCdzIG5vIHBvaW50cy4gXFxuIEl0XFwncyB0aGUgZmlyc3Qgcm91bmQnLCAnMTI4MDgzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIEdhbWVQbGF5LnNob3dFcnJvcignVGhlcmVgcyBubyBnYW1lIGluIG1lbW9yeScsICcxMjgwNzUnKTtcclxuICAgICAgdGhpcy5uZXdHYW1lKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBvbkNlbGxDbGljayhpbmRleCkge1xyXG4gICAgLy8gVE9ETzogcmVhY3QgdG8gY2xpY2tcclxuICAgIGlmICghdGhpcy5nYW1lU3RhdGUuYmxvY2spIHtcclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIpIHtcclxuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QuZ3JlZW4gPT09IGluZGV4KSB7XHJcbiAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyLnBvc2l0aW9uID0gaW5kZXg7XHJcbiAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jb3VudENsaWNrICs9IDE7XHJcbiAgICAgICAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LnJlZCA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgIC8vIGRvIGF0dGFjayB1c2VyXHJcbiAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pc01vdmUgPSAndXNlcic7XHJcbiAgICAgICAgICBjb25zdCByZXNwb25zZURvRGFtYWdlID0gYXdhaXQgdGhpcy5kb0RhbWFnZShpbmRleCk7XHJcbiAgICAgICAgICBpZiAocmVzcG9uc2VEb0RhbWFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jb3VudENsaWNrICs9IDE7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBsYXkucmVkcmF3UG9zaXRpb25zKHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllcik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUuY29tcFRlYW0ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lICs9IDE7XHJcbiAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucG9pbnRzICs9IHRoaXMuZ2FtZVN0YXRlLmNhbGN1bGF0ZVN1bVBvaW50cygpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcclxuLypcclxuICAgICAgICAgICAgICAvLyBzdG9wIGdhbWVcclxuICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lID49IDUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnBvaW50ID0gdGhpcy5nYW1lU3RhdGUuY2FsY3VsYXRlU3VtUG9pbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgR2FtZVBsYXkuc2hvd01lc3NhZ2UoYFlvdSB3aW4hIFlvdXIgcG9pbnRzIGFyZSAke3RoaXMuZ2FtZVN0YXRlLnBvaW50fWAsICcxMjc4ODEnKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgfVxyXG4gKi9cclxuICAgICAgICAgICAgICAvLyBsZXZlbCB1cFxyXG4gICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnN1cnZpdm9zID0gdGhpcy5nYW1lU3RhdGUudXNlclRlYW07XHJcblxyXG4gICAgICAgICAgICAgIEdhbWVQbGF5LnNob3dNZXNzYWdlKGBMZXZlbCB1cCEgWW91ciB0b3RhbCBwb2ludHMgYXJlICR7dGhpcy5nYW1lU3RhdGUucG9pbnRzfWAsICc5OTk2Jyk7XHJcbiAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUubGV2ZWxVcCgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2FtZVBsYXkucmVkcmF3UG9zaXRpb25zKHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHBsYXllciA9IHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllci5maW5kKChlbCkgPT4gZWwucG9zaXRpb24gPT09IGluZGV4KTtcclxuICAgICAgdGhpcy5yZWFjdE9uQ2xpY2socGxheWVyLCBpbmRleCwgWydib3dtYW4nLCAnc3dvcmRzbWFuJywgJ21hZ2ljaWFuJ10pO1xyXG5cclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmNvdW50Q2xpY2sgPj0gMSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXJVc2VyID0gdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pc01vdmUgPSAnY29tcCc7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEb0F0dGFja0NvbXAgPSBhd2FpdCBkb0F0dGFja0NvbXAodGhpcyk7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlRG9BdHRhY2tDb21wKSB7XHJcbiAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jb3VudENsaWNrID0gMDtcclxuICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmlzTW92ZSA9ICd1c2VyJztcclxuXHJcbiAgICAgICAgICBpZiAodGhpcy5pc0RlYWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyID0gdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhclVzZXI7XHJcbiAgICAgICAgICAgIHRoaXMucmVhY3RPbkNsaWNrKHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIsIHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIucG9zaXRpb24sIFsnYm93bWFuJywgJ3N3b3Jkc21hbicsICdtYWdpY2lhbiddKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUuYWxsUGxheWVyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQ2VsbEVudGVyKGluZGV4KSB7XHJcbiAgICAvLyBUT0RPOiByZWFjdCB0byBtb3VzZSBlbnRlclxyXG5cclxuICAgIC8vIHNob3cgaW5mb3JtYXRpb24gYWJvdXQgcGxheWVyXHJcbiAgICBpZiAoIXRoaXMuZ2FtZVN0YXRlLmJsb2NrKSB7XHJcbiAgICAgIGNvbnN0IHBsYXllciA9IHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllci5maW5kKChlbCkgPT4gZWwucG9zaXRpb24gPT09IGluZGV4KTtcclxuICAgICAgaWYgKHBsYXllcikge1xyXG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuc2hvd0NlbGxUb29sdGlwKHRoaXMuZ2FtZVN0YXRlLmdldEluZm8ocGxheWVyLmNoYXJhY3RlciksIGluZGV4KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gc2hvdyBjZWxscyB0aGF0IHBsYXllciBjYW4gZ28gdG9cclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIpIHtcclxuICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLnBvaW50ZXIpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUudHJhbnNpdGlvbkNlbGxzLmZpbmQoKGl0ZW0pID0+IGl0ZW0gPT09IGluZGV4KVxyXG4gICAgICAgICAgJiYgIXRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtLmZpbmQoKGl0ZW0pID0+IGl0ZW0ucG9zaXRpb24gPT09IGluZGV4KVxyXG4gICAgICAgICAgJiYgIXRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtLmZpbmQoKGl0ZW0pID0+IGl0ZW0ucG9zaXRpb24gPT09IGluZGV4KSkge1xyXG4gICAgICAgICAgdGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QuZ3JlZW4gPSBpbmRleDtcclxuICAgICAgICAgIHRoaXMuZ2FtZVBsYXkuc2VsZWN0Q2VsbChpbmRleCwgJ2dyZWVuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUuYXR0YWNrQ2VsbHMuZmluZCgoaXRlbSkgPT4gaXRlbSA9PT0gaW5kZXgpXHJcbiAgICAgICAgICAmJiB0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbS5maW5kKChpdGVtKSA9PiBpdGVtLnBvc2l0aW9uID09PSBpbmRleCkpIHtcclxuICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LnJlZCA9IGluZGV4O1xyXG4gICAgICAgICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKGluZGV4LCAncmVkJyk7XHJcbiAgICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLmNyb3NzaGFpcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNlbGxMZWF2ZShpbmRleCkge1xyXG4gICAgdGhpcy5nYW1lUGxheS5oaWRlQ2VsbFRvb2x0aXAoaW5kZXgpO1xyXG4gICAgLy8gVE9ETzogcmVhY3QgdG8gbW91c2UgbGVhdmVcclxuICAgIGlmICghdGhpcy5nYW1lU3RhdGUuYmxvY2spIHtcclxuICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3RlZC1ncmVlbicpKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QuZ3JlZW4pO1xyXG5cclxuICAgICAgICAvLyBzaG93IGNlbGxzIHdoaXQgb3Bwb25lbnRzIHRoYXQgcGxheWVyIGNhIGRvIG5vdGhpbmdcclxuICAgICAgICBpZiAoIXRoaXMuZ2FtZVN0YXRlLmF0dGFja0NlbGxzLmZpbmQoKGl0ZW0pID0+IGl0ZW0gPT09IGluZGV4KVxyXG4gICAgICAgICAgJiYgdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0uZmluZCgoaXRlbSkgPT4gaXRlbS5wb3NpdGlvbiA9PT0gaW5kZXgpKSB7XHJcbiAgICAgICAgICB0aGlzLmdhbWVQbGF5LmRlc2VsZWN0Q2VsbCh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC5ncmVlbik7XHJcbiAgICAgICAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLm5vdGFsbG93ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2hvdyBjZWxscyB0aGF0IHBsYXllciBhdHRhY2sgZ28gdG9cclxuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLXJlZCcpKSB7XHJcbiAgICAgICAgICB0aGlzLmdhbWVQbGF5LmRlc2VsZWN0Q2VsbCh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC5yZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVhY3RPbkNsaWNrKG9iaiwgbnVtLCBhcnJheVR5cGVzKSB7XHJcbiAgICBpZiAob2JqKSB7XHJcbiAgICAgIGlmIChvYmouY2hhcmFjdGVyLnR5cGUgPT09IGFycmF5VHlwZXNbMF0gfHwgb2JqLmNoYXJhY3Rlci50eXBlID09PSBhcnJheVR5cGVzWzFdIHx8IG9iai5jaGFyYWN0ZXIudHlwZSA9PT0gYXJyYXlUeXBlc1syXSkge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VsZWN0ZWQteWVsbG93JykpIHtcclxuICAgICAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LnllbGxvdyk7XHJcbiAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC55ZWxsb3cgPSBudW07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0ID0geyB5ZWxsb3c6IG51bSB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nYW1lUGxheS5zZWxlY3RDZWxsKG51bSk7XHJcbiAgICAgICAgdGhpcy5nYW1lUGxheS5ib2FyZEVsLmNsYXNzTGlzdC5hZGQoJ21vdW50YWluJyk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhciA9IG9iajtcclxuICAgICAgICBsZXQgbWF4UmFuZ2U7XHJcbiAgICAgICAgbGV0IG1heEF0dGFjaztcclxuICAgICAgICBzd2l0Y2ggKG9iai5jaGFyYWN0ZXIudHlwZSkge1xyXG4gICAgICAgICAgY2FzZSAndmFtcGlyZSc6XHJcbiAgICAgICAgICBjYXNlICdib3dtYW4nOlxyXG4gICAgICAgICAgICBtYXhSYW5nZSA9IDI7XHJcbiAgICAgICAgICAgIG1heEF0dGFjayA9IDI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAndW5kZWFkJzpcclxuICAgICAgICAgIGNhc2UgJ3N3b3Jkc21hbic6XHJcbiAgICAgICAgICAgIG1heFJhbmdlID0gNDtcclxuICAgICAgICAgICAgbWF4QXR0YWNrID0gMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdkYWVtb24nOlxyXG4gICAgICAgICAgY2FzZSAnbWFnaWNpYW4nOlxyXG4gICAgICAgICAgICBtYXhSYW5nZSA9IDE7XHJcbiAgICAgICAgICAgIG1heEF0dGFjayA9IDQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgbWF4UmFuZ2UgPSAxO1xyXG4gICAgICAgICAgICBtYXhBdHRhY2sgPSAxO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnRyYW5zaXRpb25DZWxscyA9IGdldFRyYW5zaXRpb25BdHRhY2tDZWxscyhudW0sIHRoaXMuZ2FtZVBsYXkuYm9hcmRTaXplLCBtYXhSYW5nZSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYXR0YWNrQ2VsbHMgPSBnZXRUcmFuc2l0aW9uQXR0YWNrQ2VsbHMobnVtLCB0aGlzLmdhbWVQbGF5LmJvYXJkU2l6ZSwgbWF4QXR0YWNrLCB0cnVlKTtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdFxyXG4gICAgICAgICYmICF0aGlzLmdhbWVTdGF0ZS5hdHRhY2tDZWxscy5maW5kKChpdGVtKSA9PiBpdGVtID09PSBudW0pXHJcbiAgICAgICAgJiYgdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0uZmluZCgoaXRlbSkgPT4gaXRlbS5wb3NpdGlvbiA9PT0gbnVtKSkge1xyXG4gICAgICAgIEdhbWVQbGF5LnNob3dFcnJvcihcIkl0IGNhbid0IGJlIGRvbmVcIiwgJzk5NDAnKTtcclxuICAgICAgfSBlbHNlIGlmICghdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhcikge1xyXG4gICAgICAgIEdhbWVQbGF5LnNob3dFcnJvcignVGhpcyBpc25gdCB5b3VyIGNoYXJhY3RlcicsICc5OTk1Jyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGRvRGFtYWdlKGluZGV4KSB7XHJcbiAgICBjb25zdCBhdHRhY2tpbmcgPSB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyLmNoYXJhY3Rlci5hdHRhY2s7XHJcbiAgICBjb25zdCBvcHBvbmVudCA9IHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllci5maW5kKChlbCkgPT4gZWwucG9zaXRpb24gPT09IGluZGV4KTtcclxuICAgIGNvbnN0IGRhbWFnZSA9IE1hdGgucm91bmQoTWF0aC5tYXgoYXR0YWNraW5nIC0gb3Bwb25lbnQuY2hhcmFjdGVyLmRlZmVuY2UsIGF0dGFja2luZyAqIDAuMykpO1xyXG4gICAgY29uc3QgcmVzcG9uc2VTaG93RGFtYWdlID0gYXdhaXQgdGhpcy5nYW1lUGxheS5zaG93RGFtYWdlKGluZGV4LCBkYW1hZ2UpO1xyXG5cclxuICAgIGlmIChyZXNwb25zZVNob3dEYW1hZ2UpIHtcclxuICAgICAgb3Bwb25lbnQuY2hhcmFjdGVyLmhlYWx0aCA9IG9wcG9uZW50LmNoYXJhY3Rlci5oZWFsdGggLSBkYW1hZ2U7XHJcbiAgICAgIHRoaXMuY2hlY2tIZWFsdGhSZW1vdmVEZWFkKG9wcG9uZW50KTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjaGVja0hlYWx0aFJlbW92ZURlYWQocGxheWVyKSB7XHJcbiAgICBpZiAocGxheWVyLmNoYXJhY3Rlci5oZWFsdGggPD0gMCkge1xyXG4gICAgICBpZiAodGhpcy5nYW1lU3RhdGUuaXNNb3ZlID09PSAnY29tcCcpIHtcclxuICAgICAgICBjb25zdCBmaW5kSW5kZXggPSB0aGlzLmdhbWVTdGF0ZS51c2VyVGVhbS5maW5kSW5kZXgoKGl0ZW0pID0+IHBsYXllci5wb3NpdGlvbiA9PT0gaXRlbS5wb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUudXNlclRlYW0uc3BsaWNlKGZpbmRJbmRleCwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5pc01vdmUgPT09ICd1c2VyJykge1xyXG4gICAgICAgIGNvbnN0IGZpbmRJbmRleCA9IHRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtLmZpbmRJbmRleCgoaXRlbSkgPT4gcGxheWVyLnBvc2l0aW9uID09PSBpdGVtLnBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbS5zcGxpY2UoZmluZEluZGV4LCAxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5nYW1lU3RhdGUuYWxsUGxheWVyID0gdGhpcy5nYW1lU3RhdGUuZ2V0QWxsUG9zaXRpb25zKHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtLCB0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXNldCgpIHtcclxuICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdCkge1xyXG4gICAgICBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QueWVsbG93KSB0aGlzLmdhbWVQbGF5LmRlc2VsZWN0Q2VsbCh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC55ZWxsb3cpO1xyXG4gICAgICBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QucmVkKSB0aGlzLmdhbWVQbGF5LmRlc2VsZWN0Q2VsbCh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC5yZWQpO1xyXG4gICAgICBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QuZ3JlZW4pIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LmdyZWVuKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdhbWVQbGF5LnNldEN1cnNvcihjdXJzb3JzLmF1dG8pO1xyXG4gIH1cclxuXHJcbiAgaXNEZWFkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllci5maW5kKGUgPT4gZS5wb3NpdGlvbiA9PT0gdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhclVzZXIucG9zaXRpb24pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlUGljdHVyZSgpIHtcclxuICAgIHRoaXMuZ2FtZVBsYXkuZHJhd1VpKE9iamVjdC52YWx1ZXModGhlbWVzKVt0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWUgLSAxXSk7XHJcbiAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgR2FtZVBsYXkgZnJvbSAnLi9HYW1lUGxheSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGRvQXR0YWNrQ29tcChvYmopIHtcbiAgLyogZXNsaW50LWRpc2FibGUgKi9cclxuICBjb25zdCBhY3RpdmVDb21wID0gb2JqLmdhbWVTdGF0ZS5jb21wVGVhbS5yZWR1Y2UoKGFjYywgY3VycikgPT4gKGFjYy5jaGFyYWN0ZXIuYXR0YWNrID4gY3Vyci5jaGFyYWN0ZXIuYXR0YWNrID8gYWNjIDogY3VycikpO1xyXG4gIG9iai5nYW1lU3RhdGUuYWN0aXZlQ2hhciA9IGFjdGl2ZUNvbXA7XHJcbiAgb2JqLnJlYWN0T25DbGljayhhY3RpdmVDb21wLCBhY3RpdmVDb21wLnBvc2l0aW9uLCBbJ2RhZW1vbicsICd1bmRlYWQnLCAndmFtcGlyZSddKTtcclxuXHJcbiAgbGV0IGlzR29hbCA9IGZhbHNlO1xyXG4gIGxldCB1c2VyUG9zaXRpb247XHJcbiAgZm9yIChjb25zdCBpdGVtIG9mIG9iai5nYW1lU3RhdGUudXNlclRlYW0pIHtcclxuICAgIGlmIChvYmouZ2FtZVN0YXRlLmF0dGFja0NlbGxzLmluY2x1ZGVzKGl0ZW0ucG9zaXRpb24pKSB7XHJcbiAgICAgIGlzR29hbCA9IHRydWU7XHJcbiAgICAgIHVzZXJQb3NpdGlvbiA9IGl0ZW0ucG9zaXRpb247XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoaXNHb2FsKSB7XHJcbiAgICBjb25zdCByZXNwb25zZURvRGFtYWdlID0gYXdhaXQgb2JqLmRvRGFtYWdlKHVzZXJQb3NpdGlvbik7XHJcbiAgICBpZiAocmVzcG9uc2VEb0RhbWFnZSkge1xyXG4gICAgICBpZiAob2JqLmdhbWVTdGF0ZS51c2VyVGVhbS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAvLyBzdG9wIGdhbWVcclxuICAgICAgICBvYmouZ2FtZVN0YXRlLmJsb2NrID0gdHJ1ZTtcclxuICAgICAgICBHYW1lUGxheS5zaG93TWVzc2FnZSgnWW91IGxvc2UhJywgJzEyOTMzNScpO1xyXG4gICAgICB9XHJcbiAgICAgIG9iai5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnMob2JqLmdhbWVTdGF0ZS5hbGxQbGF5ZXIpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBsZXQgcmFuZDtcclxuICAgIGxldCBpc1BsYXllcjtcclxuICAgIGRvIHtcclxuICAgICAgcmFuZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG9iai5nYW1lU3RhdGUudHJhbnNpdGlvbkNlbGxzLmxlbmd0aCk7XHJcbiAgICAgIGlzUGxheWVyID0gb2JqLmdhbWVTdGF0ZS5hbGxQbGF5ZXIuZmluZChvID0+IG8ucG9zaXRpb24gPT09IHJhbmQpO1xyXG4gICAgfSB3aGlsZSAoaXNQbGF5ZXIpO1xyXG5cclxuICAgIGFjdGl2ZUNvbXAucG9zaXRpb24gPSBvYmouZ2FtZVN0YXRlLnRyYW5zaXRpb25DZWxsc1tyYW5kXTtcclxuICAgIG9iai5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnMob2JqLmdhbWVTdGF0ZS5hbGxQbGF5ZXIpO1xyXG4gIH1cclxuICBvYmouZ2FtZVN0YXRlLmFjdGl2ZUNoYXIgPSB1bmRlZmluZWQ7XHJcbiAgb2JqLnJlc2V0KCk7XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJjYWxjVGlsZVR5cGUiLCJpbmRleCIsImJvYXJkU2l6ZSIsImkiLCJzaG93TW9kYWwiLCJtZXNzYWdlIiwidW5pY29kZSIsIm1vZGFsIiwib3B0aW9ucyIsImVsZW1Nb2RhbCIsImV2ZW50U2hvd01vZGFsIiwiZXZlbnRIaWRlTW9kYWwiLCJoaWRpbmciLCJkZXN0cm95ZWQiLCJhbmltYXRpb25TcGVlZCIsImhpZGVNb2RhbCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsInNldFRpbWVvdXQiLCJkb2N1bWVudCIsImRpc3BhdGNoRXZlbnQiLCJoYW5kbGVyQ2xvc2VNb2RhbCIsImUiLCJ0YXJnZXQiLCJkYXRhc2V0IiwiZGlzbWlzcyIsIm9wdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJtb2RhbEhUTUwiLCJtb2RhbEZvb3RlckhUTUwiLCJyZXBsYWNlIiwidGl0bGUiLCJjb250ZW50IiwiZm9vdGVyQnV0dG9ucyIsImxlbmd0aCIsIm1vZGFsRm9vdGVyQnV0dG9uIiwiY2xhc3MiLCJoYW5kbGVyIiwidGV4dCIsImlubmVySFRNTCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZU1vZGFsIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwic2hvdyIsImhpZGUiLCJkZXN0cm95IiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldENvbnRlbnQiLCJodG1sIiwicXVlcnlTZWxlY3RvciIsInNldFRpdGxlIiwibW9kYWxGdW5jIiwiR2FtZVBsYXkiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJjb250YWluZXIiLCJib2FyZEVsIiwiY2VsbHMiLCJjZWxsQ2xpY2tMaXN0ZW5lcnMiLCJjZWxsRW50ZXJMaXN0ZW5lcnMiLCJjZWxsTGVhdmVMaXN0ZW5lcnMiLCJuZXdHYW1lTGlzdGVuZXJzIiwic2F2ZUdhbWVMaXN0ZW5lcnMiLCJsb2FkR2FtZUxpc3RlbmVycyIsImJpbmRUb0RPTSIsIkhUTUxFbGVtZW50IiwiRXJyb3IiLCJkcmF3VWkiLCJ0aGVtZSIsImNoZWNrQmluZGluZyIsIm5ld0dhbWVFbCIsInNhdmVHYW1lRWwiLCJsb2FkR2FtZUVsIiwiZXZlbnQiLCJvbk5ld0dhbWVDbGljayIsIm9uU2F2ZUdhbWVDbGljayIsIm9uTG9hZEdhbWVDbGljayIsImNlbGxFbCIsIm9uQ2VsbEVudGVyIiwib25DZWxsTGVhdmUiLCJvbkNlbGxDbGljayIsIkFycmF5IiwiZnJvbSIsImNoaWxkcmVuIiwicmVkcmF3UG9zaXRpb25zIiwicG9zaXRpb25zIiwiY2VsbCIsInBvc2l0aW9uIiwiY2hhckVsIiwiY2hhcmFjdGVyIiwidHlwZSIsImhlYWx0aEVsIiwiaGVhbHRoSW5kaWNhdG9yRWwiLCJoZWFsdGgiLCJzdHlsZSIsIndpZHRoIiwiYWRkQ2VsbEVudGVyTGlzdGVuZXIiLCJjYWxsYmFjayIsInB1c2giLCJhZGRDZWxsTGVhdmVMaXN0ZW5lciIsImFkZENlbGxDbGlja0xpc3RlbmVyIiwiYWRkTmV3R2FtZUxpc3RlbmVyIiwiYWRkU2F2ZUdhbWVMaXN0ZW5lciIsImFkZExvYWRHYW1lTGlzdGVuZXIiLCJwcmV2ZW50RGVmYXVsdCIsImluZGV4T2YiLCJjdXJyZW50VGFyZ2V0IiwiZm9yRWFjaCIsIm8iLCJjYWxsIiwic3RhdGljIiwic2VsZWN0Q2VsbCIsImNvbG9yIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiZGVzZWxlY3RDZWxsIiwiZmlsdGVyIiwic3RhcnRzV2l0aCIsInNob3dDZWxsVG9vbHRpcCIsImhpZGVDZWxsVG9vbHRpcCIsInNob3dEYW1hZ2UiLCJkYW1hZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImRhbWFnZUVsIiwidGV4dENvbnRlbnQiLCJzZXRDdXJzb3IiLCJjdXJzb3IiLCJwcmFpcmllIiwiZGVzZXJ0IiwiYXJjdGljIiwibW91bnRhaW4iLCJDaGFyYWN0ZXIiLCJsZXZlbCIsIm5hbWUiLCJhdHRhY2siLCJkZWZlbmNlIiwiQm93bWFuIiwic3VwZXIiLCJTd29yZHNtYW4iLCJNYWdpY2lhbiIsIlZhbXBpcmUiLCJEYWVtb24iLCJVbmRlYWQiLCJUZWFtIiwiY2hhcmFjdGVycyIsIlBvc2l0aW9uZWRDaGFyYWN0ZXIiLCJjaG9vc2VSYW5kUG9zaXRpb25zIiwiY2hvb3NlUmFuZFBvc2l0aW9uIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY3JlYXRlUG9zaXRpb25zQ2hhciIsInBsYXllclR5cGVzIiwib3Bwb25lbnQiLCJfcmVmIiwibWF4TGV2ZWwiLCJjaGFyQ291bnQiLCJ0ZWFtIiwiYWxsb3dlZFR5cGVzIiwiY2hhcmFjdGVyQ291bnQiLCJwbGF5ZXJHZW5lcmF0b3IiLCJyYW5kb21MZXZlbCIsIlJhbmRvbUNsYXNzIiwiY2hhcmFjdGVyR2VuZXJhdG9yIiwibmV4dCIsInZhbHVlIiwiZ2VuZXJhdGVUZWFtIiwicmFuZFBvc2l0aW9ucyIsImNoYXIiLCJyYW5kUG9zaXRpb24iLCJpc1Bvc2l0aW9uVW5pcXVlIiwiZmluZCIsImVsIiwicmVzdG9yZUNoYXIiLCJvYmoiLCJDaGFyQ2xhc3MiLCJyZXN0b3JlUG9zaXRpb25lZENoYXIiLCJHYW1lU3RhdGUiLCJnYW1lUGxheSIsImxldmVsR2FtZSIsInVzZXJUZWFtIiwiY29tcFRlYW0iLCJhbGxQbGF5ZXIiLCJpc01vdmUiLCJjb3VudENsaWNrIiwic3Vydml2b3MiLCJoaXN0b3J5IiwicG9pbnRzIiwiYmxvY2siLCJpbml0TmV3VGVhbXMiLCJnZXRVc2VyVGVhbSIsImdldENvbXBUZWFtIiwiX3JlZjIiLCJnZXRBbGxQb3NpdGlvbnMiLCJhcnJheTEiLCJhcnJheTIiLCJjb25jYXQiLCJnZXRJbmZvIiwicGxheWVyIiwibGV2ZWxVcCIsInVwQXR0YWNrRGVmZW5jZSIsIk9iamVjdCIsInZhbHVlcyIsInRoZW1lcyIsIm5ld1VzZXJUZWFtIiwiYWxsU3RhcnRQb3NpdGlvbnMiLCJpdGVtIiwic3BsaWNlIiwiaW5jbHVkZXMiLCJyYW5kIiwiYmVmb3JlIiwibGlmZSIsIm1heCIsImNhbGN1bGF0ZVN1bVBvaW50cyIsInJlZHVjZSIsImEiLCJiIiwiZ2V0VHJhbnNpdGlvbkF0dGFja0NlbGxzIiwibWF4UmFuZ2UiLCJhcnJheUNlbGxzIiwidGFibGVDZWxscyIsInJlc3VsdCIsInMiLCJzbGljZSIsImdldFRhYmxlIiwiYWxsb3dlZENlbGxzIiwiZmluZEluZGV4Iiwicm93IiwiaiIsImdldEF0dGFja0NlbGxzIiwidHJhbnNpdENlbGxzIiwiZ2V0VHJhbnNpdGlvbkNlbGxzIiwic3RhdGVTZXJ2aWNlIiwic3RvcmFnZSIsInNhdmUiLCJzdGF0ZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwibG9hZCIsInBhcnNlIiwiZ2V0SXRlbSIsImxvY2FsU3RvcmFnZSIsImdhbWVDdHJsIiwiZ2FtZVN0YXRlIiwiYmluZCIsIm5ld0dhbWUiLCJzYXZlR2FtZSIsImxvYWRHYW1lIiwiaW5pdCIsImV2ZW50cyIsInVwZGF0ZVBpY3R1cmUiLCJyZXNldCIsInNob3dNZXNzYWdlIiwibG9hZEdhbWVTdGF0ZSIsInJlc3RhcnRBY3RDaGFyIiwiYWN0aXZlQ2hhciIsInJlYWN0T25DbGljayIsInNob3dQb2ludHMiLCJjb25zb2xlIiwiZXJyb3IiLCJzaG93RXJyb3IiLCJhc3luYyIsImluZGV4U2VsZWN0IiwiZ3JlZW4iLCJyZWQiLCJkb0RhbWFnZSIsImFjdGl2ZUNoYXJVc2VyIiwiYWN0aXZlQ29tcCIsImFjYyIsImN1cnIiLCJ1c2VyUG9zaXRpb24iLCJpc0dvYWwiLCJhdHRhY2tDZWxscyIsImlzUGxheWVyIiwidHJhbnNpdGlvbkNlbGxzIiwiZG9BdHRhY2tDb21wIiwiaXNEZWFkIiwiY3Vyc29ycyIsIm51bSIsImFycmF5VHlwZXMiLCJtYXhBdHRhY2siLCJ5ZWxsb3ciLCJhdHRhY2tpbmciLCJyb3VuZCIsImNoZWNrSGVhbHRoUmVtb3ZlRGVhZCJdLCJzb3VyY2VSb290IjoiIn0=