(()=>{"use strict";class e{constructor(e){this.elemModal=null,this.eventShowModal=null,this.eventHideModal=null,this.hiding=!1,this.destroyed=!1,this.animationSpeed=200,this.options=e||{},this.createModal(),this.elemModal.addEventListener("click",this.handlerCloseModal.bind(this)),this.eventShowModal=new CustomEvent("show.modalFunc",{detail:this.elemModal}),this.eventHideModal=new CustomEvent("hide.modalFunc",{detail:this.elemModal})}createModal(){this.elemModal=document.createElement("div");let e,t="";if(this.elemModal.classList.add("modalFunc"),e='<div class="modal__backdrop" data-dismiss="modalFunc"><div class="modal__content"><div class="modal__header"><div class="modal__title" data-modalFunc="title">{{title}}</div><span class="modal__btn-close" data-dismiss="modalFunc" title="Закрыть">×</span></div><div class="modal__body" data-modalFunc="content">{{content}}</div>{{footer}}</div></div>'.replace("{{title}}",this.options.title||"Новое окно"),e=e.replace("{{content}}",this.options.content||""),this.options.footerButtons){for(const e of this.options.footerButtons){let a='<button type="button" class="{{button_class}}" data-handler={{button_handler}}>{{button_text}}</button>'.replace("{{button_class}}",e.class);a=a.replace("{{button_handler}}",e.handler),a=a.replace("{{button_text}}",e.text),t+=a}t='<div class="modal__footer">{{buttons}}</div>'.replace("{{buttons}}",t)}e=e.replace("{{footer}}",t),this.elemModal.innerHTML=e,document.body.appendChild(this.elemModal)}show(){this.destroyed||this.hiding||(this.elemModal.classList.add("modal__show"),document.dispatchEvent(this.eventShowModal))}hide(){this.hiding=!0,this.elemModal.classList.remove("modal__show"),this.elemModal.classList.add("modal__hiding"),setTimeout((()=>{this.elemModal.classList.remove("modal__hiding"),this.hiding=!1}),this.animationSpeed),document.dispatchEvent(this.eventHideModal)}handlerCloseModal(e){("modalFunc"===e.target.dataset.dismiss||e.target.dataset.handler)&&this.hide()}destroy(){this.elemModal.parentElement&&this.elemModal.parentElement.removeChild(this.elemModal),this.elemModal.removeEventListener("click",this.handlerCloseModal.bind(this))}setContent(e){this.elemModal.querySelector('[data-modalFunc="content"]').innerHTML=e}setTitle(e){this.elemModal.querySelector('[data-modalFunc="title"]').innerHTML=e}}function t(e,t){if(e<t-1&&e>0)return"top";if(e<t**2-1&&e>t**2-t)return"bottom";for(let a=1;a<t-1;a+=1){if(e===t*a)return"left";if(e===t*a+(t-1))return"right"}switch(e){case 0:return"top-left";case t-1:return"top-right";case t*(t-1):return"bottom-left";case t**2-1:return"bottom-right";default:return"center"}}function a(e,t){return e.map(t)}function s(e,t){return Math.floor(Math.max(e,e*(80+t)/100))}function i(e,t){return Object.assign(e,t),e}const l={prairie:"prairie",desert:"desert",arctic:"arctic",mountain:"mountain"};class n{constructor(e){this.levelGame=1,this.gamePlay=e,this.isMove="user",this.countClick=0,this.userTeamSurvivors=[],this.history=[],this.points=0,this.block=!1,this.userTeam=[],this.compTeam=[],this.activeChar=null,this.indexSelect=null,this.transitionCells=[],this.attackCells=[],this.showModal=!1}getAllPlayer(){if(!this.userTeam||!this.compTeam)throw new Error("it must have 2 arguments");return[...this.userTeam,...this.compTeam]}calculateSumPoints(){return this.userTeam.reduce(((e,t)=>e+t.character.health),0)}getUserPosition(){const e=this.userTeam.find((e=>this.attackCells.includes(e.position)));return e?e.position:void 0}findPresumedDeceasedPlayer(){return this.getAllPlayer().find((e=>e.position===this.activeCharUser?.position))}getPresumedDeceasedPlayerInfo(e){return{index:("comp"===this.isMove?this.userTeam:this.compTeam).findIndex((t=>e===t.position)),teamKey:"comp"===this.isMove?"userTeam":"compTeam"}}getPlayer(e){return this.getAllPlayer().find((t=>t.position===e))}}const o="auto",h="pointer",r="crosshair",c="not-allowed";function d(e,t,a){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const i=[];for(let e=0;e<t**2;e+=1)i.push(e);const l=function(e,t){const a=[];for(let s=0,i=t;s<e.length;s+=t,i+=t)a.push(e.slice(s,i));return a}(i,t);return s?function(e,t,a){const s=[];let i,l;for(let a=0;a<e.length&&(l=a,i=e[a].findIndex((e=>e===t)),-1===i);a+=1);for(let n=-a;n<=a;n+=1)for(let o=-a;o<=a;o+=1)l+n>=0&&i+o>=0&&l+n<e.length&&i+o<e.length&&e[l+n][i+o]!==t&&s.push(e[l+n][i+o]);return s}(l,e,a):function(e,t,a){const s=[];let i,l;for(let a=0;a<e.length&&(l=a,i=e[a].findIndex((e=>e===t)),-1===i);a+=1);for(let t=1;t<=a;t+=1)i-t>=0&&s.push(e[l][i-t]),i+t<e.length&&s.push(e[l][i+t]),l+t<e.length&&i-t>=0&&s.push(e[l+t][i-t]),l+t<e.length&&i+t<e.length&&s.push(e[l+t][i+t]),l-t>=0&&i-t>=0&&s.push(e[l-t][i-t]),l-t>=0&&i+t<e.length&&s.push(e[l-t][i+t]),l-t>=0&&s.push(e[l-t][i]),l+t<e.length&&s.push(e[l+t][i]);return s}(l,e,a)}class m{constructor(e){this.characters=e}}class u{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if("Character"===new.target.name)throw new Error("Invalid class");this.type=t,this.level=e,this.attack=0,this.defence=0,this.health=50}levelUp(){if(this.health<=0)throw new Error("Can't level up a dead character");this.level=Math.min(this.level+1,4),this.attack=s(this.attack,this.health),this.defence=s(this.defence,this.health),this.health=Math.min(this.health+80,100)}}class g{constructor(e,t){this.character=e,this.position=t}set character(e){if(!(e instanceof u))throw new Error("character must be instance of Character or its children");this._character=e}get character(){return this._character}set position(e){if("number"!=typeof e)throw new Error("position must be a number");this._position=e}get position(){return this._position}}class S extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="bowman",this.attack=25,this.defence=25,this.maxRange=2,this.maxAttack=2}}class v extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="swordsman",this.attack=40,this.defence=10,this.maxRange=4,this.maxAttack=1}}class p extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="magician",this.attack=10,this.defence=40,this.maxRange=1,this.maxAttack=4}}class C extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="daemon",this.attack=10,this.defence=10,this.maxRange=1,this.maxAttack=4}}class f extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="undead",this.attack=40,this.defence=10,this.maxRange=4,this.maxAttack=1}}class y extends u{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1),this.type="vampire",this.attack=25,this.defence=25,this.maxRange=2,this.maxAttack=2}}function w(e){const t=[];if(arguments.length>1&&void 0!==arguments[1]&&arguments[1])for(let a=e-2;a<e**2;a+=e)t.push(a),t.push(a+1);else for(let a=0;a<e**2;a+=8)t.push(a),t.push(a+1);return t}function M(e){const t=w(e,arguments.length>1&&void 0!==arguments[1]&&arguments[1]);return t[Math.floor(Math.random()*t.length)]}function P(e,t,a,s){let[i,l]=s;const n=[];i>=4&&(i=4),l>=10&&(l=10);const o=function(e,t,a){const s=[],i=function*(e,t){for(;;){const a=Math.floor(Math.random()*t+1),s=e[Math.floor(Math.random()*e.length)];yield new s(a)}}(e,t);for(let e=0;e<a;e+=1)s.push(i.next().value);return new m(s)}(e,i,l),h=[];return o.characters.forEach((e=>{let s,i=!1;do{s=M(t,a),h.find((e=>e===s))?s=M(t,a):(h.push(s),i=!0)}while(!i);n.push(new g(e,s))})),n}function k(e){if(!e)return null;const t=new({bowman:S,swordsman:v,magician:p,daemon:C,undead:f,vampire:y}[e._character.type]||null)(e._character.level),a=new g(t,e._position);return t.attack=e._character.attack,t.health=e._character.health,t.defence=e._character.defence,a}const b=new class{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[],this.isModal=!1,this.initModalListener()}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}initModalListener(){document.addEventListener("click",(e=>{"modalHandlerCancel"===e.target.dataset.handler&&this.currentModal&&(this.currentModal.hide(),this.isModal=!1)}))}drawUi(e){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(e);for(let e=0;e<this.boardSize**2;e+=1){const a=document.createElement("div");a.classList.add("cell","map-tile",`map-tile-${t(e,this.boardSize)}`),a.addEventListener("mouseenter",(e=>this.onCellEnter(e))),a.addEventListener("mouseleave",(e=>this.onCellLeave(e))),a.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(a)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const a of e){const e=this.boardEl.children[a.position],s=document.createElement("div");s.classList.add("character",a.character.type);const i=document.createElement("div");i.classList.add("health-level");const l=document.createElement("div");l.classList.add("health-level-indicator","health-level-indicator-"+((t=a.character.health)<15?"critical":t<50?"normal":"high")),l.style.width=`${a.character.health}%`,i.appendChild(l),s.appendChild(i),e.appendChild(s)}var t}showModal(t,a){const s=new e({title:t,content:`&#${a}`,footerButtons:[{class:"btn btn__cancel",text:"Close",handler:"modalHandlerCancel"}]});this.currentModal=s,s.show()}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(){this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(){this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(){this.loadGameListeners.forEach((e=>e.call(null)))}showModalMessage(e,t){this.isModal||(this.isModal=!0,this.showModal(e,t))}selectCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t&&t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((a=>{const s=this.cells[e],i=document.createElement("span");i.className="damage",i.textContent=t,s.appendChild(i),i.addEventListener("animationend",(()=>{s.removeChild(i),a(!0)}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}};b.bindToDOM(document.querySelector("#game-container"));const L=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),T=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.gameState=new n(this.gamePlay),this.onCellClick=this.onCellClick.bind(this),this.onCellEnter=this.onCellEnter.bind(this),this.onCellLeave=this.onCellLeave.bind(this),this.newGame=this.newGame.bind(this),this.saveGame=this.saveGame.bind(this),this.loadGame=this.loadGame.bind(this),this.events()}init(){this.initNewTeams(),this.updatePicture()}events(){this.gamePlay.addCellEnterListener(this.onCellEnter),this.gamePlay.addCellLeaveListener(this.onCellLeave),this.gamePlay.addCellClickListener(this.onCellClick),this.gamePlay.addNewGameListener(this.newGame),this.gamePlay.addSaveGameListener(this.saveGame),this.gamePlay.addLoadGameListener(this.loadGame)}newGame(){const e={levelGame:1,countClick:0,history:[...this.gameState.history,{levelGame:this.gameState.levelGame,points:this.gameState.points}],isMove:"user",block:!1,points:0};i(this.gameState,e),this.reset(),this.init()}saveGame(){this.gameState.attackCells=[],this.gameState.transitionCells=[],this.gameState.activeCharUser=null,this.stateService.save(this.gameState),this.gamePlay.showModalMessage("Your game has saved!","9997")}loadGame(){try{const e=this.stateService.load();this.restoreGameState(e),this.restoreActiveCharacter(e.activeChar),this.updatePicture(),this.showGameInfo()}catch(e){this.handleLoadingError()}}restoreGameState(e){const{levelGame:t,countClick:a,history:s,isMove:l,block:n,points:o,indexSelect:h}=e;i(this.gameState,{levelGame:n?t-1:t,countClick:a,history:s,isMove:l,block:n,points:o,indexSelect:h}),this.resetTeams(e)}restoreActiveCharacter(e){const t=k(e);t&&"user"===t.isMove&&this.reactOnClick(t,["bowman","swordsman","magician"])}handleLoadingError(){this.gamePlay.showModalMessage("There's no game in memory","128075"),this.newGame()}initNewTeams(){this.gameState.userTeam=this.getUserTeam([this.gameState.levelGame,this.gameState.levelGame]),this.gameState.compTeam=this.getCompTeam([this.gameState.levelGame,this.gameState.levelGame])}getUserTeam(e){let[t,a]=e;const s=P([S,v,p],this.gamePlay.boardSize,!1,[t,a]);return this.gameState.userTeam=s,s}getCompTeam(e){let[t,a]=e;const s=P([y,C,f],this.gamePlay.boardSize,!0,[t,a]);return this.gameState.compTeam=s,s}resetTeams(e){this.gameState.userTeam=a(e.userTeam,k),this.gameState.compTeam=a(e.compTeam,k)}levelUp(){const e=Object.values(l);this.updateTeams(),this.gameState.getAllPlayer().forEach((e=>e.character.levelUp())),this.gamePlay.drawUi(e[(this.gameState.levelGame-1)%e.length]),this.gameState.countClick=0,this.gameState.indexSelect=null}updateTeams(){const e=this.getUserTeam([this.gameState.levelGame-1,this.gameState.levelGame]),t=w(this.gamePlay.boardSize);e.forEach((e=>{t.splice(t.indexOf(e.position),1)})),this.gameState.userTeamSurvivors.forEach((e=>{if(!t.includes(e.position)){const a=t[Math.floor(Math.random()*t.length)];e.position=a}})),this.gameState.userTeam=this.gameState.userTeamSurvivors.concat(e),this.gameState.userTeamSurvivors=[],this.gameState.compTeam=this.getCompTeam([this.gameState.levelGame-1,this.gameState.userTeam.length])}showGameInfo(){const e=this.gameState.points?`Your level ${this.gameState.levelGame} and points ${this.gameState.points}`:"There's no points. \n It's the first round",t=this.gameState.points?"128076":"128083";this.gamePlay.showModalMessage(e,t)}async onCellClick(e){if(this.gameState.block)return;const t=this.gameState.getAllPlayer().find((t=>t.position===e));this.gameState.activeChar&&await this.handleUserTurn(e),this.reactOnClick(t,["bowman","swordsman","magician"]),this.gameState.countClick>=1&&await this.handleComputerTurn()}async handleUserTurn(e){this.gameState.indexSelect&&(this.gameState.indexSelect.green===e&&(this.gameState.activeChar.position=e,this.gameState.countClick+=1,this.gamePlay.redrawPositions(this.gameState.getAllPlayer())),this.gameState.indexSelect.red===e)&&(this.gameState.isMove="user",await this.doDamage(e)&&(this.gameState.countClick+=1,this.gamePlay.redrawPositions(this.gameState.getAllPlayer()),await this.checkGameProgress()))}async checkGameProgress(){0===this.gameState.compTeam.length&&(this.gameState.levelGame+=1,this.gameState.points+=this.gameState.calculateSumPoints(),this.reset(),this.gameState.userTeamSurvivors=this.gameState.userTeam,this.gamePlay.showModalMessage(`Level up! Your level ${this.gameState.levelGame} and total points are ${this.gameState.points}`,"9996"),this.levelUp(),this.gamePlay.redrawPositions(this.gameState.getAllPlayer()))}async handleComputerTurn(){this.gameState.activeCharUser=this.gameState.activeChar,this.gameState.isMove="comp",await this.doAttackComp(this)&&(this.gameState.countClick=0,this.gameState.isMove="user",this.gameState.findPresumedDeceasedPlayer()&&(this.gameState.activeChar=this.gameState.activeCharUser,this.reactOnClick(this.gameState.activeChar,["bowman","swordsman","magician"]),this.gamePlay.redrawPositions(this.gameState.getAllPlayer())))}onCellEnter(e){if(this.gameState.block)return;const t=this.gameState.getPlayer(e);if(t&&this.gamePlay.showCellTooltip(function(e){return`🎖${e.level} ⚔${e.attack} 🛡${e.defence} ❤${e.health}`}(t.character),e),!this.gameState.activeChar)return;const a=this.gameState.transitionCells.includes(e),s=this.gameState.attackCells.includes(e),i=this.gameState.userTeam.some((t=>t.position===e)),l=this.gameState.compTeam.some((t=>t.position===e));this.gamePlay.setCursor(h),this.gameState.indexSelect&&(!a||i||l||(this.gameState.indexSelect.green=e,this.gamePlay.selectCell(e,"green")),s&&l&&(this.gameState.indexSelect.red=e,this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(r)))}onCellLeave(e){if(this.gamePlay.hideCellTooltip(e),this.gameState.block)return;const t=document.querySelector(".selected-green"),a=this.gameState.attackCells?.includes(e),s=this.gameState.compTeam.some((t=>t.position===e));t&&(this.gamePlay.deselectCell(this.gameState.indexSelect.green),!a&&s&&(this.gamePlay.deselectCell(this.gameState.indexSelect.green),this.gamePlay.setCursor(c))),document.querySelector(".selected-red")&&this.gamePlay.deselectCell(this.gameState.indexSelect.red)}reactOnClick(e,t){if(e)if(t.includes(e.character.type)){this.updateSelectedCell(e.position),this.gamePlay.selectCell(e.position),this.gameState.activeChar=e;const{maxRange:t,maxAttack:a}=e.character;this.gameState.transitionCells=d(e.position,this.gamePlay.boardSize,t),this.gameState.attackCells=d(e.position,this.gamePlay.boardSize,a,!0)}else this.handleInvalidSelection(e.position)}updateSelectedCell(e){this.gameState.indexSelect&&document.querySelector(".selected-yellow")&&this.gamePlay.deselectCell(this.gameState.indexSelect.yellow),this.gameState.indexSelect={yellow:e}}handleInvalidSelection(e){const t=this.gameState.indexSelect,a=!this.gameState.attackCells.includes(e),s=this.gameState.compTeam.some((t=>t.position===e));t&&a&&s?this.gamePlay.showModalMessage("It can't be done","9940"):this.gameState.activeChar||this.gamePlay.showModalMessage("This isn`t your character","9995")}async doDamage(e){const{attack:t}=this.gameState.activeChar.character,a=this.gameState.getPlayer(e),{defence:s,health:i}=a.character,l=function(e,t){return Math.round(Math.max(e-t,.3*e))}(t,s);return!!await this.gamePlay.showDamage(e,l)&&(a.character.health=i-l,this.checkHealthRemoveDead(a),!0)}checkHealthRemoveDead(e){if(e.character.health<=0){const t=this.gameState.getPresumedDeceasedPlayerInfo(e.position);-1!==t.index&&(this.gameState[t.teamKey].splice(t.index,1),this.gameState.indexSelect=null)}}reset(){this.gameState.indexSelect&&(Object.keys(this.gameState.indexSelect).forEach((e=>{this.gamePlay.deselectCell(this.gameState.indexSelect[e])})),this.gameState.indexSelect=null,this.gamePlay.setCursor(o))}updatePicture(){const e=this.gameState.levelGame>0?this.gameState.levelGame-1:0;this.gamePlay.drawUi(Object.values(l)[e]),this.gamePlay.redrawPositions(this.gameState.getAllPlayer()),this.gameState.indexSelect&&this.gameState.indexSelect.yellow&&this.gamePlay.selectCell(this.gameState.indexSelect.yellow)}async doAttackComp(){const e=(t=this.gameState.compTeam)[Math.floor(Math.random()*t.length)];var t;this.gameState.activeChar=e,this.reactOnClick(e,["daemon","undead","vampire"]);const a=this.gameState.getUserPosition();return void 0!==a?await this.doDamage(a)&&(this.checkAndEndGameIfNecessary(),this.updatePicture()):(this.gameState.activeChar.position=this.moveToRandomPosition(),this.gamePlay.redrawPositions(this.gameState.getAllPlayer())),this.gameState.activeChar=null,this.reset(),!0}checkAndEndGameIfNecessary(){0===this.gameState.userTeam.length&&(this.gameState.block=!0,this.gamePlay.showModalMessage("You lose!","129335"))}moveToRandomPosition(){let e,t;do{e=Math.floor(Math.random()*this.gameState.transitionCells.length);const a=this.gameState.transitionCells[e];t=this.gameState.getAllPlayer().some((e=>e.position===a))}while(t);return this.gameState.transitionCells[e]}}(b,L);T.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,