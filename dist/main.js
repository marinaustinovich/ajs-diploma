(()=>{"use strict";function e(e,t){if(e<t-1&&e>0)return"top";if(e<t**2-1&&e>t**2-t)return"bottom";for(let a=1;a<t-1;a+=1){if(e===t*a)return"left";if(e===t*a+(t-1))return"right"}switch(e){case 0:return"top-left";case t-1:return"top-right";case t*(t-1):return"bottom-left";case t**2-1:return"bottom-right";default:return"center"}}function t(e,t){const a=function(e){let t,a,s,i=!1,l=!1;const n=200;function o(){i=!0,t.classList.remove("modal__show"),t.classList.add("modal__hiding"),setTimeout((function(){t.classList.remove("modal__hiding"),i=!1}),n),document.dispatchEvent(s)}function r(e){"modalFunc"===e.target.dataset.dismiss&&o()}return t=function(e){t=document.createElement("div");let a,s="";if(t.classList.add("modalFunc"),a='<div class="modal__backdrop" data-dismiss="modalFunc"><div class="modal__content"><div class="modal__header"><div class="modal__title" data-modalFunc="title">{{title}}</div><span class="modal__btn-close" data-dismiss="modalFunc" title="–ó–∞–∫—Ä—ã—Ç—å">√ó</span></div><div class="modal__body" data-modalFunc="content">{{content}}</div>{{footer}}</div></div>'.replace("{{title}}",e.title||"–ù–æ–≤–æ–µ –æ–∫–Ω–æ"),a=a.replace("{{content}}",e.content||""),e.footerButtons){for(let t=0,a=e.footerButtons.length;t<a;t++){let a='<button type="button" class="{{button_class}}" data-handler={{button_handler}}>{{button_text}}</button>'.replace("{{button_class}}",e.footerButtons[t].class);a=a.replace("{{button_handler}}",e.footerButtons[t].handler),a=a.replace("{{button_text}}",e.footerButtons[t].text),s+=a}s='<div class="modal__footer">{{buttons}}</div>'.replace("{{buttons}}",s)}return a=a.replace("{{footer}}",s),t.innerHTML=a,document.body.appendChild(t),t}(e||{}),t.addEventListener("click",r),a=new CustomEvent("show.modalFunc",{detail:t}),s=new CustomEvent("hide.modalFunc",{detail:t}),{show:function(){l||i||(t.classList.add("modal__show"),document.dispatchEvent(a))},hide:o,destroy:function(){t.parentElement.removeChild(t),t.removeEventListener("click",r),l=!0},setContent:function(e){t.querySelector('[data-modalFunc="content"]').innerHTML=e},setTitle:function(e){t.querySelector('[data-modalFunc="title"]').innerHTML=e}}}({title:e,content:"&#"+t,footerButtons:[{class:"btn btn__cancel",text:"Close",handler:"modalHandlerCancel"}]});document.addEventListener("click",(e=>{"modalHandlerCancel"===e.target.dataset.handler&&a.hide()})),a.show()}class a{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(t){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(t);for(let t=0;t<this.boardSize**2;t+=1){const a=document.createElement("div");a.classList.add("cell","map-tile",`map-tile-${e(t,this.boardSize)}`),a.addEventListener("mouseenter",(e=>this.onCellEnter(e))),a.addEventListener("mouseleave",(e=>this.onCellLeave(e))),a.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(a)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const a of e){const e=this.boardEl.children[a.position],s=document.createElement("div");s.classList.add("character",a.character.type);const i=document.createElement("div");i.classList.add("health-level");const l=document.createElement("div");l.classList.add("health-level-indicator","health-level-indicator-"+((t=a.character.health)<15?"critical":t<50?"normal":"high")),l.style.width=`${a.character.health}%`,i.appendChild(l),s.appendChild(i),e.appendChild(s)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}static showError(e,a){t(e,a)}static showMessage(e,a){t(e,a)}static showPoints(e,a){t(e,a)}selectCell(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((a=>{const s=this.cells[e],i=document.createElement("span");i.textContent=t,i.classList.add("damage"),s.appendChild(i),i.addEventListener("animationend",(()=>{s.removeChild(i),a("show")}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}}const s={prairie:"prairie",desert:"desert",arctic:"arctic",mountain:"mountain"};class i{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if("Character"===new.target.name)throw new Error("Invalid class");this.type=t,this.level=e,this.attack=0,this.defence=0,this.health=50}}class l extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"bowman"),this.attack=25,this.defence=25}}class n extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"swordsman"),this.attack=40,this.defence=10}}class o extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"magician"),this.attack=10,this.defence=40}}class r extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"vampire"),this.attack=25,this.defence=25}}class c extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"daemon"),this.attack=10,this.defence=10}}class h extends i{constructor(){super(arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,"undead"),this.attack=40,this.defence=10}}class m{constructor(e){this.characters=e}}class d{constructor(e,t){if(!(e instanceof i))throw new Error("character must be instance of Character or its children");if("number"!=typeof t)throw new Error("position must be a number");this.character=e,this.position=t}}function u(e){const t=[];if(arguments.length>1&&void 0!==arguments[1]&&arguments[1])for(let a=e-2;a<e**2;a+=e)t.push(a),t.push(a+1);else for(let a=0;a<e**2;a+=8)t.push(a),t.push(a+1);return t}function g(e){const t=u(e,arguments.length>1&&void 0!==arguments[1]&&arguments[1]);return t[Math.floor(Math.random()*t.length)]}function v(e,t,a,s){let[i,l]=s;const n=[];i>=4&&(i=4),l>=10&&(l=10);const o=function(e,t,a){const s=[],i=function*(e,t){for(;;){const a=Math.floor(Math.random()*t+1),s=e[Math.floor(Math.random()*e.length)];yield new s(a)}}(e,t);for(let e=0;e<a;e+=1)s.push(i.next().value);return new m(s)}(e,i,l),r=[];return o.characters.forEach((e=>{let s,i=!1;do{s=g(t,a),r.find((e=>e===s))?s=g(t,a):(r.push(s),i=!0)}while(!i);n.push(new d(e,s))})),n}function p(e){let t;switch(e.character.type){case"bowman":t=l;break;case"swordsman":t=n;break;case"magician":t=o;break;case"daemon":t=c;break;case"undead":t=h;break;case"vampire":t=r}const a=new t(e.character.level),s=new d(a,e.position);return s.character.attack=e.character.attack,s.character.health=e.character.health,s.character.defence=e.character.defence,s}class S{constructor(e){this.levelGame=1,this.gamePlay=e,this.userTeam=[],this.compTeam=[],this.allPlayer=[],this.isMove="user",this.countClick=0,this.survivos=[],this.history=[],this.points=0,this.block=!1,this.initNewTeams()}getUserTeam(e){let[t,a]=e;const s=v([l,n,o],this.gamePlay.boardSize,!1,[t,a]);return this.userTeam=s,s}getCompTeam(e){let[t,a]=e;const s=v([r,c,h],this.gamePlay.boardSize,!0,[t,a]);return this.compTeam=s,s}getAllPositions(e,t){return e&&0!==e.length?t&&0!==t.length?e.concat(t):e:t}initNewTeams(){this.userTeam=this.getUserTeam([this.levelGame,this.levelGame]),this.compTeam=this.getCompTeam([this.levelGame,this.levelGame]),this.allPlayer=this.getAllPositions(this.userTeam,this.compTeam)}getInfo(e){return`üéñ${e.level} ‚öî${e.attack} üõ°${e.defence} ‚ù§${e.health}`}levelUp(){for(const e of this.allPlayer){const t=e.character;t.attack=this.upAttackDefence(t.attack,t.health),t.defence=this.upAttackDefence(t.defence,t.health),t.level=t.level+1<=4?t.level+1:t.level=4,t.health=t.health+80<100?t.health+80:100}this.gamePlay.drawUi(Object.values(s)[this.levelGame-1]);const e=this.getUserTeam([this.levelGame-1,this.levelGame]),t=u(this.gamePlay.boardSize);e.forEach((e=>t.splice(t.indexOf(e.position),1))),this.survivos.forEach((e=>{if(!t.includes(e.position)){const a=Math.floor(Math.random()*t.length);e.position=t[a]}})),this.userTeam=this.survivos.concat(e),this.compTeam=this.getCompTeam([this.levelGame,this.levelGame+this.allPlayer.length]),this.allPlayer=this.getAllPositions(this.userTeam,this.compTeam),this.countClick=0}upAttackDefence(e,t){return Math.floor(Math.max(e,e*(80+t)/100))}calculateSumPoints(){return this.userTeam.reduce(((e,t)=>e+t.character.health),0)}}const f="auto",C="pointer",y="crosshair",w="not-allowed";function b(e,t,a){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const i=[];for(let e=0;e<t**2;e+=1)i.push(e);const l=function(e,t){const a=[];for(let s=0,i=t;s<e.length;s+=t,i+=t)a.push(e.slice(s,i));return a}(i,t);return s?function(e,t,a){const s=[];let i,l;for(let a=0;a<e.length&&(l=a,i=e[a].findIndex((e=>e===t)),-1===i);a+=1);for(let n=-a;n<=a;n+=1)for(let o=-a;o<=a;o+=1)l+n>=0&&i+o>=0&&l+n<e.length&&i+o<e.length&&e[l+n][i+o]!==t&&s.push(e[l+n][i+o]);return s}(l,e,a):function(e,t,a){const s=[];let i,l;for(let a=0;a<e.length&&(l=a,i=e[a].findIndex((e=>e===t)),-1===i);a+=1);for(let t=1;t<=a;t+=1)i-t>=0&&s.push(e[l][i-t]),i+t<e.length&&s.push(e[l][i+t]),l+t<e.length&&i-t>=0&&s.push(e[l+t][i-t]),l+t<e.length&&i+t<e.length&&s.push(e[l+t][i+t]),l-t>=0&&i-t>=0&&s.push(e[l-t][i-t]),l-t>=0&&i+t<e.length&&s.push(e[l-t][i+t]),l-t>=0&&s.push(e[l-t][i]),l+t<e.length&&s.push(e[l+t][i]);return s}(l,e,a)}const P=new a;P.bindToDOM(document.querySelector("#game-container"));const k=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),L=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.gameState=new S(this.gamePlay),this.onCellClick=this.onCellClick.bind(this),this.onCellEnter=this.onCellEnter.bind(this),this.onCellLeave=this.onCellLeave.bind(this),this.newGame=this.newGame.bind(this),this.saveGame=this.saveGame.bind(this),this.loadGame=this.loadGame.bind(this)}init(){this.events(),this.updatePicture()}events(){this.gamePlay.addCellEnterListener(this.onCellEnter),this.gamePlay.addCellLeaveListener(this.onCellLeave),this.gamePlay.addCellClickListener(this.onCellClick),this.gamePlay.addNewGameListener(this.newGame),this.gamePlay.addSaveGameListener(this.saveGame),this.gamePlay.addLoadGameListener(this.loadGame)}newGame(){this.gameState.history.push({levelGame:this.gameState.levelGame,points:this.gameState.points}),this.gameState.block=!1,this.gameState.levelGame=1,this.gameState.points=0,this.gameState.countClick=0,this.reset(),this.gameState.initNewTeams(),this.updatePicture()}saveGame(){this.stateService.save(this.gameState),a.showMessage("Your game has saved!","9997")}loadGame(){try{const e=this.stateService.load();if(e){!0===e.block?this.gameState.levelGame=e.levelGame-1:this.gameState.levelGame=e.levelGame,this.gameState.countClick=e.countClick,this.gameState.history=e.history,this.gameState.isMove=e.isMove,this.gameState.block=e.block,this.gameState.points=e.points,this.gameState.userTeam=[],this.gameState.compTeam=[],this.reset();const t=p(e.activeChar);e.userTeam.forEach((e=>this.gameState.userTeam.push(p(e)))),e.compTeam.forEach((e=>this.gameState.compTeam.push(p(e)))),this.gameState.allPlayer=this.gameState.getAllPositions(this.gameState.userTeam,this.gameState.compTeam),this.updatePicture(),this.reactOnClick(t,t.position,["bowman","swordsman","magician"]),this.gameState.points?a.showPoints(`Your points ${this.gameState.points}`,"128076"):a.showPoints("There's no points. \n It's the first round","128083")}}catch(e){console.error(e),a.showError("There`s no game in memory","128075"),this.newGame()}}async onCellClick(e){if(!this.gameState.block){this.gameState.activeChar&&(this.gameState.indexSelect.green===e&&(this.gameState.activeChar.position=e,this.gameState.countClick+=1,this.gamePlay.redrawPositions(this.gameState.allPlayer)),this.gameState.indexSelect.red===e)&&(this.gameState.isMove="user",await this.doDamage(e)&&(this.gameState.countClick+=1,this.gamePlay.redrawPositions(this.gameState.allPlayer),0===this.gameState.compTeam.length&&(this.gameState.levelGame+=1,this.gameState.points+=this.gameState.calculateSumPoints(),this.reset(),this.gameState.survivos=this.gameState.userTeam,a.showMessage(`Level up! Your total points are ${this.gameState.points}`,"9996"),this.gameState.levelUp(),this.gamePlay.redrawPositions(this.gameState.allPlayer))));const t=this.gameState.allPlayer.find((t=>t.position===e));this.reactOnClick(t,e,["bowman","swordsman","magician"]),this.gameState.countClick>=1&&(this.gameState.activeCharUser=this.gameState.activeChar,this.gameState.isMove="comp",await async function(e){const t=e.gameState.compTeam.reduce(((e,t)=>e.character.attack>t.character.attack?e:t));e.gameState.activeChar=t,e.reactOnClick(t,t.position,["daemon","undead","vampire"]);let s,i=!1;for(const t of e.gameState.userTeam)e.gameState.attackCells.includes(t.position)&&(i=!0,s=t.position);if(i)await e.doDamage(s)&&(0===e.gameState.userTeam.length&&(e.gameState.block=!0,a.showMessage("You lose!","129335")),e.gamePlay.redrawPositions(e.gameState.allPlayer));else{let a,s;do{a=Math.floor(Math.random()*e.gameState.transitionCells.length),s=e.gameState.allPlayer.find((e=>e.position===a))}while(s);t.position=e.gameState.transitionCells[a],e.gamePlay.redrawPositions(e.gameState.allPlayer)}return e.gameState.activeChar=void 0,e.reset(),!0}(this)&&(this.gameState.countClick=0,this.gameState.isMove="user",this.isDead()&&(this.gameState.activeChar=this.gameState.activeCharUser,this.reactOnClick(this.gameState.activeChar,this.gameState.activeChar.position,["bowman","swordsman","magician"]),this.gamePlay.redrawPositions(this.gameState.allPlayer))))}}onCellEnter(e){if(!this.gameState.block){const t=this.gameState.allPlayer.find((t=>t.position===e));t&&this.gamePlay.showCellTooltip(this.gameState.getInfo(t.character),e),this.gameState.activeChar&&(this.gamePlay.setCursor(C),!this.gameState.transitionCells.find((t=>t===e))||this.gameState.userTeam.find((t=>t.position===e))||this.gameState.compTeam.find((t=>t.position===e))||(this.gameState.indexSelect.green=e,this.gamePlay.selectCell(e,"green")),this.gameState.attackCells.find((t=>t===e))&&this.gameState.compTeam.find((t=>t.position===e))&&(this.gameState.indexSelect.red=e,this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(y)))}}onCellLeave(e){this.gamePlay.hideCellTooltip(e),this.gameState.block||document.querySelector(".selected-green")&&(this.gamePlay.deselectCell(this.gameState.indexSelect.green),!this.gameState.attackCells.find((t=>t===e))&&this.gameState.compTeam.find((t=>t.position===e))&&(this.gamePlay.deselectCell(this.gameState.indexSelect.green),this.gamePlay.setCursor(w)),document.querySelector(".selected-red")&&this.gamePlay.deselectCell(this.gameState.indexSelect.red))}reactOnClick(e,t,s){if(e)if(e.character.type===s[0]||e.character.type===s[1]||e.character.type===s[2]){let a,s;switch(document.querySelector(".selected-yellow")?(this.gamePlay.deselectCell(this.gameState.indexSelect.yellow),this.gameState.indexSelect.yellow=t):this.gameState.indexSelect={yellow:t},this.gamePlay.selectCell(t),this.gamePlay.boardEl.classList.add("mountain"),this.gameState.activeChar=e,e.character.type){case"vampire":case"bowman":a=2,s=2;break;case"undead":case"swordsman":a=4,s=1;break;case"daemon":case"magician":a=1,s=4;break;default:a=1,s=1}this.gameState.transitionCells=b(t,this.gamePlay.boardSize,a),this.gameState.attackCells=b(t,this.gamePlay.boardSize,s,!0)}else this.gameState.indexSelect&&!this.gameState.attackCells.find((e=>e===t))&&this.gameState.compTeam.find((e=>e.position===t))?a.showError("It can't be done","9940"):this.gameState.activeChar||a.showError("This isn`t your character","9995")}async doDamage(e){const t=this.gameState.activeChar.character.attack,a=this.gameState.allPlayer.find((t=>t.position===e)),s=Math.round(Math.max(t-a.character.defence,.3*t));if(await this.gamePlay.showDamage(e,s))return a.character.health=a.character.health-s,this.checkHealthRemoveDead(a),!0}checkHealthRemoveDead(e){if(e.character.health<=0){if("comp"===this.gameState.isMove){const t=this.gameState.userTeam.findIndex((t=>e.position===t.position));this.gameState.userTeam.splice(t,1)}if("user"===this.gameState.isMove){const t=this.gameState.compTeam.findIndex((t=>e.position===t.position));this.gameState.compTeam.splice(t,1)}this.gameState.allPlayer=this.gameState.getAllPositions(this.gameState.userTeam,this.gameState.compTeam)}}reset(){this.gameState.indexSelect&&(this.gameState.indexSelect.yellow&&this.gamePlay.deselectCell(this.gameState.indexSelect.yellow),this.gameState.indexSelect.red&&this.gamePlay.deselectCell(this.gameState.indexSelect.red),this.gameState.indexSelect.green&&this.gamePlay.deselectCell(this.gameState.indexSelect.green)),this.gamePlay.setCursor(f)}isDead(){return this.gameState.allPlayer.find((e=>e.position===this.gameState.activeCharUser.position))}updatePicture(){this.gamePlay.drawUi(Object.values(s)[this.gameState.levelGame-1]),this.gamePlay.redrawPositions(this.gameState.allPlayer)}}(P,k);L.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxXQUFhakMsS0FBSytMLFVBQVV1QixlQUFlckwsVUFDekYsQ0FFQXFLLGdCQUNFdE0sS0FBSzZILFNBQVNoSCxPQUFPdUksT0FBT0MsT0FBT0MsR0FBUXRKLEtBQUsrTCxVQUFVakUsVUFBWSxJQUN0RTlILEtBQUs2SCxTQUFTL0YsZ0JBQWdCOUIsS0FBSytMLFVBQVU5RCxVQUMvQyxHRjFTa0NKLEVBQVVzRCxHQUM5Q1csRUFBU00sTSIsInNvdXJjZXMiOlsid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL3V0aWxzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL21vZGFsLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL0dhbWVQbGF5LmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL3RoZW1lcy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9DaGFyYWN0ZXIuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9Cb3dtYW4uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9Td29yZHNtYW4uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9NYWdpY2lhbi5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9jaGFyYWN0ZXJzL1ZhbXBpcmUuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9EYWVtb24uanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvY2hhcmFjdGVycy9VbmRlYWQuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvVGVhbS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9Qb3NpdGlvbmVkQ2hhcmFjdGVyLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL2NyZWF0ZVBvc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9nZW5lcmF0b3JzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL0dhbWVTdGF0ZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9jdXJzb3JzLmpzIiwid2VicGFjazovL2Fqcy1kaXBsb21hLy4vc3JjL2pzL3RyYW5zaXRpb25BdHRhY2tDZWxscy5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9hcHAuanMiLCJ3ZWJwYWNrOi8vYWpzLWRpcGxvbWEvLi9zcmMvanMvR2FtZVN0YXRlU2VydmljZS5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9HYW1lQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9hanMtZGlwbG9tYS8uL3NyYy9qcy9kb0F0dGFja0NvbXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdG9kb1xuICogQHBhcmFtIGluZGV4IC0g0LjQvdC00LXQutGBINC/0L7Qu9GPXG4gKiBAcGFyYW0gYm9hcmRTaXplIC0g0YDQsNC30LzQtdGAINC60LLQsNC00YDQsNGC0L3QvtCz0L4g0L/QvtC70Y8gKNCyINC00LvQuNC90YMg0LjQu9C4INGI0LjRgNC40L3RgylcbiAqIEByZXR1cm5zINGB0YLRgNC+0LrQsCAtINGC0LjQvyDRj9GH0LXQudC60Lgg0L3QsCDQv9C+0LvQtTpcbiAqXG4gKiB0b3AtbGVmdFxuICogdG9wLXJpZ2h0XG4gKiB0b3BcbiAqIGJvdHRvbS1sZWZ0XG4gKiBib3R0b20tcmlnaHRcbiAqIGJvdHRvbVxuICogcmlnaHRcbiAqIGxlZnRcbiAqIGNlbnRlclxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY2FsY1RpbGVUeXBlKDAsIDgpOyAvLyAndG9wLWxlZnQnXG4gKiBjYWxjVGlsZVR5cGUoMSwgOCk7IC8vICd0b3AnXG4gKiBjYWxjVGlsZVR5cGUoNjMsIDgpOyAvLyAnYm90dG9tLXJpZ2h0J1xuICogY2FsY1RpbGVUeXBlKDcsIDcpOyAvLyAnbGVmdCdcbiAqIGBgYFxuICogKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjVGlsZVR5cGUoaW5kZXgsIGJvYXJkU2l6ZSkge1xuICAvLyBUT0RPOiDQstCw0Ygg0LrQvtC0INCx0YPQtNC10YIg0YLRg9GCXG4gIGlmIChpbmRleCA8IChib2FyZFNpemUgLSAxKSAmJiBpbmRleCA+IDApIHtcbiAgICByZXR1cm4gJ3RvcCc7XG4gIH1cbiAgaWYgKGluZGV4IDwgKGJvYXJkU2l6ZSAqKiAyIC0gMSkgJiYgaW5kZXggPiAoYm9hcmRTaXplICoqIDIgLSBib2FyZFNpemUpKSB7XG4gICAgcmV0dXJuICdib3R0b20nO1xuICB9XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYm9hcmRTaXplIC0gMTsgaSArPSAxKSB7XG4gICAgaWYgKGluZGV4ID09PSBib2FyZFNpemUgKiBpKSB7XG4gICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPT09IChib2FyZFNpemUgKiBpICsgKGJvYXJkU2l6ZSAtIDEpKSkge1xuICAgICAgcmV0dXJuICdyaWdodCc7XG4gICAgfVxuICB9XG5cbiAgc3dpdGNoIChpbmRleCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiAndG9wLWxlZnQnO1xuICAgIGNhc2UgKGJvYXJkU2l6ZSAtIDEpOlxuICAgICAgcmV0dXJuICd0b3AtcmlnaHQnO1xuICAgIGNhc2UgKGJvYXJkU2l6ZSAqIChib2FyZFNpemUgLSAxKSk6XG4gICAgICByZXR1cm4gJ2JvdHRvbS1sZWZ0JztcbiAgICBjYXNlIChib2FyZFNpemUgKiogMiAtIDEpOlxuICAgICAgcmV0dXJuICdib3R0b20tcmlnaHQnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ2NlbnRlcic7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNIZWFsdGhMZXZlbChoZWFsdGgpIHtcbiAgaWYgKGhlYWx0aCA8IDE1KSB7XG4gICAgcmV0dXJuICdjcml0aWNhbCc7XG4gIH1cblxuICBpZiAoaGVhbHRoIDwgNTApIHtcbiAgICByZXR1cm4gJ25vcm1hbCc7XG4gIH1cblxuICByZXR1cm4gJ2hpZ2gnO1xufVxuIiwiZnVuY3Rpb24gbW9kYWxGdW5jKG9wdGlvbnMpIHtcbiAgbGV0IGVsZW1Nb2RhbDtcbiAgbGV0IGV2ZW50U2hvd01vZGFsO1xuICBsZXQgZXZlbnRIaWRlTW9kYWw7XG4gIGxldCBoaWRpbmcgPSBmYWxzZTtcbiAgbGV0IGRlc3Ryb3llZCA9IGZhbHNlO1xuICBjb25zdCBhbmltYXRpb25TcGVlZCA9IDIwMDtcblxuICBmdW5jdGlvbiBjcmVhdGVNb2RhbChvcHRpb24pIHtcbiAgICBlbGVtTW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbi8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgICAgICBsZXQgbW9kYWxUZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwibW9kYWxfX2JhY2tkcm9wXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxGdW5jXCI+PGRpdiBjbGFzcz1cIm1vZGFsX19jb250ZW50XCI+PGRpdiBjbGFzcz1cIm1vZGFsX19oZWFkZXJcIj48ZGl2IGNsYXNzPVwibW9kYWxfX3RpdGxlXCIgZGF0YS1tb2RhbEZ1bmM9XCJ0aXRsZVwiPnt7dGl0bGV9fTwvZGl2PjxzcGFuIGNsYXNzPVwibW9kYWxfX2J0bi1jbG9zZVwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsRnVuY1wiIHRpdGxlPVwi0JfQsNC60YDRi9GC0YxcIj7Dlzwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPVwibW9kYWxfX2JvZHlcIiBkYXRhLW1vZGFsRnVuYz1cImNvbnRlbnRcIj57e2NvbnRlbnR9fTwvZGl2Pnt7Zm9vdGVyfX08L2Rpdj48L2Rpdj4nO1xuICAgICAgICAgICAgbGV0IG1vZGFsRm9vdGVyVGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cIm1vZGFsX19mb290ZXJcIj57e2J1dHRvbnN9fTwvZGl2Pic7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgICAgICAgbGV0IG1vZGFsQnV0dG9uVGVtcGxhdGUgPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJ7e2J1dHRvbl9jbGFzc319XCIgZGF0YS1oYW5kbGVyPXt7YnV0dG9uX2hhbmRsZXJ9fT57e2J1dHRvbl90ZXh0fX08L2J1dHRvbj4nO1xuICAgICAgICAgICAgbGV0IG1vZGFsSFRNTDtcbiAgICAgICAgICAgIGxldCBtb2RhbEZvb3RlckhUTUwgPSAnJztcblxuICAgICAgICBlbGVtTW9kYWwuY2xhc3NMaXN0LmFkZCgnbW9kYWxGdW5jJyk7XG4gICAgICAgIG1vZGFsSFRNTCA9IG1vZGFsVGVtcGxhdGUucmVwbGFjZSgne3t0aXRsZX19Jywgb3B0aW9uLnRpdGxlIHx8ICfQndC+0LLQvtC1INC+0LrQvdC+Jyk7XG4gICAgICAgIG1vZGFsSFRNTCA9IG1vZGFsSFRNTC5yZXBsYWNlKCd7e2NvbnRlbnR9fScsIG9wdGlvbi5jb250ZW50IHx8ICcnKTtcbiAgICAgICAgaWYgKG9wdGlvbi5mb290ZXJCdXR0b25zKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gb3B0aW9uLmZvb3RlckJ1dHRvbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbi8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgICAgICAgICAgbGV0IG1vZGFsRm9vdGVyQnV0dG9uID0gbW9kYWxCdXR0b25UZW1wbGF0ZS5yZXBsYWNlKCd7e2J1dHRvbl9jbGFzc319Jywgb3B0aW9uLmZvb3RlckJ1dHRvbnNbaV0uY2xhc3MpO1xuLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgICAgICAgICBtb2RhbEZvb3RlckJ1dHRvbiA9IG1vZGFsRm9vdGVyQnV0dG9uLnJlcGxhY2UoJ3t7YnV0dG9uX2hhbmRsZXJ9fScsIG9wdGlvbi5mb290ZXJCdXR0b25zW2ldLmhhbmRsZXIpO1xuLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgICAgICAgICBtb2RhbEZvb3RlckJ1dHRvbiA9IG1vZGFsRm9vdGVyQnV0dG9uLnJlcGxhY2UoJ3t7YnV0dG9uX3RleHR9fScsIG9wdGlvbi5mb290ZXJCdXR0b25zW2ldLnRleHQpO1xuICAgICAgICAgICAgICAgIG1vZGFsRm9vdGVySFRNTCArPSBtb2RhbEZvb3RlckJ1dHRvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vZGFsRm9vdGVySFRNTCA9IG1vZGFsRm9vdGVyVGVtcGxhdGUucmVwbGFjZSgne3tidXR0b25zfX0nLCBtb2RhbEZvb3RlckhUTUwpO1xuICAgICAgICB9XG4gICAgICAgIG1vZGFsSFRNTCA9IG1vZGFsSFRNTC5yZXBsYWNlKCd7e2Zvb3Rlcn19JywgbW9kYWxGb290ZXJIVE1MKTtcbiAgICAgICAgZWxlbU1vZGFsLmlubmVySFRNTCA9IG1vZGFsSFRNTDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtTW9kYWwpO1xuICAgICAgICByZXR1cm4gZWxlbU1vZGFsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dNb2RhbCgpIHtcbiAgICAgICAgaWYgKCFkZXN0cm95ZWQgJiYgIWhpZGluZykge1xuICAgICAgICAgICAgZWxlbU1vZGFsLmNsYXNzTGlzdC5hZGQoJ21vZGFsX19zaG93Jyk7XG4gICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50U2hvd01vZGFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVNb2RhbCgpIHtcbiAgICAgICAgaGlkaW5nID0gdHJ1ZTtcbiAgICAgICAgZWxlbU1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsX19zaG93Jyk7XG4gICAgICAgIGVsZW1Nb2RhbC5jbGFzc0xpc3QuYWRkKCdtb2RhbF9faGlkaW5nJyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWxlbU1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsX19oaWRpbmcnKTtcbiAgICAgICAgICAgIGhpZGluZyA9IGZhbHNlO1xuICAgICAgICB9LCBhbmltYXRpb25TcGVlZCk7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnRIaWRlTW9kYWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZXJDbG9zZU1vZGFsKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmRhdGFzZXQuZGlzbWlzcyA9PT0gJ21vZGFsRnVuYycpIHtcbiAgICAgICAgICAgIGhpZGVNb2RhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZWxlbU1vZGFsID0gY3JlYXRlTW9kYWwob3B0aW9ucyB8fCB7fSk7XG5cblxuICAgIGVsZW1Nb2RhbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXJDbG9zZU1vZGFsKTtcbiAgICBldmVudFNob3dNb2RhbCA9IG5ldyBDdXN0b21FdmVudCgnc2hvdy5tb2RhbEZ1bmMnLCB7IGRldGFpbDogZWxlbU1vZGFsIH0pO1xuICAgIGV2ZW50SGlkZU1vZGFsID0gbmV3IEN1c3RvbUV2ZW50KCdoaWRlLm1vZGFsRnVuYycsIHsgZGV0YWlsOiBlbGVtTW9kYWwgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzaG93OiBzaG93TW9kYWwsXG4gICAgICAgIGhpZGU6IGhpZGVNb2RhbCxcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWxlbU1vZGFsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbU1vZGFsKTtcbiAgICAgICAgICAgIGVsZW1Nb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXJDbG9zZU1vZGFsKTtcbiAgICAgICAgICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChodG1sKSB7XG4gICAgICAgICAgICBlbGVtTW9kYWwucXVlcnlTZWxlY3RvcignW2RhdGEtbW9kYWxGdW5jPVwiY29udGVudFwiXScpLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRpdGxlOiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAgICAgZWxlbU1vZGFsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1vZGFsRnVuYz1cInRpdGxlXCJdJykuaW5uZXJIVE1MID0gdGV4dDtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaG93TW9kYWwobWVzc2FnZSwgdW5pY29kZSkge1xuICBjb25zdCBtb2RhbCA9IG1vZGFsRnVuYyh7XG4gICAgdGl0bGU6IG1lc3NhZ2UsXG4gICAgY29udGVudDogJyYjJyArIHVuaWNvZGUsXG4gICAgZm9vdGVyQnV0dG9uczogW1xuICAgICAgeyBjbGFzczogJ2J0biBidG5fX2NhbmNlbCcsIHRleHQ6ICdDbG9zZScsIGhhbmRsZXI6ICdtb2RhbEhhbmRsZXJDYW5jZWwnIH0sXG4gICAgXVxuICB9KTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAgKGUpID0+IHtcbiAgICBpZiAoZS50YXJnZXQuZGF0YXNldC5oYW5kbGVyID09PSAnbW9kYWxIYW5kbGVyQ2FuY2VsJykgIG1vZGFsLmhpZGUoKVxuICB9KTtcbiAgbW9kYWwuc2hvdygpO1xufVxuIiwiaW1wb3J0IHsgY2FsY0hlYWx0aExldmVsLCBjYWxjVGlsZVR5cGUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBzaG93TW9kYWwgZnJvbSAnLi9tb2RhbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVQbGF5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ib2FyZFNpemUgPSA4O1xuICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcbiAgICB0aGlzLmJvYXJkRWwgPSBudWxsO1xuICAgIHRoaXMuY2VsbHMgPSBbXTtcbiAgICB0aGlzLmNlbGxDbGlja0xpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMuY2VsbEVudGVyTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5jZWxsTGVhdmVMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLm5ld0dhbWVMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLnNhdmVHYW1lTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5sb2FkR2FtZUxpc3RlbmVycyA9IFtdO1xuICB9XG5cbiAgYmluZFRvRE9NKGNvbnRhaW5lcikge1xuICAgIGlmICghKGNvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb250YWluZXIgaXMgbm90IEhUTUxFbGVtZW50Jyk7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIGJvYXJkRWwgd2l0aCBzcGVjaWZpYyB0aGVtZVxuICAgKlxuICAgKiBAcGFyYW0gdGhlbWVcbiAgICovXG4gIGRyYXdVaSh0aGVtZSkge1xuICAgIHRoaXMuY2hlY2tCaW5kaW5nKCk7XG5cbiAgICB0aGlzLmNvbnRhaW5lci5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj5cbiAgICAgICAgPGJ1dHRvbiBkYXRhLWlkPVwiYWN0aW9uLXJlc3RhcnRcIiBjbGFzcz1cImJ0blwiPk5ldyBHYW1lPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gZGF0YS1pZD1cImFjdGlvbi1zYXZlXCIgY2xhc3M9XCJidG5cIj5TYXZlIEdhbWU8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBkYXRhLWlkPVwiYWN0aW9uLWxvYWRcIiBjbGFzcz1cImJ0blwiPkxvYWQgR2FtZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiYm9hcmQtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgZGF0YS1pZD1cImJvYXJkXCIgY2xhc3M9XCJib2FyZFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYDtcblxuICAgIHRoaXMubmV3R2FtZUVsID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignW2RhdGEtaWQ9YWN0aW9uLXJlc3RhcnRdJyk7XG4gICAgdGhpcy5zYXZlR2FtZUVsID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignW2RhdGEtaWQ9YWN0aW9uLXNhdmVdJyk7XG4gICAgdGhpcy5sb2FkR2FtZUVsID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignW2RhdGEtaWQ9YWN0aW9uLWxvYWRdJyk7XG5cbiAgICB0aGlzLm5ld0dhbWVFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5vbk5ld0dhbWVDbGljayhldmVudCkpO1xuICAgIHRoaXMuc2F2ZUdhbWVFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5vblNhdmVHYW1lQ2xpY2soZXZlbnQpKTtcbiAgICB0aGlzLmxvYWRHYW1lRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHRoaXMub25Mb2FkR2FtZUNsaWNrKGV2ZW50KSk7XG5cbiAgICB0aGlzLmJvYXJkRWwgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1ib2FyZF0nKTtcblxuICAgIHRoaXMuYm9hcmRFbC5jbGFzc0xpc3QuYWRkKHRoZW1lKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYm9hcmRTaXplICoqIDI7IGkgKz0gMSkge1xuICAgICAgY29uc3QgY2VsbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjZWxsRWwuY2xhc3NMaXN0LmFkZCgnY2VsbCcsICdtYXAtdGlsZScsIGBtYXAtdGlsZS0ke2NhbGNUaWxlVHlwZShpLCB0aGlzLmJvYXJkU2l6ZSl9YCk7XG4gICAgICBjZWxsRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIChldmVudCkgPT4gdGhpcy5vbkNlbGxFbnRlcihldmVudCkpO1xuICAgICAgY2VsbEVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoZXZlbnQpID0+IHRoaXMub25DZWxsTGVhdmUoZXZlbnQpKTtcbiAgICAgIGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5vbkNlbGxDbGljayhldmVudCkpO1xuICAgICAgdGhpcy5ib2FyZEVsLmFwcGVuZENoaWxkKGNlbGxFbCk7XG4gICAgfVxuXG4gICAgdGhpcy5jZWxscyA9IEFycmF5LmZyb20odGhpcy5ib2FyZEVsLmNoaWxkcmVuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyBwb3NpdGlvbnMgKHdpdGggY2hhcnMpIG9uIGJvYXJkRWxcbiAgICpcbiAgICogQHBhcmFtIHBvc2l0aW9ucyBhcnJheSBvZiBQb3NpdGlvbmVkQ2hhcmFjdGVyIG9iamVjdHNcbiAgICovXG4gIHJlZHJhd1Bvc2l0aW9ucyhwb3NpdGlvbnMpIHtcbiAgICBmb3IgKGNvbnN0IGNlbGwgb2YgdGhpcy5jZWxscykge1xuICAgICAgY2VsbC5pbm5lckhUTUwgPSAnJztcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHBvc2l0aW9uIG9mIHBvc2l0aW9ucykge1xuICAgICAgY29uc3QgY2VsbEVsID0gdGhpcy5ib2FyZEVsLmNoaWxkcmVuW3Bvc2l0aW9uLnBvc2l0aW9uXTtcbiAgICAgIGNvbnN0IGNoYXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY2hhckVsLmNsYXNzTGlzdC5hZGQoJ2NoYXJhY3RlcicsIHBvc2l0aW9uLmNoYXJhY3Rlci50eXBlKTtcblxuICAgICAgY29uc3QgaGVhbHRoRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGhlYWx0aEVsLmNsYXNzTGlzdC5hZGQoJ2hlYWx0aC1sZXZlbCcpO1xuXG4gICAgICBjb25zdCBoZWFsdGhJbmRpY2F0b3JFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgaGVhbHRoSW5kaWNhdG9yRWwuY2xhc3NMaXN0LmFkZCgnaGVhbHRoLWxldmVsLWluZGljYXRvcicsIGBoZWFsdGgtbGV2ZWwtaW5kaWNhdG9yLSR7Y2FsY0hlYWx0aExldmVsKHBvc2l0aW9uLmNoYXJhY3Rlci5oZWFsdGgpfWApO1xuICAgICAgaGVhbHRoSW5kaWNhdG9yRWwuc3R5bGUud2lkdGggPSBgJHtwb3NpdGlvbi5jaGFyYWN0ZXIuaGVhbHRofSVgO1xuICAgICAgaGVhbHRoRWwuYXBwZW5kQ2hpbGQoaGVhbHRoSW5kaWNhdG9yRWwpO1xuXG4gICAgICBjaGFyRWwuYXBwZW5kQ2hpbGQoaGVhbHRoRWwpO1xuICAgICAgY2VsbEVsLmFwcGVuZENoaWxkKGNoYXJFbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBsaXN0ZW5lciB0byBtb3VzZSBlbnRlciBmb3IgY2VsbFxuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGFkZENlbGxFbnRlckxpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jZWxsRW50ZXJMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGxpc3RlbmVyIHRvIG1vdXNlIGxlYXZlIGZvciBjZWxsXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkQ2VsbExlYXZlTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLmNlbGxMZWF2ZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgbGlzdGVuZXIgdG8gbW91c2UgY2xpY2sgZm9yIGNlbGxcbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBhZGRDZWxsQ2xpY2tMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHRoaXMuY2VsbENsaWNrTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBsaXN0ZW5lciB0byBcIk5ldyBHYW1lXCIgYnV0dG9uIGNsaWNrXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgYWRkTmV3R2FtZUxpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5uZXdHYW1lTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBsaXN0ZW5lciB0byBcIlNhdmUgR2FtZVwiIGJ1dHRvbiBjbGlja1xuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGFkZFNhdmVHYW1lTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLnNhdmVHYW1lTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBsaXN0ZW5lciB0byBcIkxvYWQgR2FtZVwiIGJ1dHRvbiBjbGlja1xuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIGFkZExvYWRHYW1lTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICB0aGlzLmxvYWRHYW1lTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgb25DZWxsRW50ZXIoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIHRoaXMuY2VsbEVudGVyTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsLCBpbmRleCkpO1xuICB9XG5cbiAgb25DZWxsTGVhdmUoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIHRoaXMuY2VsbExlYXZlTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsLCBpbmRleCkpO1xuICB9XG5cbiAgb25DZWxsQ2xpY2soZXZlbnQpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZihldmVudC5jdXJyZW50VGFyZ2V0KTtcbiAgICB0aGlzLmNlbGxDbGlja0xpc3RlbmVycy5mb3JFYWNoKChvKSA9PiBvLmNhbGwobnVsbCwgaW5kZXgpKTtcbiAgfVxuXG4gIG9uTmV3R2FtZUNsaWNrKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLm5ld0dhbWVMaXN0ZW5lcnMuZm9yRWFjaCgobykgPT4gby5jYWxsKG51bGwpKTtcbiAgfVxuXG4gIG9uU2F2ZUdhbWVDbGljayhldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zYXZlR2FtZUxpc3RlbmVycy5mb3JFYWNoKChvKSA9PiBvLmNhbGwobnVsbCkpO1xuICB9XG5cbiAgb25Mb2FkR2FtZUNsaWNrKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmxvYWRHYW1lTGlzdGVuZXJzLmZvckVhY2goKG8pID0+IG8uY2FsbChudWxsKSk7XG4gIH1cblxuICBzdGF0aWMgc2hvd0Vycm9yKG1lc3NhZ2UsIHVuaWNvZGUpIHtcbiAgICBzaG93TW9kYWwobWVzc2FnZSwgdW5pY29kZSk7XG4gIH1cblxuICBzdGF0aWMgc2hvd01lc3NhZ2UobWVzc2FnZSwgdW5pY29kZSkge1xuICAgIHNob3dNb2RhbChtZXNzYWdlLCB1bmljb2RlKTtcbiAgfVxuXG4gIHN0YXRpYyBzaG93UG9pbnRzKG1lc3NhZ2UsIHVuaWNvZGUpIHtcbiAgICBzaG93TW9kYWwobWVzc2FnZSwgdW5pY29kZSk7XG4gIH1cblxuICBzZWxlY3RDZWxsKGluZGV4LCBjb2xvciA9ICd5ZWxsb3cnKSB7XG4gICAgdGhpcy5kZXNlbGVjdENlbGwoaW5kZXgpO1xuICAgIHRoaXMuY2VsbHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJywgYHNlbGVjdGVkLSR7Y29sb3J9YCk7XG4gIH1cblxuICBkZXNlbGVjdENlbGwoaW5kZXgpIHtcbiAgICBjb25zdCBjZWxsID0gdGhpcy5jZWxsc1tpbmRleF07XG4gICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKC4uLkFycmF5LmZyb20oY2VsbC5jbGFzc0xpc3QpXG4gICAgICAuZmlsdGVyKChvKSA9PiBvLnN0YXJ0c1dpdGgoJ3NlbGVjdGVkJykpKTtcbiAgfVxuXG4gIHNob3dDZWxsVG9vbHRpcChtZXNzYWdlLCBpbmRleCkge1xuICAgIHRoaXMuY2VsbHNbaW5kZXhdLnRpdGxlID0gbWVzc2FnZTtcbiAgfVxuXG4gIGhpZGVDZWxsVG9vbHRpcChpbmRleCkge1xuICAgIHRoaXMuY2VsbHNbaW5kZXhdLnRpdGxlID0gJyc7XG4gIH1cblxuICBzaG93RGFtYWdlKGluZGV4LCBkYW1hZ2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmNlbGxzW2luZGV4XTtcbiAgICAgIGNvbnN0IGRhbWFnZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgZGFtYWdlRWwudGV4dENvbnRlbnQgPSBkYW1hZ2U7XG4gICAgICBkYW1hZ2VFbC5jbGFzc0xpc3QuYWRkKCdkYW1hZ2UnKTtcbiAgICAgIGNlbGwuYXBwZW5kQ2hpbGQoZGFtYWdlRWwpO1xuXG4gICAgICBkYW1hZ2VFbC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoKSA9PiB7XG4gICAgICAgIGNlbGwucmVtb3ZlQ2hpbGQoZGFtYWdlRWwpO1xuICAgICAgICByZXNvbHZlKCdzaG93Jyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldEN1cnNvcihjdXJzb3IpIHtcbiAgICB0aGlzLmJvYXJkRWwuc3R5bGUuY3Vyc29yID0gY3Vyc29yO1xuICB9XG5cbiAgY2hlY2tCaW5kaW5nKCkge1xuICAgIGlmICh0aGlzLmNvbnRhaW5lciA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdHYW1lUGxheSBub3QgYmluZCB0byBET00nKTtcbiAgICB9XG4gIH1cbn1cbiIsImNvbnN0IHRoZW1lcyA9IHtcbiAgcHJhaXJpZTogJ3ByYWlyaWUnLFxuICBkZXNlcnQ6ICdkZXNlcnQnLFxuICBhcmN0aWM6ICdhcmN0aWMnLFxuICBtb3VudGFpbjogJ21vdW50YWluJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRoZW1lcztcbiIsIi8qKlxuICog0JHQsNC30L7QstGL0Lkg0LrQu9Cw0YHRgSwg0L7RgiDQutC+0YLQvtGA0L7Qs9C+INC90LDRgdC70LXQtNGD0Y7RgtGB0Y8g0LrQu9Cw0YHRgdGLINC/0LXRgNGB0L7QvdCw0LbQtdC5XG4gKiBAcHJvcGVydHkgbGV2ZWwgLSDRg9GA0L7QstC10L3RjCDQv9C10YDRgdC+0L3QsNC20LAsINC+0YIgMSDQtNC+IDRcbiAqIEBwcm9wZXJ0eSBhdHRhY2sgLSDQv9C+0LrQsNC30LDRgtC10LvRjCDQsNGC0LDQutC4XG4gKiBAcHJvcGVydHkgZGVmZW5jZSAtINC/0L7QutCw0LfQsNGC0LXQu9GMINC30LDRidC40YLRi1xuICogQHByb3BlcnR5IGhlYWx0aCAtINC30LTQvtGA0L7QstGM0LUg0L/QtdGA0YHQvtC90LDQttCwXG4gKiBAcHJvcGVydHkgdHlwZSAtINGB0YLRgNC+0LrQsCDRgSDQvtC00L3QuNC8INC40Lcg0LTQvtC/0YPRgdGC0LjQvNGL0YUg0LfQvdCw0YfQtdC90LjQuTpcbiAqIHN3b3Jkc21hblxuICogYm93bWFuXG4gKiBtYWdpY2lhblxuICogZGFlbW9uXG4gKiB1bmRlYWRcbiAqIHZhbXBpcmVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IobGV2ZWwsIHR5cGUgPSAnZ2VuZXJpYycpIHtcbiAgICBpZiAobmV3LnRhcmdldC5uYW1lID09PSAnQ2hhcmFjdGVyJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNsYXNzJyk7XG4gICAgfVxuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgIHRoaXMuYXR0YWNrID0gMDtcbiAgICB0aGlzLmRlZmVuY2UgPSAwO1xuICAgIHRoaXMuaGVhbHRoID0gNTA7XG4gICAgLy8gVE9ETzog0LLRi9Cx0YDQvtGB0LjRgtC1INC40YHQutC70Y7Rh9C10L3QuNC1LCDQtdGB0LvQuCDQutGC0L4t0YLQviDQuNGB0L/QvtC70YzQt9GD0LXRgiBcIm5ldyBDaGFyYWN0ZXIoKVwiXG4gIH1cbn1cbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSAnLi4vQ2hhcmFjdGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm93bWFuIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IobGV2ZWwgPSAxKSB7XG4gICAgc3VwZXIobGV2ZWwsICdib3dtYW4nKTtcbiAgICB0aGlzLmF0dGFjayA9IDI1O1xuICAgIHRoaXMuZGVmZW5jZSA9IDI1O1xuICB9XG59XG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4uL0NoYXJhY3Rlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN3b3Jkc21hbiBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsID0gMSkge1xuICAgIHN1cGVyKGxldmVsLCAnc3dvcmRzbWFuJyk7XG4gICAgdGhpcy5hdHRhY2sgPSA0MDtcbiAgICB0aGlzLmRlZmVuY2UgPSAxMDtcbiAgfVxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tICcuLi9DaGFyYWN0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWdpY2lhbiBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsID0gMSkge1xuICAgIHN1cGVyKGxldmVsLCAnbWFnaWNpYW4nKTtcbiAgICB0aGlzLmF0dGFjayA9IDEwO1xuICAgIHRoaXMuZGVmZW5jZSA9IDQwO1xuICB9XG59XG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4uL0NoYXJhY3Rlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbXBpcmUgZXh0ZW5kcyBDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihsZXZlbCA9IDEpIHtcbiAgICBzdXBlcihsZXZlbCwgJ3ZhbXBpcmUnKTtcbiAgICB0aGlzLmF0dGFjayA9IDI1O1xuICAgIHRoaXMuZGVmZW5jZSA9IDI1O1xuICB9XG59XG4iLCJpbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4uL0NoYXJhY3Rlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhZW1vbiBleHRlbmRzIENoYXJhY3RlciB7XG4gIGNvbnN0cnVjdG9yKGxldmVsID0gMSkge1xuICAgIHN1cGVyKGxldmVsLCAnZGFlbW9uJyk7XG4gICAgdGhpcy5hdHRhY2sgPSAxMDtcbiAgICB0aGlzLmRlZmVuY2UgPSAxMDtcbiAgfVxufVxuIiwiaW1wb3J0IENoYXJhY3RlciBmcm9tICcuLi9DaGFyYWN0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbmRlYWQgZXh0ZW5kcyBDaGFyYWN0ZXIge1xuICBjb25zdHJ1Y3RvcihsZXZlbCA9IDEpIHtcbiAgICBzdXBlcihsZXZlbCwgJ3VuZGVhZCcpO1xuICAgIHRoaXMuYXR0YWNrID0gNDA7XG4gICAgdGhpcy5kZWZlbmNlID0gMTA7XG4gIH1cbn1cbiIsIi8qKlxuICog0JrQu9Cw0YHRgSwg0L/RgNC10LTRgdGC0LDQstC70Y/RjtGJ0LjQuSDQv9C10YDRgdC+0L3QsNC20LXQuSDQutC+0LzQsNC90LTRi1xuICpcbiAqIEB0b2RvINCh0LDQvNC+0YHRgtC+0Y/RgtC10LvRjNC90L4g0L/RgNC+0LTRg9C80LDQudGC0LUg0YXRgNCw0L3QtdC90LjQtSDQv9C10YDRgdC+0L3QsNC20LXQuSDQsiDQutC70LDRgdGB0LVcbiAqINCd0LDQv9GA0LjQvNC10YBcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY29uc3QgY2hhcmFjdGVycyA9IFtuZXcgU3dvcmRzbWFuKDIpLCBuZXcgQm93bWFuKDEpXVxuICogY29uc3QgdGVhbSA9IG5ldyBUZWFtKGNoYXJhY3RlcnMpO1xuICpcbiAqIHRlYW0uY2hhcmFjdGVycyAvLyBbc3dvcmRzbWFuLCBib3dtYW5dXG4gKiBgYGBcbiAqICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZWFtIHtcbiAgLy8gVE9ETzogd3JpdGUgeW91ciBsb2dpYyBoZXJlXG4gIGNvbnN0cnVjdG9yKGNoYXJhY3RlcnMpIHtcbiAgICB0aGlzLmNoYXJhY3RlcnMgPSBjaGFyYWN0ZXJzO1xuICB9XG5cbiAgLy8gYWRkQ2hhcmFjdGVycyhhcnJDaGFyYWN0ZXJzKSB7XG4gIC8vICAgdGhpcy5jaGFyYWN0ZXJzID0gWy4uLnRoaXMuY2hhcmFjdGVyc107XG4gIC8vIH1cbn1cbiIsImltcG9ydCBDaGFyYWN0ZXIgZnJvbSAnLi9DaGFyYWN0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3NpdGlvbmVkQ2hhcmFjdGVyIHtcbiAgY29uc3RydWN0b3IoY2hhcmFjdGVyLCBwb3NpdGlvbikge1xuICAgIGlmICghKGNoYXJhY3RlciBpbnN0YW5jZW9mIENoYXJhY3RlcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2hhcmFjdGVyIG11c3QgYmUgaW5zdGFuY2Ugb2YgQ2hhcmFjdGVyIG9yIGl0cyBjaGlsZHJlbicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcG9zaXRpb24gIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Bvc2l0aW9uIG11c3QgYmUgYSBudW1iZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLmNoYXJhY3RlciA9IGNoYXJhY3RlcjtcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7IGdlbmVyYXRlVGVhbSB9IGZyb20gJy4vZ2VuZXJhdG9ycyc7XG5pbXBvcnQgUG9zaXRpb25lZENoYXJhY3RlciBmcm9tICcuL1Bvc2l0aW9uZWRDaGFyYWN0ZXInO1xuaW1wb3J0IEJvd21hbiBmcm9tICcuL2NoYXJhY3RlcnMvQm93bWFuJztcbmltcG9ydCBTd29yZHNtYW4gZnJvbSAnLi9jaGFyYWN0ZXJzL1N3b3Jkc21hbic7XG5pbXBvcnQgTWFnaWNpYW4gZnJvbSAnLi9jaGFyYWN0ZXJzL01hZ2ljaWFuJztcbmltcG9ydCBEYWVtb24gZnJvbSAnLi9jaGFyYWN0ZXJzL0RhZW1vbic7XG5pbXBvcnQgVW5kZWFkIGZyb20gJy4vY2hhcmFjdGVycy9VbmRlYWQnO1xuaW1wb3J0IFZhbXBpcmUgZnJvbSAnLi9jaGFyYWN0ZXJzL1ZhbXBpcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hvb3NlUmFuZFBvc2l0aW9ucyhib2FyZFNpemUsIG9wcG9uZW50ID0gZmFsc2UpIHtcbiAgY29uc3QgY2VsbHMgPSBbXTtcbiAgaWYgKCFvcHBvbmVudCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmRTaXplICoqIDI7IGkgKz0gOCkge1xuICAgICAgY2VsbHMucHVzaChpKTtcbiAgICAgIGNlbGxzLnB1c2goaSArIDEpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gYm9hcmRTaXplIC0gMjsgaSA8IGJvYXJkU2l6ZSAqKiAyOyBpICs9IGJvYXJkU2l6ZSkge1xuICAgICAgY2VsbHMucHVzaChpKTtcbiAgICAgIGNlbGxzLnB1c2goaSArIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2VsbHM7XG59XG5cbmZ1bmN0aW9uIGNob29zZVJhbmRQb3NpdGlvbihib2FyZFNpemUsIG9wcG9uZW50ID0gZmFsc2UpIHtcbiAgY29uc3QgY2VsbHMgPSBjaG9vc2VSYW5kUG9zaXRpb25zKGJvYXJkU2l6ZSwgb3Bwb25lbnQpO1xuICBjb25zdCByYW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2VsbHMubGVuZ3RoKTtcbiAgcmV0dXJuIGNlbGxzW3JhbmRdO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQb3NpdGlvbnNDaGFyKHBsYXllclR5cGVzLCBib2FyZFNpemUsIG9wcG9uZW50LCBbbWF4TGV2ZWwsIGNoYXJDb3VudF0pIHtcclxuICBjb25zdCBwb3NpdGlvbnMgPSBbXTtcclxuICBpZiAobWF4TGV2ZWwgPj0gNCkgbWF4TGV2ZWwgPSA0O1xyXG4gIGlmIChjaGFyQ291bnQgPj0gMTApIGNoYXJDb3VudCA9IDEwO1xyXG4gIGNvbnN0IHRlYW0gPSBnZW5lcmF0ZVRlYW0ocGxheWVyVHlwZXMsIG1heExldmVsLCBjaGFyQ291bnQpO1xyXG5cclxuICBjb25zdCByYW5kUG9zaXRpb25zID0gW107XHJcbiAgdGVhbS5jaGFyYWN0ZXJzLmZvckVhY2goKGNoYXIpID0+IHtcclxuICAgIGxldCByYW5kUG9zaXRpb247XHJcbiAgICBsZXQgaXNQb3NpdGlvblVuaXF1ZSA9IGZhbHNlO1xyXG4gICAgZG8ge1xyXG4gICAgICByYW5kUG9zaXRpb24gPSBjaG9vc2VSYW5kUG9zaXRpb24oYm9hcmRTaXplLCBvcHBvbmVudCk7XHJcbiAgICAgIGlmIChyYW5kUG9zaXRpb25zLmZpbmQoKGVsKSA9PiBlbCA9PT0gcmFuZFBvc2l0aW9uKSkge1xyXG4gICAgICAgIHJhbmRQb3NpdGlvbiA9IGNob29zZVJhbmRQb3NpdGlvbihib2FyZFNpemUsIG9wcG9uZW50KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByYW5kUG9zaXRpb25zLnB1c2gocmFuZFBvc2l0aW9uKTtcclxuICAgICAgICBpc1Bvc2l0aW9uVW5pcXVlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSB3aGlsZSAoIWlzUG9zaXRpb25VbmlxdWUpO1xyXG4gICAgcG9zaXRpb25zLnB1c2gobmV3IFBvc2l0aW9uZWRDaGFyYWN0ZXIoY2hhciwgcmFuZFBvc2l0aW9uKSk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHBvc2l0aW9ucztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc3RvcmVDaGFyKG9iaikge1xyXG4gIGxldCBDaGFyQ2xhc3M7XHJcbiAgc3dpdGNoIChvYmouY2hhcmFjdGVyLnR5cGUpIHtcclxuICAgIGNhc2UgJ2Jvd21hbic6XHJcbiAgICAgIENoYXJDbGFzcyA9IEJvd21hbjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdzd29yZHNtYW4nOlxyXG4gICAgICBDaGFyQ2xhc3MgPSBTd29yZHNtYW47XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnbWFnaWNpYW4nOlxyXG4gICAgICBDaGFyQ2xhc3MgPSBNYWdpY2lhbjtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdkYWVtb24nOlxyXG4gICAgICBDaGFyQ2xhc3MgPSBEYWVtb247XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAndW5kZWFkJzpcclxuICAgICAgQ2hhckNsYXNzID0gVW5kZWFkO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3ZhbXBpcmUnOlxyXG4gICAgICBDaGFyQ2xhc3MgPSBWYW1waXJlO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6IGJyZWFrO1xyXG4gIH1cclxuICBjb25zdCBjaGFyID0gbmV3IENoYXJDbGFzcyhvYmouY2hhcmFjdGVyLmxldmVsKTtcclxuICBjb25zdCByZXN0b3JlUG9zaXRpb25lZENoYXIgPSBuZXcgUG9zaXRpb25lZENoYXJhY3RlcihjaGFyLCBvYmoucG9zaXRpb24pO1xyXG4gIHJlc3RvcmVQb3NpdGlvbmVkQ2hhci5jaGFyYWN0ZXIuYXR0YWNrID0gb2JqLmNoYXJhY3Rlci5hdHRhY2s7XHJcbiAgcmVzdG9yZVBvc2l0aW9uZWRDaGFyLmNoYXJhY3Rlci5oZWFsdGggPSBvYmouY2hhcmFjdGVyLmhlYWx0aDtcclxuICByZXN0b3JlUG9zaXRpb25lZENoYXIuY2hhcmFjdGVyLmRlZmVuY2UgPSBvYmouY2hhcmFjdGVyLmRlZmVuY2U7XHJcblxyXG4gIHJldHVybiByZXN0b3JlUG9zaXRpb25lZENoYXI7XHJcbn1cclxuIiwiaW1wb3J0IFRlYW0gZnJvbSAnLi9UZWFtJztcblxuLyoqXG4gKiDQpNC+0YDQvNC40YDRg9C10YIg0Y3QutC30LXQvNC/0LvRj9GAINC/0LXRgNGB0L7QvdCw0LbQsCDQuNC3INC80LDRgdGB0LjQstCwIGFsbG93ZWRUeXBlcyDRgdC+XG4gKiDRgdC70YPRh9Cw0LnQvdGL0Lwg0YPRgNC+0LLQvdC10Lwg0L7RgiAxINC00L4gbWF4TGV2ZWxcbiAqXG4gKiBAcGFyYW0gYWxsb3dlZFR5cGVzINC80LDRgdGB0LjQsiDQutC70LDRgdGB0L7QslxuICogQHBhcmFtIG1heExldmVsINC80LDQutGB0LjQvNCw0LvRjNC90YvQuSDQstC+0LfQvNC+0LbQvdGL0Lkg0YPRgNC+0LLQtdC90Ywg0L/QtdGA0YHQvtC90LDQttCwXG4gKiBAcmV0dXJucyDQs9C10L3QtdGA0LDRgtC+0YAsINC60L7RgtC+0YDRi9C5INC/0YDQuCDQutCw0LbQtNC+0Lwg0LLRi9C30L7QstC1XG4gKiDQstC+0LfQstGA0LDRidCw0LXRgiDQvdC+0LLRi9C5INGN0LrQt9C10LzQv9C70Y/RgCDQutC70LDRgdGB0LAg0L/QtdGA0YHQvtC90LDQttCwXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24qIGNoYXJhY3RlckdlbmVyYXRvcihhbGxvd2VkVHlwZXMsIG1heExldmVsKSB7XG4gIC8vIFRPRE86IHdyaXRlIGxvZ2ljIGhlcmVcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCByYW5kb21MZXZlbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heExldmVsICsgMSk7XG4gICAgY29uc3QgUmFuZG9tQ2xhc3MgPSBhbGxvd2VkVHlwZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxsb3dlZFR5cGVzLmxlbmd0aCldO1xuICAgIHlpZWxkIG5ldyBSYW5kb21DbGFzcyhyYW5kb21MZXZlbCk7XG4gIH1cbn1cblxuLyoqXG4gKiDQpNC+0YDQvNC40YDRg9C10YIg0LzQsNGB0YHQuNCyINC/0LXRgNGB0L7QvdCw0LbQtdC5INC90LAg0L7RgdC90L7QstC1IGNoYXJhY3RlckdlbmVyYXRvclxuICogQHBhcmFtIGFsbG93ZWRUeXBlcyDQvNCw0YHRgdC40LIg0LrQu9Cw0YHRgdC+0LJcbiAqIEBwYXJhbSBtYXhMZXZlbCDQvNCw0LrRgdC40LzQsNC70YzQvdGL0Lkg0LLQvtC30LzQvtC20L3Ri9C5INGD0YDQvtCy0LXQvdGMINC/0LXRgNGB0L7QvdCw0LbQsFxuICogQHBhcmFtIGNoYXJhY3RlckNvdW50INC60L7Qu9C40YfQtdGB0YLQstC+INC/0LXRgNGB0L7QvdCw0LbQtdC5LCDQutC+0YLQvtGA0L7QtSDQvdGD0LbQvdC+INGB0YTQvtGA0LzQuNGA0L7QstCw0YLRjFxuICogQHJldHVybnMg0Y3QutC30LXQvNC/0LvRj9GAIFRlYW0sINGF0YDQsNC90Y/RidC40Lkg0Y3QutC30LXQvNC/0LvRj9GA0Ysg0L/QtdGA0YHQvtC90LDQttC10LkuXG4gKiDQmtC+0LvQuNGH0LXRgdGC0LLQviDQv9C10YDRgdC+0L3QsNC20LXQuSDQsiDQutC+0LzQsNC90LTQtSAtIGNoYXJhY3RlckNvdW50XG4gKiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVGVhbShhbGxvd2VkVHlwZXMsIG1heExldmVsLCBjaGFyYWN0ZXJDb3VudCkge1xuICAvLyBUT0RPOiB3cml0ZSBsb2dpYyBoZXJlXG4gIGNvbnN0IGNoYXJhY3RlcnMgPSBbXTtcbiAgY29uc3QgcGxheWVyR2VuZXJhdG9yID0gY2hhcmFjdGVyR2VuZXJhdG9yKGFsbG93ZWRUeXBlcywgbWF4TGV2ZWwpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJhY3RlckNvdW50OyBpICs9IDEpIHtcbiAgICBjaGFyYWN0ZXJzLnB1c2gocGxheWVyR2VuZXJhdG9yLm5leHQoKS52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBUZWFtKGNoYXJhY3RlcnMpO1xufVxuIiwiaW1wb3J0IEJvd21hbiBmcm9tICcuL2NoYXJhY3RlcnMvQm93bWFuJztcbmltcG9ydCBTd29yZHNtYW4gZnJvbSAnLi9jaGFyYWN0ZXJzL1N3b3Jkc21hbic7XG5pbXBvcnQgTWFnaWNpYW4gZnJvbSAnLi9jaGFyYWN0ZXJzL01hZ2ljaWFuJztcbmltcG9ydCBWYW1waXJlIGZyb20gJy4vY2hhcmFjdGVycy9WYW1waXJlJztcbmltcG9ydCBEYWVtb24gZnJvbSAnLi9jaGFyYWN0ZXJzL0RhZW1vbic7XG5pbXBvcnQgVW5kZWFkIGZyb20gJy4vY2hhcmFjdGVycy9VbmRlYWQnO1xuaW1wb3J0IGNyZWF0ZVBvc2l0aW9uc0NoYXIsIHsgY2hvb3NlUmFuZFBvc2l0aW9ucyB9IGZyb20gJy4vY3JlYXRlUG9zaXRpb25zJztcbmltcG9ydCB0aGVtZXMgZnJvbSAnLi90aGVtZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lU3RhdGUge1xuICBjb25zdHJ1Y3RvcihnYW1lUGxheSkge1xuICAgIHRoaXMubGV2ZWxHYW1lID0gMTtcbiAgICB0aGlzLmdhbWVQbGF5ID0gZ2FtZVBsYXk7XG4gICAgdGhpcy51c2VyVGVhbSA9IFtdO1xuICAgIHRoaXMuY29tcFRlYW0gPSBbXTtcbiAgICB0aGlzLmFsbFBsYXllciA9IFtdO1xuICAgIHRoaXMuaXNNb3ZlID0gJ3VzZXInO1xuICAgIHRoaXMuY291bnRDbGljayA9IDA7XG4gICAgdGhpcy5zdXJ2aXZvcyA9IFtdO1xuICAgIHRoaXMuaGlzdG9yeSA9IFtdO1xuICAgIHRoaXMucG9pbnRzID0gMDtcbiAgICB0aGlzLmJsb2NrID0gZmFsc2U7XG5cbiAgICB0aGlzLmluaXROZXdUZWFtcygpO1xuICB9XG5cbiAgZ2V0VXNlclRlYW0oW21heExldmVsLCBjaGFyQ291bnRdKSB7XG4gICAgY29uc3QgdXNlclR5cGVzID0gW0Jvd21hbiwgU3dvcmRzbWFuLCBNYWdpY2lhbl07XG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cclxuICAgIGNvbnN0IHVzZXJUZWFtID0gY3JlYXRlUG9zaXRpb25zQ2hhcih1c2VyVHlwZXMsIHRoaXMuZ2FtZVBsYXkuYm9hcmRTaXplLCBmYWxzZSwgW21heExldmVsLCBjaGFyQ291bnRdKTtcclxuICAgIHRoaXMudXNlclRlYW0gPSB1c2VyVGVhbTtcclxuICAgIHJldHVybiB1c2VyVGVhbTtcclxuICB9XHJcblxyXG4gIGdldENvbXBUZWFtKFttYXhMZXZlbCwgY2hhckNvdW50XSkge1xyXG4gICAgY29uc3QgY29tcFR5cGVzID0gW1ZhbXBpcmUsIERhZW1vbiwgVW5kZWFkXTtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlICovXHJcbiAgICBjb25zdCBjb21wVGVhbSA9IGNyZWF0ZVBvc2l0aW9uc0NoYXIoY29tcFR5cGVzLCB0aGlzLmdhbWVQbGF5LmJvYXJkU2l6ZSwgdHJ1ZSwgW21heExldmVsLCBjaGFyQ291bnRdKTtcclxuICAgIHRoaXMuY29tcFRlYW0gPSBjb21wVGVhbTtcclxuICAgIHJldHVybiBjb21wVGVhbTtcclxuICB9XHJcblxyXG4gIGdldEFsbFBvc2l0aW9ucyhhcnJheTEsIGFycmF5Mikge1xyXG4gICAgaWYgKCFhcnJheTEgfHwgYXJyYXkxLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGFycmF5MjtcclxuICAgIGlmICghYXJyYXkyIHx8IGFycmF5Mi5sZW5ndGggPT09IDApIHJldHVybiBhcnJheTE7XHJcbiAgICByZXR1cm4gYXJyYXkxLmNvbmNhdChhcnJheTIpO1xyXG4gIH1cclxuXHJcbiAgaW5pdE5ld1RlYW1zKCkge1xyXG4gICAgdGhpcy51c2VyVGVhbSA9IHRoaXMuZ2V0VXNlclRlYW0oW3RoaXMubGV2ZWxHYW1lLCB0aGlzLmxldmVsR2FtZV0pO1xyXG4gICAgdGhpcy5jb21wVGVhbSA9IHRoaXMuZ2V0Q29tcFRlYW0oW3RoaXMubGV2ZWxHYW1lLCB0aGlzLmxldmVsR2FtZV0pO1xyXG4gICAgdGhpcy5hbGxQbGF5ZXIgPSB0aGlzLmdldEFsbFBvc2l0aW9ucyh0aGlzLnVzZXJUZWFtLCB0aGlzLmNvbXBUZWFtKTtcclxuICB9XHJcblxyXG4gIGdldEluZm8ocGxheWVyKSB7XHJcbiAgICByZXR1cm4gYFxcdXsxRjM5Nn0ke3BsYXllci5sZXZlbH0gXFx1MjY5NCR7cGxheWVyLmF0dGFja30gXFx1ezFGNkUxfSR7cGxheWVyLmRlZmVuY2V9IFxcdTI3NjQke3BsYXllci5oZWFsdGh9YDtcclxuICB9XHJcblxyXG4gIGxldmVsVXAoKSB7XHJcbiAgICBmb3IgKGNvbnN0IHBsYXllciBvZiB0aGlzLmFsbFBsYXllcikge1xyXG4gICAgICBjb25zdCBjaGFyID0gcGxheWVyLmNoYXJhY3RlcjtcclxuICAgICAgY2hhci5hdHRhY2sgPSB0aGlzLnVwQXR0YWNrRGVmZW5jZShjaGFyLmF0dGFjaywgY2hhci5oZWFsdGgpO1xyXG4gICAgICBjaGFyLmRlZmVuY2UgPSB0aGlzLnVwQXR0YWNrRGVmZW5jZShjaGFyLmRlZmVuY2UsIGNoYXIuaGVhbHRoKTtcclxuICAgICAgY2hhci5sZXZlbCA9IChjaGFyLmxldmVsICsgMSkgPD0gNCA/IGNoYXIubGV2ZWwgKyAxIDogY2hhci5sZXZlbCA9IDQ7XHJcbiAgICAgIGNoYXIuaGVhbHRoID0gKGNoYXIuaGVhbHRoICsgODApIDwgMTAwID8gY2hhci5oZWFsdGggKyA4MCA6IDEwMDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdhbWVQbGF5LmRyYXdVaShPYmplY3QudmFsdWVzKHRoZW1lcylbdGhpcy5sZXZlbEdhbWUgLSAxXSk7XHJcbiAgICBjb25zdCBuZXdVc2VyVGVhbSA9IHRoaXMuZ2V0VXNlclRlYW0oW3RoaXMubGV2ZWxHYW1lIC0gMSwgdGhpcy5sZXZlbEdhbWVdKTtcclxuICAgIGNvbnN0IGFsbFN0YXJ0UG9zaXRpb25zID0gY2hvb3NlUmFuZFBvc2l0aW9ucyh0aGlzLmdhbWVQbGF5LmJvYXJkU2l6ZSk7XHJcbiAgICBuZXdVc2VyVGVhbS5mb3JFYWNoKChpdGVtKSA9PiBhbGxTdGFydFBvc2l0aW9ucy5zcGxpY2UoYWxsU3RhcnRQb3NpdGlvbnMuaW5kZXhPZihpdGVtLnBvc2l0aW9uKSwgMSkpO1xyXG4gICAgdGhpcy5zdXJ2aXZvcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIGlmICghYWxsU3RhcnRQb3NpdGlvbnMuaW5jbHVkZXMoaXRlbS5wb3NpdGlvbikpIHtcclxuICAgICAgICBjb25zdCByYW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxsU3RhcnRQb3NpdGlvbnMubGVuZ3RoKTtcclxuICAgICAgICBpdGVtLnBvc2l0aW9uID0gYWxsU3RhcnRQb3NpdGlvbnNbcmFuZF07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMudXNlclRlYW0gPSB0aGlzLnN1cnZpdm9zLmNvbmNhdChuZXdVc2VyVGVhbSk7XHJcbiAgICB0aGlzLmNvbXBUZWFtID0gdGhpcy5nZXRDb21wVGVhbShbdGhpcy5sZXZlbEdhbWUsIHRoaXMubGV2ZWxHYW1lICsgdGhpcy5hbGxQbGF5ZXIubGVuZ3RoXSk7XHJcbiAgICB0aGlzLmFsbFBsYXllciA9IHRoaXMuZ2V0QWxsUG9zaXRpb25zKHRoaXMudXNlclRlYW0sIHRoaXMuY29tcFRlYW0pO1xyXG4gICAgdGhpcy5jb3VudENsaWNrID0gMDtcclxuICB9XHJcblxyXG4gIHVwQXR0YWNrRGVmZW5jZShiZWZvcmUsIGxpZmUpIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWF4KGJlZm9yZSwgKGJlZm9yZSAqICg4MCArIGxpZmUpIC8gMTAwKSkpO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlU3VtUG9pbnRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlclRlYW0ucmVkdWNlKChhLCBiKSA9PiBhICsgYi5jaGFyYWN0ZXIuaGVhbHRoLCAwKTtcclxuICB9XHJcbn1cclxuIiwiY29uc3QgY3Vyc29ycyA9IHtcbiAgYXV0bzogJ2F1dG8nLFxuICBwb2ludGVyOiAncG9pbnRlcicsXG4gIGNyb3NzaGFpcjogJ2Nyb3NzaGFpcicsXG4gIG5vdGFsbG93ZWQ6ICdub3QtYWxsb3dlZCcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjdXJzb3JzO1xuIiwiLy8gY3JlYXRlIHR3by1kaW1lbnNpb25hbCBmaWVsZFxuZnVuY3Rpb24gZ2V0VGFibGUoY2VsbHMsIGJvYXJkU2l6ZSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgcyA9IDAsIGUgPSBib2FyZFNpemU7IHMgPCBjZWxscy5sZW5ndGg7IHMgKz0gYm9hcmRTaXplLCBlICs9IGJvYXJkU2l6ZSkge1xuICAgIHJlc3VsdC5wdXNoKGNlbGxzLnNsaWNlKHMsIGUpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRBdHRhY2tDZWxscyhjZWxscywgaW5kZXgsIG1heFJhbmdlKSB7XG4gIGNvbnN0IGFsbG93ZWRDZWxscyA9IFtdO1xuICBsZXQgZmluZEluZGV4O1xuICBsZXQgcm93O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgcm93ID0gaTtcbiAgICBmaW5kSW5kZXggPSBjZWxsc1tpXS5maW5kSW5kZXgoKGVsKSA9PiBlbCA9PT0gaW5kZXgpO1xuICAgIGlmIChmaW5kSW5kZXggIT09IC0xKSBicmVhaztcbiAgfVxuICBmb3IgKGxldCBpID0gLW1heFJhbmdlOyBpIDw9IG1heFJhbmdlOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBqID0gLW1heFJhbmdlOyBqIDw9IG1heFJhbmdlOyBqICs9IDEpIHtcbiAgICAgIGlmICgocm93ICsgaSkgPj0gMCAmJiAoZmluZEluZGV4ICsgaikgPj0gMFxuICAgICAgICAmJiAocm93ICsgaSA8IGNlbGxzLmxlbmd0aCkgJiYgKGZpbmRJbmRleCArIGogPCBjZWxscy5sZW5ndGgpXG4gICAgICAgICYmIChjZWxsc1tyb3cgKyBpXVtmaW5kSW5kZXggKyBqXSkgIT09IGluZGV4KSB7XG4gICAgICAgIGFsbG93ZWRDZWxscy5wdXNoKGNlbGxzW3JvdyArIGldW2ZpbmRJbmRleCArIGpdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFsbG93ZWRDZWxscztcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkNlbGxzKGNlbGxzLCBpbmRleCwgbWF4UmFuZ2UpIHtcbiAgY29uc3QgdHJhbnNpdENlbGxzID0gW107XG4gIGxldCBmaW5kSW5kZXg7XG4gIGxldCByb3c7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICByb3cgPSBpO1xuICAgIGZpbmRJbmRleCA9IGNlbGxzW2ldLmZpbmRJbmRleCgoZWwpID0+IGVsID09PSBpbmRleCk7XG4gICAgaWYgKGZpbmRJbmRleCAhPT0gLTEpIGJyZWFrO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbWF4UmFuZ2U7IGkgKz0gMSkge1xuICAgIGlmIChmaW5kSW5kZXggLSBpID49IDApIHtcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3Jvd11bZmluZEluZGV4IC0gaV0pO1xuICAgIH1cblxuICAgIGlmIChmaW5kSW5kZXggKyBpIDwgY2VsbHMubGVuZ3RoKSB7XG4gICAgICB0cmFuc2l0Q2VsbHMucHVzaChjZWxsc1tyb3ddW2ZpbmRJbmRleCArIGldKTtcbiAgICB9XG4gICAgaWYgKHJvdyArIGkgPCBjZWxscy5sZW5ndGggJiYgZmluZEluZGV4IC0gaSA+PSAwKSB7XG4gICAgICB0cmFuc2l0Q2VsbHMucHVzaChjZWxsc1tyb3cgKyBpXVtmaW5kSW5kZXggLSBpXSk7XG4gICAgfVxuXG4gICAgaWYgKHJvdyArIGkgPCBjZWxscy5sZW5ndGggJiYgZmluZEluZGV4ICsgaSA8IGNlbGxzLmxlbmd0aCkge1xuICAgICAgdHJhbnNpdENlbGxzLnB1c2goY2VsbHNbcm93ICsgaV1bZmluZEluZGV4ICsgaV0pO1xuICAgIH1cblxuICAgIGlmIChyb3cgLSBpID49IDAgJiYgZmluZEluZGV4IC0gaSA+PSAwKSB7XG4gICAgICB0cmFuc2l0Q2VsbHMucHVzaChjZWxsc1tyb3cgLSBpXVtmaW5kSW5kZXggLSBpXSk7XG4gICAgfVxuXG4gICAgaWYgKHJvdyAtIGkgPj0gMCAmJiBmaW5kSW5kZXggKyBpIDwgY2VsbHMubGVuZ3RoKSB7XG4gICAgICB0cmFuc2l0Q2VsbHMucHVzaChjZWxsc1tyb3cgLSBpXVtmaW5kSW5kZXggKyBpXSk7XG4gICAgfVxuXG4gICAgaWYgKHJvdyAtIGkgPj0gMCkge1xuICAgICAgdHJhbnNpdENlbGxzLnB1c2goY2VsbHNbcm93IC0gaV1bZmluZEluZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKHJvdyArIGkgPCBjZWxscy5sZW5ndGgpIHtcbiAgICAgIHRyYW5zaXRDZWxscy5wdXNoKGNlbGxzW3JvdyArIGldW2ZpbmRJbmRleF0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJhbnNpdENlbGxzO1xufVxuXG4vLyByZXR1cm5zIGNlbGxzIGFsbG93ZWQgZm9yIGFjdGlvblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkF0dGFja0NlbGxzKGluZGV4LCBib2FyZFNpemUsIG1heFJhbmdlLCBhdHRhY2sgPSBmYWxzZSkge1xuICBjb25zdCBhcnJheUNlbGxzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmRTaXplICoqIDI7IGkgKz0gMSkge1xuICAgIGFycmF5Q2VsbHMucHVzaChpKTtcbiAgfVxuXG4gIGNvbnN0IHRhYmxlQ2VsbHMgPSBnZXRUYWJsZShhcnJheUNlbGxzLCBib2FyZFNpemUpO1xuICBpZiAoYXR0YWNrKSB7XG4gICAgcmV0dXJuIGdldEF0dGFja0NlbGxzKHRhYmxlQ2VsbHMsIGluZGV4LCBtYXhSYW5nZSk7XG4gIH1cbiAgcmV0dXJuIGdldFRyYW5zaXRpb25DZWxscyh0YWJsZUNlbGxzLCBpbmRleCwgbWF4UmFuZ2UpO1xufVxuIiwiLyoqXG4gKiBFbnRyeSBwb2ludCBvZiBhcHA6IGRvbid0IGNoYW5nZSB0aGlzXG4gKi9cbmltcG9ydCBHYW1lUGxheSBmcm9tICcuL0dhbWVQbGF5JztcbmltcG9ydCBHYW1lQ29udHJvbGxlciBmcm9tICcuL0dhbWVDb250cm9sbGVyJztcbmltcG9ydCBHYW1lU3RhdGVTZXJ2aWNlIGZyb20gJy4vR2FtZVN0YXRlU2VydmljZSc7XG5cbmNvbnN0IGdhbWVQbGF5ID0gbmV3IEdhbWVQbGF5KCk7XG5nYW1lUGxheS5iaW5kVG9ET00oZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dhbWUtY29udGFpbmVyJykpO1xuXG5jb25zdCBzdGF0ZVNlcnZpY2UgPSBuZXcgR2FtZVN0YXRlU2VydmljZShsb2NhbFN0b3JhZ2UpO1xuY29uc3QgZ2FtZUN0cmwgPSBuZXcgR2FtZUNvbnRyb2xsZXIoZ2FtZVBsYXksIHN0YXRlU2VydmljZSk7XG5nYW1lQ3RybC5pbml0KCk7XG4vLyBkb24ndCB3cml0ZSB5b3VyIGNvZGUgaGVyZVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVN0YXRlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHN0b3JhZ2UpIHtcbiAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICB9XG5cbiAgc2F2ZShzdGF0ZSkge1xuICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKCdzdGF0ZScsIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XG4gIH1cblxuICBsb2FkKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLnN0b3JhZ2UuZ2V0SXRlbSgnc3RhdGUnKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0YXRlJyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgdGhlbWVzIGZyb20gJy4vdGhlbWVzJztcbmltcG9ydCBHYW1lU3RhdGUgZnJvbSAnLi9HYW1lU3RhdGUnO1xuaW1wb3J0IEdhbWVQbGF5IGZyb20gJy4vR2FtZVBsYXknO1xuaW1wb3J0IGN1cnNvcnMgZnJvbSAnLi9jdXJzb3JzJztcbmltcG9ydCBnZXRUcmFuc2l0aW9uQXR0YWNrQ2VsbHMgZnJvbSAnLi90cmFuc2l0aW9uQXR0YWNrQ2VsbHMnO1xuaW1wb3J0IGRvQXR0YWNrQ29tcCBmcm9tICcuL2RvQXR0YWNrQ29tcCc7XG5pbXBvcnQgeyByZXN0b3JlQ2hhciB9IGZyb20gJy4vY3JlYXRlUG9zaXRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihnYW1lUGxheSwgc3RhdGVTZXJ2aWNlKSB7XG4gICAgdGhpcy5nYW1lUGxheSA9IGdhbWVQbGF5O1xuICAgIHRoaXMuc3RhdGVTZXJ2aWNlID0gc3RhdGVTZXJ2aWNlO1xuICAgIHRoaXMuZ2FtZVN0YXRlID0gbmV3IEdhbWVTdGF0ZSh0aGlzLmdhbWVQbGF5KTtcblxuICAgIHRoaXMub25DZWxsQ2xpY2sgPSB0aGlzLm9uQ2VsbENsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNlbGxFbnRlciA9IHRoaXMub25DZWxsRW50ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2VsbExlYXZlID0gdGhpcy5vbkNlbGxMZWF2ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMubmV3R2FtZSA9IHRoaXMubmV3R2FtZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2F2ZUdhbWUgPSB0aGlzLnNhdmVHYW1lLmJpbmQodGhpcyk7XG4gICAgdGhpcy5sb2FkR2FtZSA9IHRoaXMubG9hZEdhbWUuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgLy8gVE9ETzogYWRkIGV2ZW50IGxpc3RlbmVycyB0byBnYW1lUGxheSBldmVudHNcbiAgICAvLyBUT0RPOiBsb2FkIHNhdmVkIHN0YXRlZCBmcm9tIHN0YXRlU2VydmljZVxuICAgIHRoaXMuZXZlbnRzKCk7XG4gICAgdGhpcy51cGRhdGVQaWN0dXJlKCk7XG4gIH1cblxuICBldmVudHMoKSB7XG4gICAgdGhpcy5nYW1lUGxheS5hZGRDZWxsRW50ZXJMaXN0ZW5lcih0aGlzLm9uQ2VsbEVudGVyKTtcbiAgICB0aGlzLmdhbWVQbGF5LmFkZENlbGxMZWF2ZUxpc3RlbmVyKHRoaXMub25DZWxsTGVhdmUpO1xuICAgIHRoaXMuZ2FtZVBsYXkuYWRkQ2VsbENsaWNrTGlzdGVuZXIodGhpcy5vbkNlbGxDbGljayk7XG4gICAgdGhpcy5nYW1lUGxheS5hZGROZXdHYW1lTGlzdGVuZXIodGhpcy5uZXdHYW1lKTtcbiAgICB0aGlzLmdhbWVQbGF5LmFkZFNhdmVHYW1lTGlzdGVuZXIodGhpcy5zYXZlR2FtZSk7XG4gICAgdGhpcy5nYW1lUGxheS5hZGRMb2FkR2FtZUxpc3RlbmVyKHRoaXMubG9hZEdhbWUpO1xuICB9XG5cbiAgbmV3R2FtZSgpIHtcbiAgICB0aGlzLmdhbWVTdGF0ZS5oaXN0b3J5LnB1c2goe1xuICAgICAgbGV2ZWxHYW1lOiB0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWUsXG4gICAgICBwb2ludHM6IHRoaXMuZ2FtZVN0YXRlLnBvaW50cyxcbiAgICB9KTtcbiAgICB0aGlzLmdhbWVTdGF0ZS5ibG9jayA9IGZhbHNlO1xuICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSA9IDE7XG4gICAgdGhpcy5nYW1lU3RhdGUucG9pbnRzID0gMDtcbiAgICB0aGlzLmdhbWVTdGF0ZS5jb3VudENsaWNrID0gMDtcblxuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLmdhbWVTdGF0ZS5pbml0TmV3VGVhbXMoKTtcbiAgICB0aGlzLnVwZGF0ZVBpY3R1cmUoKTtcbiAgfVxuXG4gIHNhdmVHYW1lKCkge1xuICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnNhdmUodGhpcy5nYW1lU3RhdGUpO1xuICAgIEdhbWVQbGF5LnNob3dNZXNzYWdlKCdZb3VyIGdhbWUgaGFzIHNhdmVkIScsICc5OTk3Jyk7XG4gIH1cblxuICBsb2FkR2FtZSgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbG9hZEdhbWVTdGF0ZSA9IHRoaXMuc3RhdGVTZXJ2aWNlLmxvYWQoKTtcblxuICAgICAgaWYgKGxvYWRHYW1lU3RhdGUpIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cclxuICAgICAgICBsb2FkR2FtZVN0YXRlLmJsb2NrID09PSB0cnVlID8gdGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lID0gKGxvYWRHYW1lU3RhdGUubGV2ZWxHYW1lIC0gMSkgOiB0aGlzLmdhbWVTdGF0ZS5sZXZlbEdhbWUgPSBsb2FkR2FtZVN0YXRlLmxldmVsR2FtZTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jb3VudENsaWNrID0gbG9hZEdhbWVTdGF0ZS5jb3VudENsaWNrO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmhpc3RvcnkgPSBsb2FkR2FtZVN0YXRlLmhpc3Rvcnk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuaXNNb3ZlID0gbG9hZEdhbWVTdGF0ZS5pc01vdmU7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2sgPSBsb2FkR2FtZVN0YXRlLmJsb2NrO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnBvaW50cyA9IGxvYWRHYW1lU3RhdGUucG9pbnRzO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtID0gW107XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0gPSBbXTtcclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3RhcnRBY3RDaGFyID0gcmVzdG9yZUNoYXIobG9hZEdhbWVTdGF0ZS5hY3RpdmVDaGFyKTtcclxuICAgICAgICBsb2FkR2FtZVN0YXRlLnVzZXJUZWFtLmZvckVhY2goKG8pID0+IHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtLnB1c2gocmVzdG9yZUNoYXIobykpKTtcclxuICAgICAgICBsb2FkR2FtZVN0YXRlLmNvbXBUZWFtLmZvckVhY2goKG8pID0+IHRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtLnB1c2gocmVzdG9yZUNoYXIobykpKTtcclxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllciA9IHRoaXMuZ2FtZVN0YXRlLmdldEFsbFBvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS51c2VyVGVhbSwgdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0pO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGljdHVyZSgpO1xyXG4gICAgICAgIHRoaXMucmVhY3RPbkNsaWNrKHJlc3RhcnRBY3RDaGFyLCByZXN0YXJ0QWN0Q2hhci5wb3NpdGlvbiwgWydib3dtYW4nLCAnc3dvcmRzbWFuJywgJ21hZ2ljaWFuJ10pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5nYW1lU3RhdGUucG9pbnRzKSB7XHJcbiAgICAgICAgICBHYW1lUGxheS5zaG93UG9pbnRzKGBZb3VyIHBvaW50cyAke3RoaXMuZ2FtZVN0YXRlLnBvaW50c31gLCAnMTI4MDc2Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIEdhbWVQbGF5LnNob3dQb2ludHMoJ1RoZXJlXFwncyBubyBwb2ludHMuIFxcbiBJdFxcJ3MgdGhlIGZpcnN0IHJvdW5kJywgJzEyODA4MycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICBHYW1lUGxheS5zaG93RXJyb3IoJ1RoZXJlYHMgbm8gZ2FtZSBpbiBtZW1vcnknLCAnMTI4MDc1Jyk7XHJcbiAgICAgIHRoaXMubmV3R2FtZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25DZWxsQ2xpY2soaW5kZXgpIHtcclxuICAgIC8vIFRPRE86IHJlYWN0IHRvIGNsaWNrXHJcbiAgICBpZiAoIXRoaXMuZ2FtZVN0YXRlLmJsb2NrKSB7XHJcbiAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LmdyZWVuID09PSBpbmRleCkge1xyXG4gICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhci5wb3NpdGlvbiA9IGluZGV4O1xyXG4gICAgICAgICAgdGhpcy5nYW1lU3RhdGUuY291bnRDbGljayArPSAxO1xyXG4gICAgICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUuYWxsUGxheWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC5yZWQgPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAvLyBkbyBhdHRhY2sgdXNlclxyXG4gICAgICAgICAgdGhpcy5nYW1lU3RhdGUuaXNNb3ZlID0gJ3VzZXInO1xyXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2VEb0RhbWFnZSA9IGF3YWl0IHRoaXMuZG9EYW1hZ2UoaW5kZXgpO1xyXG4gICAgICAgICAgaWYgKHJlc3BvbnNlRG9EYW1hZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuY291bnRDbGljayArPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSArPSAxO1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnBvaW50cyArPSB0aGlzLmdhbWVTdGF0ZS5jYWxjdWxhdGVTdW1Qb2ludHMoKTtcclxuICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbi8qXHJcbiAgICAgICAgICAgICAgLy8gc3RvcCBnYW1lXHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmxldmVsR2FtZSA+PSA1KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5wb2ludCA9IHRoaXMuZ2FtZVN0YXRlLmNhbGN1bGF0ZVN1bVBvaW50cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUuYWxsUGxheWVyKTtcclxuICAgICAgICAgICAgICAgIEdhbWVQbGF5LnNob3dNZXNzYWdlKGBZb3Ugd2luISBZb3VyIHBvaW50cyBhcmUgJHt0aGlzLmdhbWVTdGF0ZS5wb2ludH1gLCAnMTI3ODgxJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuICovXHJcbiAgICAgICAgICAgICAgLy8gbGV2ZWwgdXBcclxuICAgICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5zdXJ2aXZvcyA9IHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtO1xyXG5cclxuICAgICAgICAgICAgICBHYW1lUGxheS5zaG93TWVzc2FnZShgTGV2ZWwgdXAhIFlvdXIgdG90YWwgcG9pbnRzIGFyZSAke3RoaXMuZ2FtZVN0YXRlLnBvaW50c31gLCAnOTk5NicpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmxldmVsVXAoKTtcclxuICAgICAgICAgICAgICB0aGlzLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBwbGF5ZXIgPSB0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIuZmluZCgoZWwpID0+IGVsLnBvc2l0aW9uID09PSBpbmRleCk7XHJcbiAgICAgIHRoaXMucmVhY3RPbkNsaWNrKHBsYXllciwgaW5kZXgsIFsnYm93bWFuJywgJ3N3b3Jkc21hbicsICdtYWdpY2lhbiddKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5jb3VudENsaWNrID49IDEpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyVXNlciA9IHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXI7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuaXNNb3ZlID0gJ2NvbXAnO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlRG9BdHRhY2tDb21wID0gYXdhaXQgZG9BdHRhY2tDb21wKHRoaXMpO1xyXG4gICAgICAgIGlmIChyZXNwb25zZURvQXR0YWNrQ29tcCkge1xyXG4gICAgICAgICAgdGhpcy5nYW1lU3RhdGUuY291bnRDbGljayA9IDA7XHJcbiAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pc01vdmUgPSAndXNlcic7XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuaXNEZWFkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhciA9IHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXJVc2VyO1xyXG4gICAgICAgICAgICB0aGlzLnJlYWN0T25DbGljayh0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyLCB0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyLnBvc2l0aW9uLCBbJ2Jvd21hbicsICdzd29yZHNtYW4nLCAnbWFnaWNpYW4nXSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBsYXkucmVkcmF3UG9zaXRpb25zKHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllcik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNlbGxFbnRlcihpbmRleCkge1xyXG4gICAgLy8gVE9ETzogcmVhY3QgdG8gbW91c2UgZW50ZXJcclxuXHJcbiAgICAvLyBzaG93IGluZm9ybWF0aW9uIGFib3V0IHBsYXllclxyXG4gICAgaWYgKCF0aGlzLmdhbWVTdGF0ZS5ibG9jaykge1xyXG4gICAgICBjb25zdCBwbGF5ZXIgPSB0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIuZmluZCgoZWwpID0+IGVsLnBvc2l0aW9uID09PSBpbmRleCk7XHJcbiAgICAgIGlmIChwbGF5ZXIpIHtcclxuICAgICAgICB0aGlzLmdhbWVQbGF5LnNob3dDZWxsVG9vbHRpcCh0aGlzLmdhbWVTdGF0ZS5nZXRJbmZvKHBsYXllci5jaGFyYWN0ZXIpLCBpbmRleCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHNob3cgY2VsbHMgdGhhdCBwbGF5ZXIgY2FuIGdvIHRvXHJcbiAgICAgIGlmICh0aGlzLmdhbWVTdGF0ZS5hY3RpdmVDaGFyKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lUGxheS5zZXRDdXJzb3IoY3Vyc29ycy5wb2ludGVyKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnRyYW5zaXRpb25DZWxscy5maW5kKChpdGVtKSA9PiBpdGVtID09PSBpbmRleClcclxuICAgICAgICAgICYmICF0aGlzLmdhbWVTdGF0ZS51c2VyVGVhbS5maW5kKChpdGVtKSA9PiBpdGVtLnBvc2l0aW9uID09PSBpbmRleClcclxuICAgICAgICAgICYmICF0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbS5maW5kKChpdGVtKSA9PiBpdGVtLnBvc2l0aW9uID09PSBpbmRleCkpIHtcclxuICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LmdyZWVuID0gaW5kZXg7XHJcbiAgICAgICAgICB0aGlzLmdhbWVQbGF5LnNlbGVjdENlbGwoaW5kZXgsICdncmVlbicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmF0dGFja0NlbGxzLmZpbmQoKGl0ZW0pID0+IGl0ZW0gPT09IGluZGV4KVxyXG4gICAgICAgICAgJiYgdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0uZmluZCgoaXRlbSkgPT4gaXRlbS5wb3NpdGlvbiA9PT0gaW5kZXgpKSB7XHJcbiAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC5yZWQgPSBpbmRleDtcclxuICAgICAgICAgIHRoaXMuZ2FtZVBsYXkuc2VsZWN0Q2VsbChpbmRleCwgJ3JlZCcpO1xyXG4gICAgICAgICAgdGhpcy5nYW1lUGxheS5zZXRDdXJzb3IoY3Vyc29ycy5jcm9zc2hhaXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25DZWxsTGVhdmUoaW5kZXgpIHtcclxuICAgIHRoaXMuZ2FtZVBsYXkuaGlkZUNlbGxUb29sdGlwKGluZGV4KTtcclxuICAgIC8vIFRPRE86IHJlYWN0IHRvIG1vdXNlIGxlYXZlXHJcbiAgICBpZiAoIXRoaXMuZ2FtZVN0YXRlLmJsb2NrKSB7XHJcbiAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VsZWN0ZWQtZ3JlZW4nKSkge1xyXG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuZGVzZWxlY3RDZWxsKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LmdyZWVuKTtcclxuXHJcbiAgICAgICAgLy8gc2hvdyBjZWxscyB3aGl0IG9wcG9uZW50cyB0aGF0IHBsYXllciBjYSBkbyBub3RoaW5nXHJcbiAgICAgICAgaWYgKCF0aGlzLmdhbWVTdGF0ZS5hdHRhY2tDZWxscy5maW5kKChpdGVtKSA9PiBpdGVtID09PSBpbmRleClcclxuICAgICAgICAgICYmIHRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtLmZpbmQoKGl0ZW0pID0+IGl0ZW0ucG9zaXRpb24gPT09IGluZGV4KSkge1xyXG4gICAgICAgICAgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QuZ3JlZW4pO1xyXG4gICAgICAgICAgdGhpcy5nYW1lUGxheS5zZXRDdXJzb3IoY3Vyc29ycy5ub3RhbGxvd2VkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNob3cgY2VsbHMgdGhhdCBwbGF5ZXIgYXR0YWNrIGdvIHRvXHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3RlZC1yZWQnKSkge1xyXG4gICAgICAgICAgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QucmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlYWN0T25DbGljayhvYmosIG51bSwgYXJyYXlUeXBlcykge1xyXG4gICAgaWYgKG9iaikge1xyXG4gICAgICBpZiAob2JqLmNoYXJhY3Rlci50eXBlID09PSBhcnJheVR5cGVzWzBdIHx8IG9iai5jaGFyYWN0ZXIudHlwZSA9PT0gYXJyYXlUeXBlc1sxXSB8fCBvYmouY2hhcmFjdGVyLnR5cGUgPT09IGFycmF5VHlwZXNbMl0pIHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLXllbGxvdycpKSB7XHJcbiAgICAgICAgICB0aGlzLmdhbWVQbGF5LmRlc2VsZWN0Q2VsbCh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC55ZWxsb3cpO1xyXG4gICAgICAgICAgdGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QueWVsbG93ID0gbnVtO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdCA9IHsgeWVsbG93OiBudW0gfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuc2VsZWN0Q2VsbChudW0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZVBsYXkuYm9hcmRFbC5jbGFzc0xpc3QuYWRkKCdtb3VudGFpbicpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIgPSBvYmo7XHJcbiAgICAgICAgbGV0IG1heFJhbmdlO1xyXG4gICAgICAgIGxldCBtYXhBdHRhY2s7XHJcbiAgICAgICAgc3dpdGNoIChvYmouY2hhcmFjdGVyLnR5cGUpIHtcclxuICAgICAgICAgIGNhc2UgJ3ZhbXBpcmUnOlxyXG4gICAgICAgICAgY2FzZSAnYm93bWFuJzpcclxuICAgICAgICAgICAgbWF4UmFuZ2UgPSAyO1xyXG4gICAgICAgICAgICBtYXhBdHRhY2sgPSAyO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3VuZGVhZCc6XHJcbiAgICAgICAgICBjYXNlICdzd29yZHNtYW4nOlxyXG4gICAgICAgICAgICBtYXhSYW5nZSA9IDQ7XHJcbiAgICAgICAgICAgIG1heEF0dGFjayA9IDE7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnZGFlbW9uJzpcclxuICAgICAgICAgIGNhc2UgJ21hZ2ljaWFuJzpcclxuICAgICAgICAgICAgbWF4UmFuZ2UgPSAxO1xyXG4gICAgICAgICAgICBtYXhBdHRhY2sgPSA0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIG1heFJhbmdlID0gMTtcclxuICAgICAgICAgICAgbWF4QXR0YWNrID0gMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS50cmFuc2l0aW9uQ2VsbHMgPSBnZXRUcmFuc2l0aW9uQXR0YWNrQ2VsbHMobnVtLCB0aGlzLmdhbWVQbGF5LmJvYXJkU2l6ZSwgbWF4UmFuZ2UpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmF0dGFja0NlbGxzID0gZ2V0VHJhbnNpdGlvbkF0dGFja0NlbGxzKG51bSwgdGhpcy5nYW1lUGxheS5ib2FyZFNpemUsIG1heEF0dGFjaywgdHJ1ZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3RcclxuICAgICAgICAmJiAhdGhpcy5nYW1lU3RhdGUuYXR0YWNrQ2VsbHMuZmluZCgoaXRlbSkgPT4gaXRlbSA9PT0gbnVtKVxyXG4gICAgICAgICYmIHRoaXMuZ2FtZVN0YXRlLmNvbXBUZWFtLmZpbmQoKGl0ZW0pID0+IGl0ZW0ucG9zaXRpb24gPT09IG51bSkpIHtcclxuICAgICAgICBHYW1lUGxheS5zaG93RXJyb3IoXCJJdCBjYW4ndCBiZSBkb25lXCIsICc5OTQwJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXIpIHtcclxuICAgICAgICBHYW1lUGxheS5zaG93RXJyb3IoJ1RoaXMgaXNuYHQgeW91ciBjaGFyYWN0ZXInLCAnOTk5NScpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBkb0RhbWFnZShpbmRleCkge1xyXG4gICAgY29uc3QgYXR0YWNraW5nID0gdGhpcy5nYW1lU3RhdGUuYWN0aXZlQ2hhci5jaGFyYWN0ZXIuYXR0YWNrO1xyXG4gICAgY29uc3Qgb3Bwb25lbnQgPSB0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIuZmluZCgoZWwpID0+IGVsLnBvc2l0aW9uID09PSBpbmRleCk7XHJcbiAgICBjb25zdCBkYW1hZ2UgPSBNYXRoLnJvdW5kKE1hdGgubWF4KGF0dGFja2luZyAtIG9wcG9uZW50LmNoYXJhY3Rlci5kZWZlbmNlLCBhdHRhY2tpbmcgKiAwLjMpKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlU2hvd0RhbWFnZSA9IGF3YWl0IHRoaXMuZ2FtZVBsYXkuc2hvd0RhbWFnZShpbmRleCwgZGFtYWdlKTtcclxuXHJcbiAgICBpZiAocmVzcG9uc2VTaG93RGFtYWdlKSB7XHJcbiAgICAgIG9wcG9uZW50LmNoYXJhY3Rlci5oZWFsdGggPSBvcHBvbmVudC5jaGFyYWN0ZXIuaGVhbHRoIC0gZGFtYWdlO1xyXG4gICAgICB0aGlzLmNoZWNrSGVhbHRoUmVtb3ZlRGVhZChvcHBvbmVudCk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2hlY2tIZWFsdGhSZW1vdmVEZWFkKHBsYXllcikge1xyXG4gICAgaWYgKHBsYXllci5jaGFyYWN0ZXIuaGVhbHRoIDw9IDApIHtcclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmlzTW92ZSA9PT0gJ2NvbXAnKSB7XHJcbiAgICAgICAgY29uc3QgZmluZEluZGV4ID0gdGhpcy5nYW1lU3RhdGUudXNlclRlYW0uZmluZEluZGV4KChpdGVtKSA9PiBwbGF5ZXIucG9zaXRpb24gPT09IGl0ZW0ucG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJUZWFtLnNwbGljZShmaW5kSW5kZXgsIDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5nYW1lU3RhdGUuaXNNb3ZlID09PSAndXNlcicpIHtcclxuICAgICAgICBjb25zdCBmaW5kSW5kZXggPSB0aGlzLmdhbWVTdGF0ZS5jb21wVGVhbS5maW5kSW5kZXgoKGl0ZW0pID0+IHBsYXllci5wb3NpdGlvbiA9PT0gaXRlbS5wb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0uc3BsaWNlKGZpbmRJbmRleCwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuZ2FtZVN0YXRlLmFsbFBsYXllciA9IHRoaXMuZ2FtZVN0YXRlLmdldEFsbFBvc2l0aW9ucyh0aGlzLmdhbWVTdGF0ZS51c2VyVGVhbSwgdGhpcy5nYW1lU3RhdGUuY29tcFRlYW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVzZXQoKSB7XHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QpIHtcclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LnllbGxvdykgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QueWVsbG93KTtcclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LnJlZCkgdGhpcy5nYW1lUGxheS5kZXNlbGVjdENlbGwodGhpcy5nYW1lU3RhdGUuaW5kZXhTZWxlY3QucmVkKTtcclxuICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLmluZGV4U2VsZWN0LmdyZWVuKSB0aGlzLmdhbWVQbGF5LmRlc2VsZWN0Q2VsbCh0aGlzLmdhbWVTdGF0ZS5pbmRleFNlbGVjdC5ncmVlbik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5nYW1lUGxheS5zZXRDdXJzb3IoY3Vyc29ycy5hdXRvKTtcclxuICB9XHJcblxyXG4gIGlzRGVhZCgpIHtcclxuICAgIHJldHVybiB0aGlzLmdhbWVTdGF0ZS5hbGxQbGF5ZXIuZmluZChlID0+IGUucG9zaXRpb24gPT09IHRoaXMuZ2FtZVN0YXRlLmFjdGl2ZUNoYXJVc2VyLnBvc2l0aW9uKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVBpY3R1cmUoKSB7XHJcbiAgICB0aGlzLmdhbWVQbGF5LmRyYXdVaShPYmplY3QudmFsdWVzKHRoZW1lcylbdGhpcy5nYW1lU3RhdGUubGV2ZWxHYW1lIC0gMV0pO1xyXG4gICAgdGhpcy5nYW1lUGxheS5yZWRyYXdQb3NpdGlvbnModGhpcy5nYW1lU3RhdGUuYWxsUGxheWVyKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEdhbWVQbGF5IGZyb20gJy4vR2FtZVBsYXknO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBkb0F0dGFja0NvbXAob2JqKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlICovXG4gIGNvbnN0IGFjdGl2ZUNvbXAgPSBvYmouZ2FtZVN0YXRlLmNvbXBUZWFtLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiAoYWNjLmNoYXJhY3Rlci5hdHRhY2sgPiBjdXJyLmNoYXJhY3Rlci5hdHRhY2sgPyBhY2MgOiBjdXJyKSk7XG4gIG9iai5nYW1lU3RhdGUuYWN0aXZlQ2hhciA9IGFjdGl2ZUNvbXA7XG4gIG9iai5yZWFjdE9uQ2xpY2soYWN0aXZlQ29tcCwgYWN0aXZlQ29tcC5wb3NpdGlvbiwgWydkYWVtb24nLCAndW5kZWFkJywgJ3ZhbXBpcmUnXSk7XG5cbiAgbGV0IGlzR29hbCA9IGZhbHNlO1xuICBsZXQgdXNlclBvc2l0aW9uO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2Ygb2JqLmdhbWVTdGF0ZS51c2VyVGVhbSkge1xuICAgIGlmIChvYmouZ2FtZVN0YXRlLmF0dGFja0NlbGxzLmluY2x1ZGVzKGl0ZW0ucG9zaXRpb24pKSB7XG4gICAgICBpc0dvYWwgPSB0cnVlO1xuICAgICAgdXNlclBvc2l0aW9uID0gaXRlbS5wb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNHb2FsKSB7XG4gICAgY29uc3QgcmVzcG9uc2VEb0RhbWFnZSA9IGF3YWl0IG9iai5kb0RhbWFnZSh1c2VyUG9zaXRpb24pO1xuICAgIGlmIChyZXNwb25zZURvRGFtYWdlKSB7XG4gICAgICBpZiAob2JqLmdhbWVTdGF0ZS51c2VyVGVhbS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gc3RvcCBnYW1lXG4gICAgICAgIG9iai5nYW1lU3RhdGUuYmxvY2sgPSB0cnVlO1xuICAgICAgICBHYW1lUGxheS5zaG93TWVzc2FnZSgnWW91IGxvc2UhJywgJzEyOTMzNScpO1xuICAgICAgfVxuICAgICAgb2JqLmdhbWVQbGF5LnJlZHJhd1Bvc2l0aW9ucyhvYmouZ2FtZVN0YXRlLmFsbFBsYXllcik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCByYW5kO1xuICAgIGxldCBpc1BsYXllcjtcbiAgICBkbyB7XG4gICAgICByYW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogb2JqLmdhbWVTdGF0ZS50cmFuc2l0aW9uQ2VsbHMubGVuZ3RoKTtcbiAgICAgIGlzUGxheWVyID0gb2JqLmdhbWVTdGF0ZS5hbGxQbGF5ZXIuZmluZChvID0+IG8ucG9zaXRpb24gPT09IHJhbmQpO1xuICAgIH0gd2hpbGUgKGlzUGxheWVyKTtcblxuICAgIGFjdGl2ZUNvbXAucG9zaXRpb24gPSBvYmouZ2FtZVN0YXRlLnRyYW5zaXRpb25DZWxsc1tyYW5kXTtcbiAgICBvYmouZ2FtZVBsYXkucmVkcmF3UG9zaXRpb25zKG9iai5nYW1lU3RhdGUuYWxsUGxheWVyKTtcbiAgfVxuICBvYmouZ2FtZVN0YXRlLmFjdGl2ZUNoYXIgPSB1bmRlZmluZWQ7XG4gIG9iai5yZXNldCgpO1xuXG4gIHJldHVybiB0cnVlO1xufVxuIl0sIm5hbWVzIjpbImNhbGNUaWxlVHlwZSIsImluZGV4IiwiYm9hcmRTaXplIiwiaSIsInNob3dNb2RhbCIsIm1lc3NhZ2UiLCJ1bmljb2RlIiwibW9kYWwiLCJvcHRpb25zIiwiZWxlbU1vZGFsIiwiZXZlbnRTaG93TW9kYWwiLCJldmVudEhpZGVNb2RhbCIsImhpZGluZyIsImRlc3Ryb3llZCIsImFuaW1hdGlvblNwZWVkIiwiaGlkZU1vZGFsIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwic2V0VGltZW91dCIsImRvY3VtZW50IiwiZGlzcGF0Y2hFdmVudCIsImhhbmRsZXJDbG9zZU1vZGFsIiwiZSIsInRhcmdldCIsImRhdGFzZXQiLCJkaXNtaXNzIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsIm1vZGFsSFRNTCIsIm1vZGFsRm9vdGVySFRNTCIsInJlcGxhY2UiLCJ0aXRsZSIsImNvbnRlbnQiLCJmb290ZXJCdXR0b25zIiwibGVuZ3RoIiwibW9kYWxGb290ZXJCdXR0b24iLCJjbGFzcyIsImhhbmRsZXIiLCJ0ZXh0IiwiaW5uZXJIVE1MIiwiYm9keSIsImFwcGVuZENoaWxkIiwiY3JlYXRlTW9kYWwiLCJhZGRFdmVudExpc3RlbmVyIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJzaG93IiwiaGlkZSIsImRlc3Ryb3kiLCJwYXJlbnRFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0Q29udGVudCIsImh0bWwiLCJxdWVyeVNlbGVjdG9yIiwic2V0VGl0bGUiLCJtb2RhbEZ1bmMiLCJHYW1lUGxheSIsImNvbnN0cnVjdG9yIiwidGhpcyIsImNvbnRhaW5lciIsImJvYXJkRWwiLCJjZWxscyIsImNlbGxDbGlja0xpc3RlbmVycyIsImNlbGxFbnRlckxpc3RlbmVycyIsImNlbGxMZWF2ZUxpc3RlbmVycyIsIm5ld0dhbWVMaXN0ZW5lcnMiLCJzYXZlR2FtZUxpc3RlbmVycyIsImxvYWRHYW1lTGlzdGVuZXJzIiwiYmluZFRvRE9NIiwiSFRNTEVsZW1lbnQiLCJFcnJvciIsImRyYXdVaSIsInRoZW1lIiwiY2hlY2tCaW5kaW5nIiwibmV3R2FtZUVsIiwic2F2ZUdhbWVFbCIsImxvYWRHYW1lRWwiLCJldmVudCIsIm9uTmV3R2FtZUNsaWNrIiwib25TYXZlR2FtZUNsaWNrIiwib25Mb2FkR2FtZUNsaWNrIiwiY2VsbEVsIiwib25DZWxsRW50ZXIiLCJvbkNlbGxMZWF2ZSIsIm9uQ2VsbENsaWNrIiwiQXJyYXkiLCJmcm9tIiwiY2hpbGRyZW4iLCJyZWRyYXdQb3NpdGlvbnMiLCJwb3NpdGlvbnMiLCJjZWxsIiwicG9zaXRpb24iLCJjaGFyRWwiLCJjaGFyYWN0ZXIiLCJ0eXBlIiwiaGVhbHRoRWwiLCJoZWFsdGhJbmRpY2F0b3JFbCIsImhlYWx0aCIsInN0eWxlIiwid2lkdGgiLCJhZGRDZWxsRW50ZXJMaXN0ZW5lciIsImNhbGxiYWNrIiwicHVzaCIsImFkZENlbGxMZWF2ZUxpc3RlbmVyIiwiYWRkQ2VsbENsaWNrTGlzdGVuZXIiLCJhZGROZXdHYW1lTGlzdGVuZXIiLCJhZGRTYXZlR2FtZUxpc3RlbmVyIiwiYWRkTG9hZEdhbWVMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0IiwiaW5kZXhPZiIsImN1cnJlbnRUYXJnZXQiLCJmb3JFYWNoIiwibyIsImNhbGwiLCJzdGF0aWMiLCJzZWxlY3RDZWxsIiwiY29sb3IiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJkZXNlbGVjdENlbGwiLCJmaWx0ZXIiLCJzdGFydHNXaXRoIiwic2hvd0NlbGxUb29sdGlwIiwiaGlkZUNlbGxUb29sdGlwIiwic2hvd0RhbWFnZSIsImRhbWFnZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGFtYWdlRWwiLCJ0ZXh0Q29udGVudCIsInNldEN1cnNvciIsImN1cnNvciIsInByYWlyaWUiLCJkZXNlcnQiLCJhcmN0aWMiLCJtb3VudGFpbiIsIkNoYXJhY3RlciIsImxldmVsIiwibmFtZSIsImF0dGFjayIsImRlZmVuY2UiLCJCb3dtYW4iLCJzdXBlciIsIlN3b3Jkc21hbiIsIk1hZ2ljaWFuIiwiVmFtcGlyZSIsIkRhZW1vbiIsIlVuZGVhZCIsIlRlYW0iLCJjaGFyYWN0ZXJzIiwiUG9zaXRpb25lZENoYXJhY3RlciIsImNob29zZVJhbmRQb3NpdGlvbnMiLCJjaG9vc2VSYW5kUG9zaXRpb24iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjcmVhdGVQb3NpdGlvbnNDaGFyIiwicGxheWVyVHlwZXMiLCJvcHBvbmVudCIsIl9yZWYiLCJtYXhMZXZlbCIsImNoYXJDb3VudCIsInRlYW0iLCJhbGxvd2VkVHlwZXMiLCJjaGFyYWN0ZXJDb3VudCIsInBsYXllckdlbmVyYXRvciIsInJhbmRvbUxldmVsIiwiUmFuZG9tQ2xhc3MiLCJjaGFyYWN0ZXJHZW5lcmF0b3IiLCJuZXh0IiwidmFsdWUiLCJnZW5lcmF0ZVRlYW0iLCJyYW5kUG9zaXRpb25zIiwiY2hhciIsInJhbmRQb3NpdGlvbiIsImlzUG9zaXRpb25VbmlxdWUiLCJmaW5kIiwiZWwiLCJyZXN0b3JlQ2hhciIsIm9iaiIsIkNoYXJDbGFzcyIsInJlc3RvcmVQb3NpdGlvbmVkQ2hhciIsIkdhbWVTdGF0ZSIsImdhbWVQbGF5IiwibGV2ZWxHYW1lIiwidXNlclRlYW0iLCJjb21wVGVhbSIsImFsbFBsYXllciIsImlzTW92ZSIsImNvdW50Q2xpY2siLCJzdXJ2aXZvcyIsImhpc3RvcnkiLCJwb2ludHMiLCJibG9jayIsImluaXROZXdUZWFtcyIsImdldFVzZXJUZWFtIiwiZ2V0Q29tcFRlYW0iLCJfcmVmMiIsImdldEFsbFBvc2l0aW9ucyIsImFycmF5MSIsImFycmF5MiIsImNvbmNhdCIsImdldEluZm8iLCJwbGF5ZXIiLCJsZXZlbFVwIiwidXBBdHRhY2tEZWZlbmNlIiwiT2JqZWN0IiwidmFsdWVzIiwidGhlbWVzIiwibmV3VXNlclRlYW0iLCJhbGxTdGFydFBvc2l0aW9ucyIsIml0ZW0iLCJzcGxpY2UiLCJpbmNsdWRlcyIsInJhbmQiLCJiZWZvcmUiLCJsaWZlIiwibWF4IiwiY2FsY3VsYXRlU3VtUG9pbnRzIiwicmVkdWNlIiwiYSIsImIiLCJnZXRUcmFuc2l0aW9uQXR0YWNrQ2VsbHMiLCJtYXhSYW5nZSIsImFycmF5Q2VsbHMiLCJ0YWJsZUNlbGxzIiwicmVzdWx0IiwicyIsInNsaWNlIiwiZ2V0VGFibGUiLCJhbGxvd2VkQ2VsbHMiLCJmaW5kSW5kZXgiLCJyb3ciLCJqIiwiZ2V0QXR0YWNrQ2VsbHMiLCJ0cmFuc2l0Q2VsbHMiLCJnZXRUcmFuc2l0aW9uQ2VsbHMiLCJzdGF0ZVNlcnZpY2UiLCJzdG9yYWdlIiwic2F2ZSIsInN0YXRlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2FkIiwicGFyc2UiLCJnZXRJdGVtIiwibG9jYWxTdG9yYWdlIiwiZ2FtZUN0cmwiLCJnYW1lU3RhdGUiLCJiaW5kIiwibmV3R2FtZSIsInNhdmVHYW1lIiwibG9hZEdhbWUiLCJpbml0IiwiZXZlbnRzIiwidXBkYXRlUGljdHVyZSIsInJlc2V0Iiwic2hvd01lc3NhZ2UiLCJsb2FkR2FtZVN0YXRlIiwicmVzdGFydEFjdENoYXIiLCJhY3RpdmVDaGFyIiwicmVhY3RPbkNsaWNrIiwic2hvd1BvaW50cyIsImNvbnNvbGUiLCJlcnJvciIsInNob3dFcnJvciIsImFzeW5jIiwiaW5kZXhTZWxlY3QiLCJncmVlbiIsInJlZCIsImRvRGFtYWdlIiwiYWN0aXZlQ2hhclVzZXIiLCJhY3RpdmVDb21wIiwiYWNjIiwiY3VyciIsInVzZXJQb3NpdGlvbiIsImlzR29hbCIsImF0dGFja0NlbGxzIiwiaXNQbGF5ZXIiLCJ0cmFuc2l0aW9uQ2VsbHMiLCJkb0F0dGFja0NvbXAiLCJpc0RlYWQiLCJjdXJzb3JzIiwibnVtIiwiYXJyYXlUeXBlcyIsIm1heEF0dGFjayIsInllbGxvdyIsImF0dGFja2luZyIsInJvdW5kIiwiY2hlY2tIZWFsdGhSZW1vdmVEZWFkIl0sInNvdXJjZVJvb3QiOiIifQ==